{"componentChunkName":"component---src-templates-md-page-js","path":"/docs/ac-pool/","result":{"data":{"site":{"siteMetadata":{"title":"Another C Library"}},"markdownRemark":{"id":"fab92a85-30fc-5a12-9164-22ce6f6fa580","html":"<p>The ac_pool provides an api similar to malloc, calloc, strdup, and more.  The pool uses an allocate and clear approach.  There is no free method.  It has no free function. The clear call clears all of the memory that has been previously allocated from the pool. Internally, resets a counter to zero to clear and adds to the counter to allocate (most of the time), so it is very efficient.</p>\n<h3 id=\"commonly-used-functions\"><a href=\"#commonly-used-functions\" aria-label=\"commonly used functions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commonly used functions</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_pool.h\"</span></span>\n\nac_pool_t <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_init</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_pool_set_minimum_growth_size</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_alloc</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_calloc</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_strdup</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_strdupf</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_dup</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsize_t <span class=\"token function\">ac_pool_size</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsize_t <span class=\"token function\">ac_pool_used</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_pool_clear</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_pool_destroy</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The pool is initialized with a size which will become the internal normal usage.  The pool will grow by a minimum growth size (or more) if needed which can be set after initialization.  The default minimum growth size is the size that is passed in.  There can be a slight advantage to using a size that is a multiple of 4096 when selecting a size (do this instead of selecting 3800 or something close to 4096).</p>\n<p>The pool has a number of allocation methods.  To keep things simpler, I've listed the ones which are the easiest to understand first.</p>\n<p>void *ac<em>pool</em>alloc(ac<em>pool</em>t *h, size_t length);<br/>\nReturns a pointer to length uninitialized bytes (similar to malloc).</p>\n<p>void *ac<em>pool</em>calloc(ac<em>pool</em>t *h, size_t length);<br/>\nReturns a pointer to length zeroed bytes (similar to calloc).</p>\n<p>char *ac<em>pool</em>strdup(ac<em>pool</em>t *h, const char *p);<br/>\nReturns a pointer to a copy of the string passed into it (similar to strdup).</p>\n<p>char *ac<em>pool</em>strdupf(ac<em>pool</em>t *h, const char *p, ...);<br/>\nReturns a pointer to a copy of the string passed into it (similar to strdup).</p>\n<p>void *ac<em>pool</em>dup(ac<em>pool</em>t *, const void *data, size_t length);<br/>\nReturns a pointer to a copy of data (which is length bytes).</p>\n<p>size<em>t ac</em>pool<em>size(ac</em>pool_t *h);<br/>\nReturns the number of bytes that have been allocated from any of the alloc calls above.</p>\n<p>size<em>t ac</em>pool<em>used(ac</em>pool<em>t *h);<br/>\nReturns the number of bytes that have been allocated by the pool itself.  This will always be greater than ac</em>pool_size as there is overhead for the structures and this is independent of any allocating calls.</p>\n<p>void ac<em>pool</em>clear(ac<em>pool</em>t *h);<br/>\nThe pool is meant to be allocated from a number of times and then cleared.  ac<em>pool</em>clear invalidates all of the memory that has been allocated previously.  This function is very efficient and can be called even if no prior allocations have happened.</p>\n<p>void ac<em>pool</em>destroy(ac<em>pool</em>t *h);<br/>\nOnce the pool is no longer needed, call ac<em>pool</em>destroy to clean up all of its resources.  Calling ac<em>pool</em>destroy will invalidate all of the memory that has been allocated from the pool object.</p>\n<h3 id=\"more-advanced-functions-or-less-used\"><a href=\"#more-advanced-functions-or-less-used\" aria-label=\"more advanced functions or less used permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More advanced functions or less used</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_strdupvf</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_min_max_alloc</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> size_t <span class=\"token operator\">*</span>rlen<span class=\"token punctuation\">,</span>\n                            size_t min_len<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_ualloc</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_udup</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_pool_checkpoint</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> ac_pool_checkpoint_t <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_pool_reset</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> ac_pool_checkpoint_t <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>char *ac<em>pool</em>strdupvf(ac<em>pool</em>t *h, const char *format, va<em>list args);<br/>\nSimilar to ac</em>pool<em>strdupf, except that it uses va</em>list args.  ac<em>pool</em>strdupf is implemented using this method as follows.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_pool_strdupf</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  va_list args<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>r <span class=\"token operator\">=</span> <span class=\"token function\">ac_pool_strdupvf</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can implement your own strdupf like functions in a similar manner for other objects that rely upon the pool for internal memory.</p>\n<p>void *ac<em>pool</em>min<em>max</em>alloc(ac<em>pool</em>t *h, size<em>t *rlen, size</em>t min<em>len, size</em>t len);<br/>\nAllocates up to len bytes, but not less than min<em>len bytes.  Internally, the pool uses large blocks of memory which are often partially used up.  min</em>max<em>alloc will only cause the pool to grow if there isn't min</em>len bytes available.</p>\n<p>void *ac<em>pool</em>ualloc(ac<em>pool</em>t *h, size<em>t len);<br/>\nac</em>pool<em>alloc and ac</em>pool_calloc both returned memory that is aligned.  This will return memory that is potentially unaligned (it is used internally by strdup... methods).</p>\n<p>void *ac<em>pool</em>udup(ac<em>pool</em>t *h, const void *data, size<em>t len);<br/>\nac</em>pool_dup returns memory that is aligned.  This will potentially return memory that is unaligned.</p>\n<p>void ac<em>pool</em>checkpoint(ac<em>pool</em>t *h, ac<em>pool</em>checkpoint<em>t *cp);<br/>\nvoid ac</em>pool<em>reset(ac</em>pool<em>t *h, ac</em>pool<em>checkpoint</em>t *cp);<br/>\nCheckpoint and reset work together.  ac<em>pool</em>checkpoint sets a marker in the pool for which it can be reset to with ac<em>pool</em>reset.  This can be useful if you want to allow the pool to grow and shrink back to a certain point.</p>\n<h2 id=\"dependencies\"><a href=\"#dependencies\" aria-label=\"dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies</h2>\n<p>Dependencies are the files necessary to include in your own package.  You can also just include the whole ac_ library.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ac_allocator.h\nac_allocator.c\nac_pool.h\nac_pool.c\nac_common.h</code></pre></div>","frontmatter":{"title":"ac_pool","posttype":"docs"}},"allMarkdownRemark":{"edges":[{"node":{"id":"65ef6af8-db2b-5241-aabb-be94ecaa93a6","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"Line spacing in markdown"},{"value":"Escape characters in markdown"},{"value":"Create multiline macro in C"},{"value":"Static inline vs inline"},{"value":"Regex find replace"},{"value":"Atom-beautify problems"}]}},{"node":{"id":"ea93de22-255a-510a-a3d6-e5ca71719254","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"An important intuition to quicksort"}]}},{"node":{"id":"e92ffe3f-7ca9-5998-86d0-02a589e5a259","frontmatter":{"title":"1. Getting Started","path":"/1-getting-started","posttype":"ebook"},"headings":[]}},{"node":{"id":"b16eb4e9-d84b-5be6-84f7-61ebe2bcc410","frontmatter":{"title":"10. Binary Search Trees","path":"/10-binary-search-trees","posttype":"ebook"},"headings":[{"value":"The basic structure"},{"value":"First, Last, Next, Previous"},{"value":"Erase"},{"value":"Postorder iteration"},{"value":"Printing a binary tree"},{"value":"Finding Peers"},{"value":"Quick Recap"}]}},{"node":{"id":"baba82da-4489-5fd7-9915-ef011f56a666","frontmatter":{"title":"11. Balancing Binary Search Trees","path":"/11-balancing-binary-search-trees","posttype":"ebook"},"headings":[{"value":"Why balancing is important"},{"value":"Properties of a red-black tree"},{"value":"Coloring"},{"value":"Rotations"}]}},{"node":{"id":"f2d454de-1f32-50a9-91a3-f3ed53776f11","frontmatter":{"title":"12. The Red-Black Tree","path":"/12-red-black-tree","posttype":"ebook"},"headings":[{"value":"The properties of a red-black tree"},{"value":"Testing the red-black tree properties"},{"value":"Insert"},{"value":"Erase"},{"value":"Quick recap of when tree becomes invalid"},{"value":"fixcolorfor_erase"},{"value":"Packing color into the parent node"}]}},{"node":{"id":"0229f92a-6f18-52a2-9a98-c536b17b48fa","frontmatter":{"title":"13. The Map Object","path":"/13-map","posttype":"ebook"},"headings":[]}},{"node":{"id":"d40dca2d-317c-5be1-96bb-1a1ce5aa709b","frontmatter":{"title":"14. The Set and Multimap","path":"/14-set-and-multimap","posttype":"ebook"},"headings":[{"value":"The set"},{"value":"The multimap"}]}},{"node":{"id":"dda89e39-e139-5921-b61e-3428acc8db29","frontmatter":{"title":"2. Timing Your Code","path":"/2-timing","posttype":"ebook"},"headings":[{"value":"A brief introduction to C"},{"value":"The void type"},{"value":"What happens during compilation"},{"value":"How to time code"},{"value":"Reversing a string"},{"value":"The basic Makefile"},{"value":"More accurately timing code"},{"value":"Doing a better job of timing continued"},{"value":"Compiler optimizations"},{"value":"Splitting up your code into multiple files part 2"},{"value":"Separating the implementation from the interface"},{"value":"Separating the implementation from the interface (part 2)"},{"value":"Defining an object"},{"value":"The timer interface"},{"value":"Making the timer object reusable"},{"value":"Splitting up a project into multiple directories"},{"value":"Splitting up the Makefile"}]}},{"node":{"id":"9801a3af-8f22-5982-94c5-35f6112eb823","frontmatter":{"title":"3. The Buffer Object","path":"/3-buffer","posttype":"ebook"},"headings":[{"value":"How it compares to other languages"},{"value":"A bit of history and setup"},{"value":"The buffer interface"},{"value":"The implementation"}]}},{"node":{"id":"711af732-1367-5fd2-9136-ab310ae70a1c","frontmatter":{"title":"4. Linked Lists","path":"/4-linked-lists","posttype":"ebook"},"headings":[{"value":"A data structure interface"},{"value":"The data structure interface test driver"},{"value":"The singly linked list"},{"value":"The doubly linked list"}]}},{"node":{"id":"3f9e59fa-f5a7-5d87-95d8-40c4b5a27155","frontmatter":{"title":"5. Introducing Threads","path":"/5-threads","posttype":"ebook"},"headings":[{"value":"Introducing threads"},{"value":"Creating threads"},{"value":"Threads and optimizing code"},{"value":"Avoid global variables when you can"},{"value":"Mutexes"},{"value":"Timing considerations"}]}},{"node":{"id":"14b23037-d39b-5c6a-8575-87c49f29e5bf","frontmatter":{"title":"6. Macros","path":"/6-macros","posttype":"ebook"},"headings":[]}},{"node":{"id":"1f7d377b-cb76-56c9-ab8e-65e6f347a63b","frontmatter":{"title":"7. The Global Allocator Object","path":"/7-allocator","posttype":"ebook"},"headings":[]}},{"node":{"id":"836c39a4-58c3-5e44-973e-2eaee112e590","frontmatter":{"title":"8. The Global Allocator Implementation","path":"/8-allocator-implementation","posttype":"ebook"},"headings":[{"value":"Keywords used"},{"value":"Symbols used"}]}},{"node":{"id":"c0fc3845-5a1d-5561-b1ce-e06b57e99af8","frontmatter":{"title":"9. The Pool Object","path":"/9-pool","posttype":"ebook"},"headings":[]}},{"node":{"id":"065c3ab5-419a-554d-a220-4897a1a6534e","frontmatter":{"title":"ac_allocator","path":"/ac-allocator","posttype":"docs"},"headings":[{"value":"Dependencies"},{"value":"Documentation"},{"value":"Detecting Memory Errors"},{"value":"Double Free"},{"value":"Freeing the Wrong Memory"},{"value":"Tracking Memory Loss Over Time"},{"value":"Advanced Usage"}]}},{"node":{"id":"fab92a85-30fc-5a12-9164-22ce6f6fa580","frontmatter":{"title":"ac_pool","path":"/ac-pool","posttype":"docs"},"headings":[{"value":"Dependencies"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/ac-pool/"}}}