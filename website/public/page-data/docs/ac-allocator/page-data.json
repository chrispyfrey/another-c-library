{"componentChunkName":"component---src-templates-md-page-js","path":"/docs/ac-allocator/","result":{"data":{"site":{"siteMetadata":{"title":"Another C Library"}},"markdownRemark":{"id":"065c3ab5-419a-554d-a220-4897a1a6534e","html":"<p>The allocator provides an alternative to malloc, calloc, realloc, strdup, and free.  The functions are prefixed with ac_ (as everything in this library is).  </p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_calloc</span><span class=\"token punctuation\">(</span>size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"dependencies\"><a href=\"#dependencies\" aria-label=\"dependencies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dependencies</h2>\n<p>Dependencies are the files necessary to include in your own package.  You can also just include the whole ac_ library.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ac_allocator.h\nac_allocator.c\nac_common.h</code></pre></div>\n<h2 id=\"documentation\"><a href=\"#documentation\" aria-label=\"documentation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Documentation</h2>\n<p>These functions work identically to the functions found in stdlib.h and string.h without the ac_ prefix.  </p>\n<p>void *ac<em>malloc(size</em>t length);<br/>\nAllocates length uninitialized bytes and returns it.  If length bytes is not available (the system is out of RAM or doesn't have enough to satisfy the request), NULL is returned.</p>\n<p>void *ac<em>calloc(size</em>t length);<br/>\nSimilar to ac_malloc, except returned bytes are all set to zero.</p>\n<p>void *ac<em>realloc(void *p, size</em>t length);<br/>\nAttempt to grow or shrink previously allocated memory to be equal to length bytes.  Typically, this will involve allocating a new block of memory and copying the contents of the previously allocated memory (up to length bytes).  It is possible that the block of memory will remain the same, but with a new size.</p>\n<p>char *ac_strdup(const char *p);<br/>\nReturns a newly allocated block of memory that has a copy of the string passed into it.</p>\n<p>void ac<em>free(void *p);<br/>\nFree memory allocated using ac</em>malloc, ac<em>calloc, ac</em>realloc, and ac_strdup.</p>\n<p>Additional documentation for <a href=\"https://linux.die.net/man/3/malloc\">malloc,calloc,realloc,free</a> and <a href=\"https://linux.die.net/man/3/strdup\">strdup</a> exists.  </p>\n<p>If memory is allocated using one of the ac_ methods above, it must later be freed using ac_free.  I did alter the prototype for calloc to accept a single parameter instead of 2.  I believe this makes application code more readable.   </p>\n<h2 id=\"detecting-memory-errors\"><a href=\"#detecting-memory-errors\" aria-label=\"detecting memory errors permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detecting Memory Errors</h2>\n<p>The ac_allocator is a lightweight allocator (in debug mode) and identical to the methods which is based upon when not in debug mode.  In debug mode, allocations are tracked which allows one to easily catch memory leaks and some common errors.</p>\n<p>Two macros control memory debugging.  If _AC<em>DEBUG</em>MEMORY_\nis undefined, the ac_ methods will work exactly like their C counterparts.  To enable memory debuging, _AC<em>DEBUG</em>MEMORY_ should be defined as NULL (-D<em>AC</em>DEBUG<em>MEMORY</em>=NULL) to write output to standard error or as a filename ('-D<em>AC</em>DEBUG<em>MEMORY</em>=\"memory.log\"') to write output to files.  If a filename is used, _AC<em>DEBUG</em>MEMORY<em>SPEED</em> can be defined to an interval and the filename will serve as a base name with snapshots taken periodically.  These parameters can be compiled in or set in ac_common.h.</p>\n<h2 id=\"detecting-memory-loss\"><a href=\"#detecting-memory-loss\" aria-label=\"detecting memory loss permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detecting Memory Loss</h2>\n<p>A common mistake that I've made is to forget to free memory that was previously allocated.  The ac_... allocation methods assist developers in making sure that allocations are cleaned up.</p>\n<p>demo1.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show how allocations are tracked\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ac_free(s);</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc demo1b.c ../src/ac_allocator.c -I../src -D_AC_DEBUG_MEMORY_=NULL -o demo1\n$ ./demo1\nDemo to show how allocations are tracked\n./demo1\n8 byte(s) allocated in 1 allocations (40 byte(s) overhead)\ndemo1.c:7: 8</code></pre></div>\n<p>The above example, allocates 8 bytes (demo1.c is 7 bytes + the \\0 terminator).  When demo1 exits, it shows how many allocations have not been freed and each filename:line along with the number of bytes allocated (and not freed).  Modifying demo1.c by uncommenting the ac_free call should eliminate the memory leak.</p>\n<p>demo1.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show how allocations are tracked\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc demo1.c ac_allocator.c -D_AC_DEBUG_MEMORY_=NULL -o demo1\n$ ./demo1\nDemo to show how allocations are tracked\n./demo1</code></pre></div>\n<p>With the memory leak fixed, nothing is printed to stderr.</p>\n<h2 id=\"double-free\"><a href=\"#double-free\" aria-label=\"double free permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Double Free</h2>\n<p>A common mistake I've made many times is to free memory twice resulting in a corrupt state and possibly crashing the program.  The ac_... allocation methods will detect freeing memory more than once.</p>\n<p>demo1b.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show double free\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// printf(\"%s\\n\", s);</span>\n  <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ./demo1b\nDemo to show how allocations are tracked\ndemo1b.c:10: 0 ac_free is invalid (double free?)\nAbort trap: 6</code></pre></div>\n<p>Line 10 of demo1b.c frees the memory a second time.</p>\n<h2 id=\"freeing-the-wrong-memory\"><a href=\"#freeing-the-wrong-memory\" aria-label=\"freeing the wrong memory permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Freeing the Wrong Memory</h2>\n<p>malloc, calloc, realloc, and strdup all return pointers.  Those pointers must be retained to be freed later.  If you alter the pointer (by adding or subtracting from it) and then call free with the altered pointer, your program will probably crash.  The ac_... functions will attempt to find the memory meant to be freed.</p>\n<p>demo1c.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show invalid free\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  s <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ./demo1c\nDemo to show invalid free\ndemo1c.c:7: 9 is closest allocation and is 2 bytes ahead of original allocation\ndemo1c.c:9: 0 ac_free is invalid (double free?)\nAbort trap: 6</code></pre></div>\n<p>The ac_free call is called with a pointer that is advanced 2 bytes beyond the original allocation at line 7 of demo1c.c.</p>\n<h2 id=\"tracking-memory-loss-over-time\"><a href=\"#tracking-memory-loss-over-time\" aria-label=\"tracking memory loss over time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tracking Memory Loss Over Time</h2>\n<p>We could alternatively define _AC<em>DEBUG</em>MEMORY_ as \"memory.log\" and set the refresh speed to 5 second with another example.</p>\n<p>demo1b.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show how allocations are tracked\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> tests <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> tests<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tests<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleaning up - intentionally leaving a small leak\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tests<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ac_free(a);</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc demo1b.c ../src/ac_allocator.c -I../src -o demo1b &#39;-D_AC_DEBUG_MEMORY_=&quot;memory.log&quot;&#39; -D_AC_DEBUG_MEMORY_SPEED_=5\n$ ./demo1b\nDemo to show how allocations are tracked\nCleaning up - intentionally leaving a small leak\n$ ls -lT memory.log*\n104 Dec 30 08:50:04 2019 memory.log\n642 Dec 30 08:49:54 2019 memory.log.1\n625 Dec 30 08:49:44 2019 memory.log.2\n591 Dec 30 08:49:24 2019 memory.log.3\n523 Dec 30 08:48:44 2019 memory.log.4\n386 Dec 30 08:45:06 2019 memory.log.5\n 25 Dec 30 08:42:25 2019 memory.log.6</code></pre></div>\n<p>Every 5 seconds a snapshot was taken.  Those snapshots were rotated with some of them being deleted.  This is generally meant to view the difference between what is happening now with some relatively recent event.  For example, you can see what the difference is between memory.log.1 and memory.log.2.  Note that there is a 10 second gap between them.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ diff memory.log.1 memory.log.2\n$ diff memory.log.1 memory.log.2\n1,2c1,2\n&lt; Mon Dec 30 08:49:54 2019\n&lt; 784 byte(s) allocated in 33 allocations (1320 byte(s) overhead)\n---\n&gt; Mon Dec 30 08:49:44 2019\n&gt; 752 byte(s) allocated in 32 allocations (1280 byte(s) overhead)\n35d34\n&lt; demo1b.c:13: 32</code></pre></div>\n<p>From above, it can be seen that memory.log.1 has one extra allocation for 32 bytes at line 13 of demo1b.c.</p>\n<p>When the program exits, it will write a final memory.log file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cat memory.log\nMon Dec 30 08:50:04 2019\n256 byte(s) allocated in 1 allocations (40 byte(s) overhead)\ndemo1b.c:11: 256</code></pre></div>\n<p>The array of pointers (256 bytes) is not freed at line 11 in demo1b.c.  Uncommenting ac_free(a); just before the return 0; would have fixed this.</p>\n<h2 id=\"advanced-usage\"><a href=\"#advanced-usage\" aria-label=\"advanced usage permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Advanced Usage</h2>\n<p>The ac_... objects have been implemented to allow tracking of the allocation of the objects themselves.  If this functionality didn't exist, the allocation errors would show up in the object instead of where the object was created.</p>\n<p>demo2.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_pool.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo to show how objects are tracked\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ac_pool_t <span class=\"token operator\">*</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">ac_pool_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">ac_pool_strdup</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// printf(\"%s\\n\", s);</span>\n  <span class=\"token comment\">// ac_pool_destroy(pool);</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make demo2\n$ ./demo2\nDemo to show how objects are tracked\n1024 byte(s) allocated in 1 allocations (40 byte(s) overhead)\ndemo2.c:7 [ac_pool] size: 8, max_size: 8, initial_size: 1024 used: 1112</code></pre></div>\n<p>Line 7 of demo2.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  ac_pool_t <span class=\"token operator\">*</span>pool <span class=\"token operator\">=</span> <span class=\"token function\">ac_pool_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is the ac<em>pool</em>init method which is expected to be destroyed at some later point via ac<em>pool</em>destroy.  If the object tracking didn't exist, the error would have reported something like..</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1024 byte(s) allocated in 1 allocations (40 byte(s) overhead)\npool.c:65: 1024</code></pre></div>\n<p>Hopefully, it is clear that the first error indicating line 7 of demo2.c is much more informative than the second.  This is explained in greater detail in <a href=\"../../docs/7-allocator/index.md\">The Global Allocator Object</a> or in the <a href=\"ac_pool/index.md\">ac_pool usage guide</a>.</p>","frontmatter":{"title":"ac_allocator","posttype":"docs"}},"allMarkdownRemark":{"edges":[{"node":{"id":"65ef6af8-db2b-5241-aabb-be94ecaa93a6","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"Line spacing in markdown"},{"value":"Escape characters in markdown"},{"value":"Create multiline macro in C"},{"value":"Static inline vs inline"},{"value":"Regex find replace"},{"value":"Atom-beautify problems"}]}},{"node":{"id":"ea93de22-255a-510a-a3d6-e5ca71719254","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"An important intuition to quicksort"}]}},{"node":{"id":"e92ffe3f-7ca9-5998-86d0-02a589e5a259","frontmatter":{"title":"1. Getting Started","path":"/1-getting-started","posttype":"ebook"},"headings":[{"value":"A quick word about licensing"},{"value":"Getting Started"}]}},{"node":{"id":"b16eb4e9-d84b-5be6-84f7-61ebe2bcc410","frontmatter":{"title":"10. Binary Search Trees","path":"/10-binary-search-trees","posttype":"ebook"},"headings":[{"value":"The basic structure"},{"value":"Find"},{"value":"Insert"},{"value":"First, Last, Next, Previous"},{"value":"Erase"},{"value":"Postorder iteration"},{"value":"Printing a binary tree"},{"value":"Finding Peers"},{"value":"Quick Recap"}]}},{"node":{"id":"baba82da-4489-5fd7-9915-ef011f56a666","frontmatter":{"title":"11. Balancing Binary Search Trees","path":"/11-balancing-binary-search-trees","posttype":"ebook"},"headings":[{"value":"Why balancing is important"},{"value":"Properties of a red-black tree"},{"value":"Coloring"},{"value":"Rotations"}]}},{"node":{"id":"f2d454de-1f32-50a9-91a3-f3ed53776f11","frontmatter":{"title":"12. The Red-Black Tree","path":"/12-red-black-tree","posttype":"ebook"},"headings":[{"value":"The properties of a red-black tree"},{"value":"Testing the red-black tree properties"},{"value":"Insert"},{"value":"Erase"},{"value":"Quick recap of when tree becomes invalid"},{"value":"fixcolorfor_erase"},{"value":"Packing color into the parent node"}]}},{"node":{"id":"0229f92a-6f18-52a2-9a98-c536b17b48fa","frontmatter":{"title":"13. The Map Object","path":"/13-map","posttype":"ebook"},"headings":[]}},{"node":{"id":"d40dca2d-317c-5be1-96bb-1a1ce5aa709b","frontmatter":{"title":"14. The Set and Multimap","path":"/14-set-and-multimap","posttype":"ebook"},"headings":[{"value":"The set"},{"value":"The multimap"}]}},{"node":{"id":"dda89e39-e139-5921-b61e-3428acc8db29","frontmatter":{"title":"2. Timing Your Code (First Project)","path":"/2-timing","posttype":"ebook"},"headings":[{"value":"A brief introduction to C"},{"value":"What happens during compilation"},{"value":"How to time code"},{"value":"Reversing a string"},{"value":"The basic Makefile"},{"value":"More accurately timing code"},{"value":"Compiler optimizations"},{"value":"Separating the implementation from the interface"},{"value":"Defining an object"},{"value":"The timer interface"},{"value":"Making the timer object reusable"},{"value":"Splitting up a project into multiple directories"},{"value":"Splitting up the Makefile"}]}},{"node":{"id":"9801a3af-8f22-5982-94c5-35f6112eb823","frontmatter":{"title":"3. The Buffer Object","path":"/3-buffer","posttype":"ebook"},"headings":[{"value":"How it compares to other languages"},{"value":"A bit of history and setup"},{"value":"The buffer interface"},{"value":"The implementation"}]}},{"node":{"id":"711af732-1367-5fd2-9136-ab310ae70a1c","frontmatter":{"title":"4. Linked Lists","path":"/4-linked-lists","posttype":"ebook"},"headings":[{"value":"A data structure interface"},{"value":"The data structure interface test driver"},{"value":"The singly linked list"},{"value":"The doubly linked list"}]}},{"node":{"id":"3f9e59fa-f5a7-5d87-95d8-40c4b5a27155","frontmatter":{"title":"5. Threads","path":"/5-threads","posttype":"ebook"},"headings":[{"value":"Introducing Threads"},{"value":"Creating threads"},{"value":"Threads and optimizing code"},{"value":"Avoid global variables when you can"},{"value":"Mutexes"},{"value":"Timing considerations"}]}},{"node":{"id":"14b23037-d39b-5c6a-8575-87c49f29e5bf","frontmatter":{"title":"6. Macros","path":"/6-macros","posttype":"ebook"},"headings":[]}},{"node":{"id":"1f7d377b-cb76-56c9-ab8e-65e6f347a63b","frontmatter":{"title":"7. The Global Allocator Object","path":"/7-allocator","posttype":"ebook"},"headings":[{"value":"A Quick Recap"}]}},{"node":{"id":"836c39a4-58c3-5e44-973e-2eaee112e590","frontmatter":{"title":"8. The Global Allocator Implementation","path":"/8-allocator-implementation","posttype":"ebook"},"headings":[{"value":"Keywords used"},{"value":"Symbols used"}]}},{"node":{"id":"c0fc3845-5a1d-5561-b1ce-e06b57e99af8","frontmatter":{"title":"9. The Pool Object","path":"/9-pool","posttype":"ebook"},"headings":[]}},{"node":{"id":"065c3ab5-419a-554d-a220-4897a1a6534e","frontmatter":{"title":"ac_allocator","path":"/ac-allocator","posttype":"docs"},"headings":[{"value":"Dependencies"},{"value":"Documentation"},{"value":"Detecting Memory Errors"},{"value":"Detecting Memory Loss"},{"value":"Double Free"},{"value":"Freeing the Wrong Memory"},{"value":"Tracking Memory Loss Over Time"},{"value":"Advanced Usage"}]}},{"node":{"id":"fab92a85-30fc-5a12-9164-22ce6f6fa580","frontmatter":{"title":"ac_pool","path":"/ac-pool","posttype":"docs"},"headings":[{"value":"Commonly used functions"},{"value":"More advanced functions or less used"},{"value":"Dependencies"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/docs/ac-allocator/"}}}