{"componentChunkName":"component---src-templates-md-page-js","path":"/ebook/13-map/","result":{"data":{"site":{"siteMetadata":{"title":"Another C Library"}},"markdownRemark":{"id":"0229f92a-6f18-52a2-9a98-c536b17b48fa","html":"<ul>\n<li>Turning the red black tree into a map</li>\n</ul>\n<p><em>This and the src/ac_map.h/c files were started on Monday 9/23/19 and are still a work in progress.</em></p>\n<p>The code for this section is found in <i>illustrations/13<em>map/1</em>map</i></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd $ac/illustrations/13_map/1_map</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make\ngcc -O3 -I../../../src -D_AC_DEBUG_MEMORY_=NULL ../../../src/ac_timer.c ../../../src/ac_allocator.c ../../../src/ac_buffer.c ../../../src/ac_pool.c ../../../src/ac_map.c test_data_structure.c -o test_data_structure\n./test_data_structure ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 10000\nCreating ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 using map\nP-1\n|  \\\n|   X-2\n|   |  \\\n|   |   (f-2)\n|   |   |    \\\n|   |   b-3   n-3\n|   |   |  \\  |  \\\n|   |   |   | |   (r-3)\n|   |   |   | |   |    \\\n|   |   |   | |   p-4   v-4\n|   |   |   | |   |  \\  |  \\\n|   |   |   | |   o-5 | |   (x-4)\n|   |   |   | |       | |   |    \\\n|   |   |   | (j-3)   | |   w-5   y-5\n|   |   |   | |    \\  | |            \\\n|   |   |   | h-4   | | (t-4)         (z-5)\n|   |   |   | |  \\  | | |    \\             \n|   |   |   | g-5 | | | s-5   u-5\n|   |   |   |     | | |          \n|   |   |   d-4   | | q-5\n|   |   |   |  \\  | |    \n|   |   |   c-5 | | l-4\n|   |   |       | | |  \\\n|   |   Z-4     | | k-5 m-5\n|   |   |  \\    | |        \n|   |   Y-5 a-5 | i-5\n|   |           |    \n|   T-3         e-5\n|   |  \\           \n|   |   V-4\n|   |   |  \\\n|   |   U-5 W-5\n|   |          \n|   R-4\n|   |  \\\n|   Q-5 S-5\n|          \nH-2\n|  \\\n|   L-3\n|   |  \\\n|   |   N-4\n|   |   |  \\\n|   |   M-5 O-5\n|   |          \n|   J-4\n|   |  \\\n|   I-5 K-5\n|          \nD-3\n|  \\\n|   F-4\n|   |  \\\n|   E-5 G-5\n|          \n(3-3)\n|    \\\n1-4   7-4\n|  \\  |  \\\n0-5 | |   (B-4)\n    | |   |    \\\n    | |   9-5   C-5\n    | |   |  \\     \n    | |   |   (A-5)\n    | |   |        \n    | |   (8-5)\n    | |        \n    | (5-4)\n    | |    \\\n    | 4-5   6-5\n    |          \n    2-5</code></pre></div>\n<p>The third parameter to test<em>data</em>structure is 10000, which means to build the tree 10,000 times, randomly, inserting and deleting the values in the second argument.</p>\n<p>A good first step in designing any object is to understand the requirements.</p>\n<ol>\n<li>find, insert, update, remove</li>\n<li>find less than (or equal if equal exists)</li>\n<li>find greater (or equal if equal exists)</li>\n<li>iteration from nodes</li>\n<li>a copy function</li>\n<li>a print function</li>\n<li>any data type should be supported</li>\n<li>multiple data structures should be able to be embedded to the same node</li>\n<li>once a node is inserted, its memory location should not change</li>\n</ol>\n<p>The code for the interface follows</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\nCopyright 2019 Andy Curtis\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _ac_map_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _ac_map_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_pool.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_buffer.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token punctuation\">{</span>\n  size_t parent_color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ac_map_node_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* iteration */</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_first</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_last</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_next</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_previous</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_postorder_first</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_postorder_next</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  ac_map_copy_node_f is a callback meant to be used with ac_map_copy to\n  copy one map to another given a root node.  The tag will typically be an\n  allocator such as the pool.\n*/</span>\n<span class=\"token keyword\">typedef</span> ac_map_node_t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ac_map_copy_node_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_copy</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> ac_map_copy_node_f copy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  print_node_to_string_f is a callback meant to print the value of the node n.\n  There is an expectation that the value will be printed on a single line.\n  Printing the internal representation of the tree is largely meant for testing\n  and doesn't need to be complete.\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_node_to_string_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">ac_map_valid_to_buffer</span><span class=\"token punctuation\">(</span>ac_buffer_t <span class=\"token operator\">*</span>bh<span class=\"token punctuation\">,</span> ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span>\n                              ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> print_node_to_string_f print_node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">ac_map_valid</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span>\n                    ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                    print_node_to_string_f print_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_MAP_DONT_PRINT_RED 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_MAP_DONT_PRINT_BLACK_HEIGHT 2</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_map_print_to_buffer</span><span class=\"token punctuation\">(</span>ac_buffer_t <span class=\"token operator\">*</span>bh<span class=\"token punctuation\">,</span>\n                              ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>\n                              print_node_to_string_f print_node<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_map_print</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>\n                    print_node_to_string_f print_node<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">int</span> flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">ac_map_erase</span><span class=\"token punctuation\">(</span>ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_map_fix_insert</span><span class=\"token punctuation\">(</span>ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>\n                         ac_map_node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span>\n                         ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* find and insert macros */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>The code in ac<em>map.c is largely not new.  The functions have been prefixed with ac</em>map<em>.  The node</em>t structure has been renamed to ac<em>map</em>node<em>t.  The internal knowledge of the value type (char key) has been eliminated from the code.  Finally, the ac</em>map<em>node</em>t structure is exposed in the header file.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token punctuation\">{</span>\n  size_t parent_color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_map_node_s</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ac_map_node_t<span class=\"token punctuation\">;</span></code></pre></div>\n<p>is similar to the node_t structure before, except it doesn't have <em>char key</em>.</p>\n<p>To use the ac<em>map, this structure will be added to the custom structure.  test</em>data<em>structure.c defines the node</em>t structure as it was defined before (with a char key).  Most of the time, you will be able to make the <em>ac<em>map</em>node_t map</em> be the first member of your structure.  This makes it easy to cast between your structure and the ac<em>map</em>node_t structure since they both have the same memory address.  Having the map not be the first member will be explored later (including having multiple map members in a single structure).</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  ac_map_node_t map<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> node_t<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The iteration methods still exist (first, last, next, previous).  They have just been renamed.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_first</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_last</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_next</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_previous</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If your structure is called node_t, you can call these functions as</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print_using_iteration</span><span class=\"token punctuation\">(</span>ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_map_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-></span>key <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_map_next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print_using_iteration</span><span class=\"token punctuation\">(</span>ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">ac_map_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>key <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">ac_map_next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both approaches are equivalent, assuming that the map is the first member of the node_t structure.</p>\n<p>The node<em>first</em>to<em>erase and node</em>next<em>to</em>erase have been renamed.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_postorder_first</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_postorder_next</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ac<em>map</em>copy<em>node</em>f is a callback meant to be used with ac<em>map</em>copy to copy one map to another given a root node.  The tag will typically be an allocator, such as the pool.  ac<em>map</em>copy will make a complete copy of a map (or red-black tree) and return a pointer to it.  I like to suffix function typedefs with a <em>_f</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> ac_map_node_t <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ac_map_copy_node_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>tag <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">ac_map_copy</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> ac_map_copy_node_f copy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ac<em>map</em>copy could be used in the following way...</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_map_node_t <span class=\"token operator\">*</span> <span class=\"token function\">copy_node</span><span class=\"token punctuation\">(</span> ac_map_node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>tag <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ac_pool_t <span class=\"token operator\">*</span>pool <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>tag<span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_pool_alloc</span><span class=\"token punctuation\">(</span>pool<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nac_map_node_t <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token comment\">/* a valid map with zero or more entries */</span><span class=\"token punctuation\">;</span>\nac_map_node_t <span class=\"token operator\">*</span>copy_of_root <span class=\"token operator\">=</span> <span class=\"token function\">ac_map_copy</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> copy_node<span class=\"token punctuation\">,</span> pool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>print<em>node</em>to<em>string</em>f is a callback meant to print the value of the node n.  There is an expectation that the value will be printed on a single line.  Printing the internal representation of the tree is used for testing and printing the tree and doesn't need to be complete.  It generally doesn't have practical use within applications.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>print_node_to_string_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For debugging, it is often nice to be able just to print something to the terminal.  Sometimes, it is also nice to print to a buffer and then have the output directed to some other location.  I provide both mechanisms below.  The first prints errors in the map (red-black violations) to a buffer and returns false if there are any errors.  The second function is like the first, except it outputs directly to the screen.  Both of these functions require the root of the tree and a pointer to a print<em>node</em>to<em>string</em>f function.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">ac_map_valid_to_buffer</span><span class=\"token punctuation\">(</span>ac_buffer_t <span class=\"token operator\">*</span>bh<span class=\"token punctuation\">,</span> ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span>\n                              ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span> print_node_to_string_f print_node <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">ac_map_valid</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span>\n                    ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                    print_node_to_string_f print_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ac<em>map</em>valid checks if the map is valid.  ac<em>map</em>print dumps the contents of a map in a tree-like manner.  It takes additional parameter flags, which would typically be zero unless you with to not print red nodes in the color red and/or you don't want the black height of a node suffixed in the print.  The flags are bit-oriented and can be or'ed together.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_MAP_DONT_PRINT_RED 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_MAP_DONT_PRINT_BLACK_HEIGHT 2</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_map_print_to_buffer</span><span class=\"token punctuation\">(</span>ac_buffer_t <span class=\"token operator\">*</span>bh<span class=\"token punctuation\">,</span>\n                              ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>\n                              print_node_to_string_f print_node<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_map_print</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span>\n                    print_node_to_string_f print_node<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">int</span> flags <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ac<em>map</em>erase unlinks node from the given map.  The node is expected to be a valid node within the tree (typically found via a find method).  ac<em>map</em>erase does not destroy the node (it simply unlinks it from the map).</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">ac_map_erase</span><span class=\"token punctuation\">(</span>ac_map_node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The find and insert methods were left to the end for a reason.  These are the only two groups of functions that need to understand the value of a node.  These functions end up being custom.  To aid in writing these functions, I've created the following macros.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">ac_map_find_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_or_next_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_or_next2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_or_next_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_least_or_next2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_greatest_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_greatest2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_greatest_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_find_greatest2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> keytype<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> keytype <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">const</span> ac_map_node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nThe insert macros are listed below <span class=\"token punctuation\">(</span>they are defined in impl<span class=\"token operator\">/</span>ac_map<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">ac_map_insert_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_insert2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_insert_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                          ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_map_insert2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                          ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_multimap_insert_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_multimap_insert2_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_multimap_insert_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                          ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">ac_multimap_insert2_arg_m</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> datatype<span class=\"token punctuation\">,</span> mapname<span class=\"token punctuation\">,</span> compare<span class=\"token punctuation\">)</span>\n  expects<span class=\"token operator\">:</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> datatype <span class=\"token operator\">*</span>value<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  returns<span class=\"token operator\">:</span> datatype <span class=\"token operator\">*</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span>datatype <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span>\n                          ac_map_node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"../../../README.md\">Table of Contents (only if viewing on Github)</a></p>","frontmatter":{"title":"13. The Map Object","posttype":"ebook"}},"allMarkdownRemark":{"edges":[{"node":{"id":"65ef6af8-db2b-5241-aabb-be94ecaa93a6","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"Line spacing in markdown"},{"value":"Escape characters in markdown"},{"value":"Create multiline macro in C"},{"value":"Static inline vs inline"},{"value":"Regex find replace"},{"value":"Atom-beautify problems"}]}},{"node":{"id":"ea93de22-255a-510a-a3d6-e5ca71719254","frontmatter":{"title":"","path":null,"posttype":null},"headings":[{"value":"An important intuition to quicksort"}]}},{"node":{"id":"e92ffe3f-7ca9-5998-86d0-02a589e5a259","frontmatter":{"title":"1. Getting Started","path":"/1-getting-started","posttype":"ebook"},"headings":[{"value":"A quick word about licensing"},{"value":"Getting Started"}]}},{"node":{"id":"b16eb4e9-d84b-5be6-84f7-61ebe2bcc410","frontmatter":{"title":"10. Binary Search Trees","path":"/10-binary-search-trees","posttype":"ebook"},"headings":[{"value":"The basic structure"},{"value":"Find"},{"value":"Insert"},{"value":"First, Last, Next, Previous"},{"value":"Erase"},{"value":"Postorder iteration"},{"value":"Printing a binary tree"},{"value":"Finding Peers"},{"value":"Quick Recap"}]}},{"node":{"id":"baba82da-4489-5fd7-9915-ef011f56a666","frontmatter":{"title":"11. Balancing Binary Search Trees","path":"/11-balancing-binary-search-trees","posttype":"ebook"},"headings":[{"value":"Why balancing is important"},{"value":"Properties of a red-black tree"},{"value":"Coloring"},{"value":"Rotations"}]}},{"node":{"id":"f2d454de-1f32-50a9-91a3-f3ed53776f11","frontmatter":{"title":"12. The Red-Black Tree","path":"/12-red-black-tree","posttype":"ebook"},"headings":[{"value":"The properties of a red-black tree"},{"value":"Testing the red-black tree properties"},{"value":"Insert"},{"value":"Erase"},{"value":"Quick recap of when tree becomes invalid"},{"value":"fixcolorfor_erase"},{"value":"Packing color into the parent node"}]}},{"node":{"id":"0229f92a-6f18-52a2-9a98-c536b17b48fa","frontmatter":{"title":"13. The Map Object","path":"/13-map","posttype":"ebook"},"headings":[]}},{"node":{"id":"d40dca2d-317c-5be1-96bb-1a1ce5aa709b","frontmatter":{"title":"14. The Set and Multimap","path":"/14-set-and-multimap","posttype":"ebook"},"headings":[{"value":"The set"},{"value":"The multimap"}]}},{"node":{"id":"dda89e39-e139-5921-b61e-3428acc8db29","frontmatter":{"title":"2. Timing Your Code (First Project)","path":"/2-timing","posttype":"ebook"},"headings":[{"value":"A brief introduction to C"},{"value":"What happens during compilation"},{"value":"How to time code"},{"value":"Reversing a string"},{"value":"The basic Makefile"},{"value":"More accurately timing code"},{"value":"Compiler optimizations"},{"value":"Separating the implementation from the interface"},{"value":"Defining an object"},{"value":"The timer interface"},{"value":"Making the timer object reusable"},{"value":"Splitting up a project into multiple directories"},{"value":"Splitting up the Makefile"}]}},{"node":{"id":"9801a3af-8f22-5982-94c5-35f6112eb823","frontmatter":{"title":"3. The Buffer Object","path":"/3-buffer","posttype":"ebook"},"headings":[{"value":"How it compares to other languages"},{"value":"A bit of history and setup"},{"value":"The buffer interface"},{"value":"The implementation"}]}},{"node":{"id":"711af732-1367-5fd2-9136-ab310ae70a1c","frontmatter":{"title":"4. Linked Lists","path":"/4-linked-lists","posttype":"ebook"},"headings":[{"value":"A data structure interface"},{"value":"The data structure interface test driver"},{"value":"The singly linked list"},{"value":"The doubly linked list"}]}},{"node":{"id":"3f9e59fa-f5a7-5d87-95d8-40c4b5a27155","frontmatter":{"title":"5. Threads","path":"/5-threads","posttype":"ebook"},"headings":[{"value":"Introducing Threads"},{"value":"Creating threads"},{"value":"Threads and optimizing code"},{"value":"Avoid global variables when you can"},{"value":"Mutexes"},{"value":"Timing considerations"}]}},{"node":{"id":"14b23037-d39b-5c6a-8575-87c49f29e5bf","frontmatter":{"title":"6. Macros","path":"/6-macros","posttype":"ebook"},"headings":[]}},{"node":{"id":"1f7d377b-cb76-56c9-ab8e-65e6f347a63b","frontmatter":{"title":"7. The Global Allocator Object","path":"/7-allocator","posttype":"ebook"},"headings":[{"value":"A Quick Recap"}]}},{"node":{"id":"836c39a4-58c3-5e44-973e-2eaee112e590","frontmatter":{"title":"8. The Global Allocator Implementation","path":"/8-allocator-implementation","posttype":"ebook"},"headings":[{"value":"Keywords used"},{"value":"Symbols used"}]}},{"node":{"id":"c0fc3845-5a1d-5561-b1ce-e06b57e99af8","frontmatter":{"title":"9. The Pool Object","path":"/9-pool","posttype":"ebook"},"headings":[]}},{"node":{"id":"065c3ab5-419a-554d-a220-4897a1a6534e","frontmatter":{"title":"ac_allocator","path":"/ac-allocator","posttype":"docs"},"headings":[{"value":"Dependencies"},{"value":"Documentation"},{"value":"Detecting Memory Errors"},{"value":"Detecting Memory Loss"},{"value":"Double Free"},{"value":"Freeing the Wrong Memory"},{"value":"Tracking Memory Loss Over Time"},{"value":"Advanced Usage"}]}},{"node":{"id":"fab92a85-30fc-5a12-9164-22ce6f6fa580","frontmatter":{"title":"ac_pool","path":"/ac-pool","posttype":"docs"},"headings":[{"value":"Commonly used functions"},{"value":"More advanced functions or less used"},{"value":"Dependencies"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ebook/13-map/"}}}