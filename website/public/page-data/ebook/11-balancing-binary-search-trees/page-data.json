{"componentChunkName":"component---src-templates-ebook-page-js","path":"/ebook/11-balancing-binary-search-trees/","webpackCompilationHash":"7639df7eab6f7d5da7a4","result":{"data":{"site":{"siteMetadata":{"title":"Another C Library"}},"markdownRemark":{"id":"dceada54-0055-5815-9e8c-c4690446e7b3","html":"<p>Copyright 2019 Andy Curtis &#x26; Daniel Curtis</p>\n<h1 id=\"balancing-binary-search-trees\"><a href=\"#balancing-binary-search-trees\" aria-label=\"balancing binary search trees permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Balancing Binary Search Trees</h1>\n<p>This builds significantly on the last section about <a href=\"10_binary_search_trees.md\">binary search trees</a>.  To start, let's explore why balancing a binary search tree is important.</p>\n<p>The following code is found in <i>illustrations/11<em>balancing</em>binary<em>search</em>trees/1<em>binary</em>search_tree</i></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/11_balancing_binary_search_trees/1_binary_search_tree</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span></code></pre></div>\n<p>In this case, I've not included examples in the Makefile.  I've also commented out printing the data structure using iteration and reverse iteration as it isn't relevant to understanding how the red-black tree works.</p>\n<h2 id=\"why-balancing-is-important\"><a href=\"#why-balancing-is-important\" aria-label=\"why balancing is important permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why balancing is important</h2>\n<p>To understand why balancing a binary search tree is important, let's look at some worst-case and bad scenarios.</p>\n<p>One worst case scenario</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test_data_structure ABCDEFGHI\nCreating binary_search_tree <span class=\"token keyword\">for</span> ABCDEFGHI\nA1\n  <span class=\"token punctuation\">\\</span>\n   B2\n     <span class=\"token punctuation\">\\</span>\n      C3\n        <span class=\"token punctuation\">\\</span>\n         D4\n           <span class=\"token punctuation\">\\</span>\n            E5\n              <span class=\"token punctuation\">\\</span>\n               F6\n                 <span class=\"token punctuation\">\\</span>\n                  G7\n                    <span class=\"token punctuation\">\\</span>\n                     H8\n                       <span class=\"token punctuation\">\\</span>\n                        I9</code></pre></div>\n<p>Another worst-case scenario</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test_data_structure IHGFEDCBA\nCreating binary_search_tree <span class=\"token keyword\">for</span> IHGFEDCBA\nI1\n<span class=\"token operator\">|</span>\nH2\n<span class=\"token operator\">|</span>\nG3\n<span class=\"token operator\">|</span>\nF4\n<span class=\"token operator\">|</span>\nE5\n<span class=\"token operator\">|</span>\nD6\n<span class=\"token operator\">|</span>\nC7\n<span class=\"token operator\">|</span>\nB8\n<span class=\"token operator\">|</span>\nA9</code></pre></div>\n<p>A mixed case where the tree isn't balanced</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test_data_structure IHGFEDCBAabcdef\nCreating binary_search_tree <span class=\"token keyword\">for</span> IHGFEDCBAabcdef\nI1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nH2 a2\n<span class=\"token operator\">|</span>    <span class=\"token punctuation\">\\</span>\nG3    b3\n<span class=\"token operator\">|</span>       <span class=\"token punctuation\">\\</span>\nF4       c4\n<span class=\"token operator\">|</span>          <span class=\"token punctuation\">\\</span>\nE5          d5\n<span class=\"token operator\">|</span>             <span class=\"token punctuation\">\\</span>\nD6             e6\n<span class=\"token operator\">|</span>                <span class=\"token punctuation\">\\</span>\nC7                f7\n<span class=\"token operator\">|</span>                   \nB8\n<span class=\"token operator\">|</span>\nA9</code></pre></div>\n<p>Yet another worst-case scenario.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test_data_structure Izpagkml\nCreating binary_search_tree <span class=\"token keyword\">for</span> Izpagkml\nI1\n  <span class=\"token punctuation\">\\</span>\n   z2\n   <span class=\"token operator\">|</span>\n   p3\n   <span class=\"token operator\">|</span>\n   a4\n     <span class=\"token punctuation\">\\</span>\n      g5\n        <span class=\"token punctuation\">\\</span>\n         k6\n           <span class=\"token punctuation\">\\</span>\n            m7\n            <span class=\"token operator\">|</span>\n            l8</code></pre></div>\n<p>The example above could be said to be balanced if it looked like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">k1\n| \\\n|  p2\n|  | \\\n|  m3 z3\n|  |    \n|  l4\n|    \na2\n| \\\nI3 g3</code></pre></div>\n<p>The leaf nodes are the nodes that don't have children.  In the example above, all of the leaves have a depth of 3, except l, which has a depth of 4.  At the first level of a binary search tree, a fully balanced tree can have at most 1 node (the root node).  At the second level, 2 nodes (+1 for the first level).  At the third level, 4 nodes (+3 for the first and second), and so on.  The example above has 8 nodes, and the entire first, second, and third levels are full.  This tree is balanced.</p>\n<p>A balanced binary search tree is useful in that you are guaranteed that finding a node will take O(logN) time where N is the number of elements in the tree.  A binary search tree that isn't balanced has a worst case of O(N) time.  This isn't a big deal if you have 5-10 nodes, but if you have 1 million nodes, a balanced binary search tree will take at most 21 operations.  If the tree is not balanced, it might take 1 million operations!  You will often see logN used in describing how long an algorithm takes.  The base of log, in this case, is 2 (since computers think in terms of 0s and 1s or powers of 2).</p>\n<p>The red-black tree is a mostly balanced binary search tree that was invented by Leonidas J. Guibas and Robert Sedgewick.  Certain properties make a red-black tree valid.  </p>\n<h2 id=\"properties-of-a-red-black-tree\"><a href=\"#properties-of-a-red-black-tree\" aria-label=\"properties of a red black tree permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Properties of a red-black tree</h2>\n<p>Red–black tree Properties (<a href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">https://en.wikipedia.org/wiki/Red–black_tree</a>)</p>\n<ol>\n<li>Each node is either red or black.</li>\n<li>The root is black.</li>\n<li>All leaves (NIL) are black.</li>\n<li>If a node is red, then both its children are black.</li>\n<li>Every path from a given node to any of its descendant NIL nodes contains the same number of black nodes.</li>\n</ol>\n<p>My additional rules for clarification which are based upon the first 5 rules.</p>\n<ul>\n<li>If a node has one child, the child must be red</li>\n<li>If a node has two children, one or both of the children can be red if the parent is black</li>\n<li>If a node is red, it must have either two children who are black or no children at all.</li>\n<li>The parent of a red node must be black</li>\n<li>The black height of any leaf node must be the same (another way of stating 5)</li>\n<li>A red-black tree often will have many more black nodes than red nodes.  This is okay and expected.  The red node is an indication that the tree may be somehow out of balance.  It is possible to have more red nodes than black nodes, but it isn't typical.</li>\n<li>A red-black tree has a worst case of a 2logN depth but is likely to maintain a logN depth or be very close to it.</li>\n</ul>\n<p>The red-black tree uses coloring and tree rotations to balance the binary search tree.  </p>\n<h2 id=\"coloring\"><a href=\"#coloring\" aria-label=\"coloring permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coloring</h2>\n<p>In a red-black tree, the red and black colors are introduced.  Typically, this is represented as a single bit with 0 meaning black and 1, meaning red.  </p>\n<p>To color a node red, set the color to RED (RED is defined as 1).</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">color_node_red</span><span class=\"token punctuation\">(</span> node_t <span class=\"token operator\">*</span>node <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Likewise, to color a node black, set the color to BLACK (BLACK is defined as 0).</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">color_node_black</span><span class=\"token punctuation\">(</span> node_t <span class=\"token operator\">*</span>node <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Recoloring a node involves painting a node RED and its children (which both must exist) BLACK.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">recolor</span><span class=\"token punctuation\">(</span> node_t <span class=\"token operator\">*</span>n <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  n<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"rotations\"><a href=\"#rotations\" aria-label=\"rotations permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rotations</h2>\n<p>Rotations are used to balance binary search trees when using the red-black tree algorithm.  The following examples will not include colors and are just made up.  A right rotation around R</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">G\n<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\nE R\n  <span class=\"token operator\">|</span>\n  N</code></pre></div>\n<p>would result in</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">G\n<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\nE N\n   <span class=\"token punctuation\">\\</span>\n    R</code></pre></div>\n<p>A left rotation around G would result in</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">N\n<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\nG R\n<span class=\"token operator\">|</span>\nE</code></pre></div>\n<p>A right rotation around G would result in</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">N\n<span class=\"token operator\">|</span><span class=\"token punctuation\">\\</span>\nE R\n <span class=\"token punctuation\">\\</span>\n  G</code></pre></div>\n<p>In all cases, after a rotation, the tree is still a valid binary search tree.  To do a right rotation around a node, that node must reference a left node.  The left node and itself will exchange colors.  When doing a left rotation around a node, that node must reference a right node.  The right node and itself will exchange colors.</p>\n<p>rotate_left does the following.</p>\n<ul>\n<li>assign new_root to A->right.</li>\n<li>swap the color between A and new_root.</li>\n<li>if A has a parent, link the parent to new<em>root; otherwise, link root to new</em>root.</li>\n<li>put A to the left of new<em>root and what was previously to the right of new</em>root to the left of A.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>new_root <span class=\"token operator\">=</span> A<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n  size_t tmp_color <span class=\"token operator\">=</span> A<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span>\n  A<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> new_root<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span>\n  new_root<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> tmp_color<span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> A<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> A<span class=\"token punctuation\">)</span>\n      parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> new_root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> new_root<span class=\"token punctuation\">;</span>\n    new_root<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    new_root<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> new_root<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  node_t <span class=\"token operator\">*</span>tmp <span class=\"token operator\">=</span> new_root<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n  new_root<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n  A<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> new_root<span class=\"token punctuation\">;</span>\n\n  A<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span>\n    tmp<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rotating to the right is similar to rotating to the left (except you need to swap left and right).</p>\n<p>I've written a tool to help you to understand how colors and rotations work.</p>\n<p>The following code is found in <i>illustrations/11<em>balancing</em>binary<em>search</em>trees/2<em>tree</em>operations</i></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/11_balancing_binary_search_trees/2_tree_operations</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./tree_operations</code></pre></div>\n<p>You will be prompted with the following...</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit</code></pre></div>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">i a</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>a0<span class=\"token punctuation\">)</span>\n\nThe root is not black<span class=\"token operator\">!</span>\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit</code></pre></div>\n<p>If the node is in parenthesis, it is red.  On your terminal, it should print in the red color, as well.  Whenever you insert a node, it is painted red.  You can use the tool to try and turn this into a proper red-black tree.  In the red-black tree, the root is always black.  We can paint a black by typing the following.</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b a</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">a1\n\nStarting with a valid red black tree\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n\nOperation: insert a\n<span class=\"token punctuation\">(</span>a0<span class=\"token punctuation\">)</span>\n\nThe root is not black<span class=\"token operator\">!</span>\n\nOperation: black a\na1\n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>The first operation was <strong>insert a</strong> broke the red-black tree rules.  It was fixed by painting the root node black.</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">i b</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a1\n  \\\n   (b1)\n\nStarting with a valid red black tree\n====================================\na1\n\n\nOperation: insert b\na1\n  \\\n   (b1)\n\n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>In this case, nothing needed to be done because b's parent was black.</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">i c</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">a1\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">\\</span>\n        <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> has a red parent and is red</code></pre></div>\n<p>In this case, c's parent b is red.  If we rotate around a to the left, it should fix it.</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">l a</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">b1\n| \\\n|  (c1)\n|      \n(a1)\n\nStarting with a valid red black tree\n====================================\na1\n  \\\n   (b1)\n\n\nOperation: insert c\na1\n  \\\n   (b1)\n       \\\n        (c1)\n\n(b1) has a red right child and is red\n(c1) has a red parent and is red\n\nOperation: left_rotate a\nb1\n| \\\n|  (c1)\n|      \n(a1)\n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">i d</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span> has a red parent and is red</code></pre></div>\n<p>Since the parent (c) and the uncle (a) are both red, we can try recoloring around the grandparent (b).</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">c b</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>b0<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\na1   c1\n       <span class=\"token punctuation\">\\</span>\n        <span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span>\n\nThe root is not black<span class=\"token operator\">!</span></code></pre></div>\n<p>If the tree is balanced, we can always just paint the root node black.</p>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b b</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 c2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span>\n\nStarting with a valid red black tree\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n\nOperation: insert d\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span> has a red parent and is red\n\nOperation: color b\n<span class=\"token punctuation\">(</span>b0<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\na1   c1\n       <span class=\"token punctuation\">\\</span>\n        <span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span>\n\nThe root is not black<span class=\"token operator\">!</span>\n\nOperation: black b\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 c2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span>      \n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>type</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">i e</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 c2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">\\</span>\n           <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span> has a red parent and is red</code></pre></div>\n<p>This can be resolved through a left rotation.\ntype</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">l c</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 d2\n   <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>      \n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nStarting with a valid red black tree\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 c2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span>\n\n\nOperation: insert e\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 c2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">\\</span>\n           <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>d2<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span> has a red parent and is red\n\nOperation: left_rotate c\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 d2\n   <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>      \n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>The tool will also allow you to erase nodes.  Let's erase a to start.\ntype</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">e a</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b1\n  <span class=\"token punctuation\">\\</span>\n   d2\n   <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>      \n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nb1 has one right child, and it isn't red</code></pre></div>\n<p>We can try a left rotation around b</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">l b</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">d1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \nb2\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span> has a different black height than <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we color e black, the tree will be a proper red-black tree.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">b e</code></pre></div>\n<p>outputs</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">d1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  e2\n<span class=\"token operator\">|</span>    \nb2\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nStarting with a valid red black tree\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nb1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\na2 d2\n   <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>      \n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nOperation: erase a\nb1\n  <span class=\"token punctuation\">\\</span>\n   d2\n   <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n   <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>      \n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nb1 has one right child, and it isn't red\n\nOperation: left_rotate b\nd1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \nb2\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>e1<span class=\"token punctuation\">)</span> has a different black height than <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nOperation: black e\nd1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  e2\n<span class=\"token operator\">|</span>    \nb2\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red-black tree</code></pre></div>\n<p>I'll reference this tool in the explanation of the red-black tree that comes next.  Hopefully, the red-black tree will make more sense as we've already seen how much of it works.</p>\n<p>The tool (tree_operations) can also start with a valid red-black tree, which you can modify by specifying a sequence of characters in the order in which you wish the characters to be inserted.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./tree_operations ABC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./tree_operations ABCD\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nA2 C2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./tree_operations BADC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nA2 D2\n   <span class=\"token operator\">|</span>\n   <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./tree_operations ABCDEFGHIJKLMNOPQRSTUVWXYZ\nH1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  P2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  R3   V3\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  Q4 <span class=\"token operator\">|</span> U4 <span class=\"token punctuation\">(</span>X3<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>    <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>     S4   W4   Y4\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>                 <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span>               <span class=\"token punctuation\">(</span>Z4<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>                  \n<span class=\"token operator\">|</span>  J3   N3\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  I4 <span class=\"token operator\">|</span> M4 O4\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>      \nD2    K4\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>     \n<span class=\"token operator\">|</span>  F3\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E4 G4\n<span class=\"token operator\">|</span>       \nB3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nA4 C4</code></pre></div>\n<p>Once the tool is loaded, you can insert or erase nodes and try and figure out how to make it work as a red-black tree again.</p>\n<h1 id=\"the-red-black-tree\"><a href=\"#the-red-black-tree\" aria-label=\"the red black tree permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"12_red_black_tree.md\">The Red Black Tree</a></h1>\n<p><a href=\"../README.md\">Table of Contents</a>  - Copyright 2019 Andy Curtis</p>","frontmatter":{"title":"11. Balancing Binary Search Trees","posttype":"ebook"}},"allMarkdownRemark":{"edges":[{"node":{"id":"5eb893ad-02cc-5749-b609-78f60bee9281","frontmatter":{"title":"1. Getting Started","path":"/1-getting-started"},"headings":[{"value":"A quick word about licensing"},{"value":"Getting Started"},{"value":"Timing Your Code (the first project)"}]}},{"node":{"id":"7084dd2c-2755-5268-918d-c3af4aea7e6d","frontmatter":{"title":"10. Binary Search Trees","path":"/10-binary-search-trees"},"headings":[{"value":"Binary Search Trees"},{"value":"Find"},{"value":"Insert"},{"value":"Balancing Binary Search Trees"}]}},{"node":{"id":"dceada54-0055-5815-9e8c-c4690446e7b3","frontmatter":{"title":"11. Balancing Binary Search Trees","path":"/11-balancing-binary-search-trees"},"headings":[{"value":"Balancing Binary Search Trees"},{"value":"The Red Black Tree"}]}},{"node":{"id":"4b274f94-d5cf-5356-9366-de54119f24ae","frontmatter":{"title":"12. The Red-Black Tree","path":"/12-red-black-tree"},"headings":[{"value":"The Red-Black Tree"}]}},{"node":{"id":"2fa9f726-8017-5017-a937-568efa05c69b","frontmatter":{"title":"13. The Map Object","path":"/13-map"},"headings":[{"value":"The Map Object"}]}},{"node":{"id":"89d27820-7837-5316-9a1c-8bd3e7485e3f","frontmatter":{"title":"14. The Set and Multimap","path":"/14-set-and-multimap"},"headings":[{"value":"The set and multimap"}]}},{"node":{"id":"d4776902-9b84-51f5-98db-836c22386aa5","frontmatter":{"title":"2. Timing Your Code","path":"/2-timing"},"headings":[{"value":"Timing Your Code (the first project)"},{"value":"Splitting up code into multiple files"},{"value":"include <stdlib.h> is added at the top of the file since it is needed for malloc.  All of the members are initialized to zero except repeat (which is set to the value passed into timer_init)."},{"value":"The Buffer Object"}]}},{"node":{"id":"334411a5-0313-5831-9193-0737c8e4122b","frontmatter":{"title":"3. The Buffer Object","path":"/3-buffer"},"headings":[{"value":"The Buffer Object"},{"value":"Linked Lists"}]}},{"node":{"id":"bafe1fd6-714d-58ac-8ab0-2f455f518e19","frontmatter":{"title":"4. Linked Lists","path":"/4-linked-lists"},"headings":[{"value":"Linked Lists"},{"value":"Threads"}]}},{"node":{"id":"1fbe840f-47a7-51f9-a94b-431a4b44f35c","frontmatter":{"title":"5. Introducing Threads","path":"/5-threads"},"headings":[{"value":"Macros"}]}},{"node":{"id":"09515fb4-be52-520c-b963-ef137ff19fc7","frontmatter":{"title":"6. Macros","path":"/6-macros"},"headings":[{"value":"Macros"},{"value":"The Global Allocator Object"}]}},{"node":{"id":"4a0dc1d8-476c-5792-a22b-44ab620ff631","frontmatter":{"title":"7. The Global Allocator Object","path":"/7-allocator"},"headings":[{"value":"The Global Allocator Object"},{"value":"A Quick Recap"},{"value":"Continue to build out the allocator implementation!"}]}},{"node":{"id":"b6765db4-1bbd-507d-bdf9-b245802b8d27","frontmatter":{"title":"8. The Global Allocator Implementation","path":"/8-allocator-implementation"},"headings":[{"value":"The Global Allocator Implementation"},{"value":"To Be Continued"},{"value":"The Pool Object"}]}},{"node":{"id":"793706d2-d368-5c56-90cb-12da63c2b7b1","frontmatter":{"title":"9. The Pool Object","path":"/9-pool"},"headings":[{"value":"The Pool Object"},{"value":"The Simplest Implementation"},{"value":"A better implementation"},{"value":"TO BE CONTINUED"},{"value":"Binary Search Trees"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ebook/11-balancing-binary-search-trees/","previous":{"fields":{"slug":"/ebook/10-binary-search-trees/"},"frontmatter":{"title":"10. Binary Search Trees","posttype":"ebook"}},"next":{"fields":{"slug":"/ebook/12-red-black-tree/"},"frontmatter":{"title":"12. The Red-Black Tree","posttype":"ebook"}}}}}