{"componentChunkName":"component---src-templates-ebook-page-js","path":"/ebook/6-macros/","result":{"data":{"site":{"siteMetadata":{"title":"Another C Library"}},"markdownRemark":{"id":"14b23037-d39b-5c6a-8575-87c49f29e5bf","html":"<h1 id=\"macros\"><a href=\"#macros\" aria-label=\"macros permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Macros</h1>\n<p>The C compiler allows us to create a macro (basically defining one thing as another).  Two individual constants can be useful for debugging.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">__LINE__ - The line of code that you are on.\n__FILE__ - The file that the code exists in.</code></pre></div>\n<p>For example if you were to create this\ntest<em>special</em>constants.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"This line of code is at line %d in the file %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span>  <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Build it</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gcc test_special_constants.c -o test_special_constants</code></pre></div>\n<p>And run it</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ./test_special_constants\nThis line of code is at line 4 in function main in the file test_special_constants.c</code></pre></div>\n<p><strong>FILE</strong> is of the type const char * (meaning it is a sequence of read-only characters).   <strong>LINE</strong> is an int (integer).</p>\n<p>We can utilize the compiler and macros to help us here.  In C, you define a macro using #define.  </p>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply(x, y) x*y</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>gets interpreted as</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply(x, y) x*y</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Before, it is turned into a binary.  The macro gets placed inline in the code.  For example, a macro can reference a variable that was defined in the function.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) x*y</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply_by_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that x doesn't exist when multiply<em>by</em>x is defined.  Because it is replaced, it would look like the following.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) x*y</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If x didn't exist, the compiler would ultimately throw an error.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) multiply(x, y)</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply_by_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>get's converted to</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) multiply(x, y)</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that multiply didn't have to exist when the macro was defined.  Macros are evaluated first.  </p>\n<p>Macros rarely end in a semicolon.  The following will throw an error.</p>\n<p>test_code.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) multiply(x, y);</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply_by_x</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc test_code.c -o test_code\ntest_special_constants.c:11:26: error: unexpected &#39;;&#39; before &#39;)&#39;\n  printf(&quot;5 x 6 = %d\\n&quot;, multiply_by_x(6));\n                         ^\ntest_special_constants.c:3:40: note: expanded from macro &#39;multiply_by_x&#39;\n#define multiply_by_x(y) multiply(x, y);\n                                       ^</code></pre></div>\n<p>The above code get's converted to</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> multiply_by_x(y) multiply(x, y);</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5 x 6 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice the extra semicolon after multiply.  Generally, macros can contain semicolons but cannot end in semicolons.  Macros can also define multiple lines of code (or multiple statements).</p>\n<p>test_code.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> swap(a,b) \\\n  tmp = a;        \\\n  a = b;          \\\n  b = tmp</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"before swap: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"after swap: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc test_code.c -o test_code\ntest_special_constants.c:12:3: error: use of undeclared identifier &#39;tmp&#39;\n  swap(x, y);\n  ^\ntest_special_constants.c:4:3: note: expanded from macro &#39;swap&#39;\n  tmp = a;        \\\n  ^\ntest_special_constants.c:12:3: error: use of undeclared identifier &#39;tmp&#39;\ntest_special_constants.c:6:7: note: expanded from macro &#39;swap&#39;\n  b = tmp\n      ^\n2 errors generated.</code></pre></div>\n<p>The swap macro expected a tmp variable to exist.  Declaring tmp will fix the code.</p>\n<p>test_code.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> swap(a,b) \\\n  tmp = a;        \\\n  a = b;          \\\n  b = tmp</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"before swap: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"after swap: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc test_code.c -o test_code\n$ ./test_code\nbefore swap: (5, 10)\nafter swap: (10, 5)</code></pre></div>\n<p>One common error with multi-line macros is to put a space after the .  The compiler will give you an error for doing this.  Also, I put the \\ so that they all line up vertically.  This just makes the code more readable - the compiler doesn't care.  A second error with multi-line macros is to put the \\ after the last line.  The \\ continues code to the next line.  It's an error to put the \\ on the last line (which may or may not get reported by the compiler in a useful way).</p>\n<p>Macros can be defined in different ways depending upon another macro variable.</p>\n<p>test_code.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _DEBUG_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> printx(x) printf( \"DEBUG: %d\\n\", x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> printx(x) printf( \"NOT DEBUG: %d\\n\", x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printx</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc test_code.c -o test_code\n$ ./test_code\nNOT DEBUG: 5</code></pre></div>\n<p>You can define compiler directives from the command line using the -D option in gcc.  Multiple directives can be defined by repeating the -D option.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ gcc -D_DEBUG_ test_code.c -o test_code\n$ ./test_code\nDEBUG: 5</code></pre></div>\n<p>Finally, we can have the compiler create a single string constant out of the <strong>FILE</strong> and the <strong>LINE</strong> (which can include additional information).  Converting a number to a string using #define is a little tricky due to how the preprocessor works.  It has to be done in two passes using a function which calls a function.  The preprocessor doesn't do recursion.  Instead, it works by doing two passes.</p>\n<p>For example,</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE2(x) #x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE(x) STRINGIZE2(x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __FILE_LINE__ __FILE__ \":\" STRINGIZE(__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILE_LINE_MACRO(a) __FILE_LINE__ \" [\" a \"]\"</span></code></pre></div>\n<p>To resolve, <strong>FILE_LINE</strong> (assuming we have a file named test_code.c and line 9)</p>\n<p>test_code.c</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE2(x) #x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE(x) STRINGIZE2(x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __FILE_LINE__ __FILE__ \":\" STRINGIZE(__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILE_LINE_MACRO(a) __FILE_LINE__ \" [\" a \"]\"</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> __FILE_LINE__ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first pass will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE2(x) #x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE(x) STRINGIZE2(x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __FILE_LINE__ __FILE__ \":\" STRINGIZE(__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILE_LINE_MACRO(a) __FILE_LINE__ \" [\" a \"]\"</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test_code.c\"</span> <span class=\"token string\">\":\"</span> <span class=\"token function\">STRINGIZE2</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The second pass will look like...</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE2(x) #x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRINGIZE(x) STRINGIZE2(x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __FILE_LINE__ __FILE__ \":\" STRINGIZE(__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FILE_LINE_MACRO(a) __FILE_LINE__ \" [\" a \"]\"</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  printf <span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> test_code<span class=\"token punctuation\">.</span>c<span class=\"token string\">\" \"</span><span class=\"token operator\">:</span><span class=\"token string\">\" \"</span><span class=\"token number\">9</span>\"  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In ac<em>common.h, I also defined AC</em>FILE<em>LINE</em>MACRO, which is a macro meant for objects such as the ac_timer object.  This will become more evident as we work through the allocator object.  As usual, it's a good idea to define macros using ac or AC as a prefix to ensure that your code doesn't conflict with other codebases.  </p>\n<p>$ac/src/ac_common.h</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _ac_common_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _ac_common_H</span>\n\n<span class=\"token comment\">/* defines NULL, size_t, offsetof */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stddef.h></span></span>\n<span class=\"token comment\">/* because I like to use true, false, and bool */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n\n<span class=\"token comment\">/*\nDefining _AC_DEBUG_MEMORY_ will check that memory is properly\nfreed (and try some rudimentary double-free checks).  If memory\ndoesn't seem to be previously allocated, there is a scan to find\nthe closest block.  _AC_DEBUG_MEMORY_ can be defined as NULL or\na valid string.  If it is defined as a string, then a file will be\nwritten with the given name every _AC_DEBUG_MEMORY_SPEED_ seconds.\nSnapshots are saved in increasing intervals.\n*/</span>\n<span class=\"token comment\">// #define _AC_DEBUG_MEMORY_ \"memory.log\"</span>\n\n<span class=\"token comment\">/* How often should the memory be checked? It is always checked in the\n   beginning and every _AC_DEBUG_MEMORY_SPEED_ seconds assuming\n   _AC_DEBUG_MEMORY_ is defined as a string (and not NULL). */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _AC_DEBUG_MEMORY_SPEED_ 60</span>\n\n<span class=\"token comment\">/*\n  Given an address of a member of a structure, the base object type, and the field name,\n  return the address of the base structure.\n*/</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_parent_object(addr, base_type, field) (base_type *)((char *)addr-offsetof(base_type,field))</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_STRINGIZE2(x) #x</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_STRINGIZE(x) AC_STRINGIZE2(x)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __AC_FILE_LINE__ __FILE__ \":\" AC_STRINGIZE(__LINE__)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> AC_FILE_LINE_MACRO(a) __AC_FILE_LINE__ \" [\" a \"]\"</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>The ac<em>parent</em>object macro is useful for finding the address of a structure when given a pointer to a member of the structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> point_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  point_t point<span class=\"token punctuation\">;</span>\n  point<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  point<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  point_t <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">ac_parent_object</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> point_t<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"point is found at %p, p is %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>point<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>point <span class=\"token operator\">==</span> p <span class=\"token operator\">?</span> <span class=\"token string\">\"equal\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"not equal\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Get the address of point using the ampersand.<br/></li>\n<li>compare that p and the address of point are the same</br></li>\n<li>if they are the same, do what's between ? and :<br></li>\n<li>\n<p>else, do what's after the :</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">&amp;</span>point <span class=\"token operator\">==</span> p <span class=\"token operator\">?</span> <span class=\"token string\">\"equal\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"not equal\"</span></code></pre></div>\n</li>\n</ol>\n<p><a href=\"../../../README.md\">Table of Contents (only if viewing on Github)</a></p>","frontmatter":{"title":"6. Macros"}},"allMarkdownRemark":{"edges":[{"node":{"id":"65ef6af8-db2b-5241-aabb-be94ecaa93a6","frontmatter":{"title":"","path":null},"headings":[{"value":"Things that have been helpful to me"}]}},{"node":{"id":"ea93de22-255a-510a-a3d6-e5ca71719254","frontmatter":{"title":"","path":null},"headings":[{"value":"Improving Quicksort"},{"value":"The Improvement to Quicksort"}]}},{"node":{"id":"e92ffe3f-7ca9-5998-86d0-02a589e5a259","frontmatter":{"title":"1. Getting Started","path":"/1-getting-started"},"headings":[{"value":"A quick word about licensing"},{"value":"Getting Started"}]}},{"node":{"id":"b16eb4e9-d84b-5be6-84f7-61ebe2bcc410","frontmatter":{"title":"10. Binary Search Trees","path":"/10-binary-search-trees"},"headings":[{"value":"Binary Search Trees"},{"value":"Find"},{"value":"Insert"}]}},{"node":{"id":"baba82da-4489-5fd7-9915-ef011f56a666","frontmatter":{"title":"11. Balancing Binary Search Trees","path":"/11-balancing-binary-search-trees"},"headings":[{"value":"Balancing Binary Search Trees"}]}},{"node":{"id":"f2d454de-1f32-50a9-91a3-f3ed53776f11","frontmatter":{"title":"12. The Red-Black Tree","path":"/12-red-black-tree"},"headings":[{"value":"The Red-Black Tree"}]}},{"node":{"id":"0229f92a-6f18-52a2-9a98-c536b17b48fa","frontmatter":{"title":"13. The Map Object","path":"/13-map"},"headings":[{"value":"The Map Object"}]}},{"node":{"id":"d40dca2d-317c-5be1-96bb-1a1ce5aa709b","frontmatter":{"title":"14. The Set and Multimap","path":"/14-set-and-multimap"},"headings":[{"value":"The set and multimap"}]}},{"node":{"id":"dda89e39-e139-5921-b61e-3428acc8db29","frontmatter":{"title":"2. Timing Your Code","path":"/2-timing"},"headings":[{"value":"Timing Your Code (the first project)"},{"value":"Splitting up code into multiple files"},{"value":"include <stdlib.h> is added at the top of the file since it is needed for malloc.  All of the members are initialized to zero except repeat (which is set to the value passed into timer_init)."}]}},{"node":{"id":"9801a3af-8f22-5982-94c5-35f6112eb823","frontmatter":{"title":"3. The Buffer Object","path":"/3-buffer"},"headings":[{"value":"The Buffer Object"}]}},{"node":{"id":"711af732-1367-5fd2-9136-ab310ae70a1c","frontmatter":{"title":"4. Linked Lists","path":"/4-linked-lists"},"headings":[{"value":"Linked Lists"}]}},{"node":{"id":"3f9e59fa-f5a7-5d87-95d8-40c4b5a27155","frontmatter":{"title":"5. Introducing Threads","path":"/5-threads"},"headings":[]}},{"node":{"id":"14b23037-d39b-5c6a-8575-87c49f29e5bf","frontmatter":{"title":"6. Macros","path":"/6-macros"},"headings":[{"value":"Macros"}]}},{"node":{"id":"1f7d377b-cb76-56c9-ab8e-65e6f347a63b","frontmatter":{"title":"7. The Global Allocator Object","path":"/7-allocator"},"headings":[{"value":"The Global Allocator Object"},{"value":"A Quick Recap"}]}},{"node":{"id":"836c39a4-58c3-5e44-973e-2eaee112e590","frontmatter":{"title":"8. The Global Allocator Implementation","path":"/8-allocator-implementation"},"headings":[{"value":"The Global Allocator Implementation"},{"value":"To Be Continued"}]}},{"node":{"id":"c0fc3845-5a1d-5561-b1ce-e06b57e99af8","frontmatter":{"title":"9. The Pool Object","path":"/9-pool"},"headings":[{"value":"The Pool Object"},{"value":"The Simplest Implementation"},{"value":"A better implementation"},{"value":"TO BE CONTINUED"}]}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/ebook/6-macros/"}}}