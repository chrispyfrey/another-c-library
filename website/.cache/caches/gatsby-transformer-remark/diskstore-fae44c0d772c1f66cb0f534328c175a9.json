{"expireTime":9007200828255475000,"key":"transformer-remark-markdown-html-ast-f2ff41361ffbbcfd56ecfa9204e01268-gatsby-remark-prismjsgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Copyright 2019 Andy Curtis & Daniel Curtis","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"the-red-black-tree"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-red-black-tree","aria-label":"the red black tree permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The Red-Black Tree","position":{"start":{"line":4,"column":3,"offset":47},"end":{"line":4,"column":21,"offset":65}}}],"position":{"start":{"line":4,"column":1,"offset":45},"end":{"line":4,"column":21,"offset":65}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red-black tree is a mostly balanced binary search tree that was invented by Leonidas J. Guibas and Robert Sedgewick.","position":{"start":{"line":6,"column":1,"offset":67},"end":{"line":6,"column":121,"offset":187}}}],"position":{"start":{"line":6,"column":1,"offset":67},"end":{"line":6,"column":121,"offset":187}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-properties-of-a-red-black-tree"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-properties-of-a-red-black-tree","aria-label":"the properties of a red black tree permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The properties of a red-black tree","position":{"start":{"line":7,"column":4,"offset":191},"end":{"line":7,"column":38,"offset":225}}}],"position":{"start":{"line":7,"column":1,"offset":188},"end":{"line":7,"column":38,"offset":225}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Red–black tree Properties (","position":{"start":{"line":9,"column":1,"offset":227},"end":{"line":9,"column":28,"offset":254}}},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree"},"children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Red–black_tree","position":{"start":{"line":9,"column":28,"offset":254},"end":{"line":9,"column":72,"offset":298}}}],"position":{"start":{"line":9,"column":28,"offset":254},"end":{"line":9,"column":72,"offset":298}}},{"type":"text","value":")","position":{"start":{"line":9,"column":72,"offset":298},"end":{"line":9,"column":73,"offset":299}}}],"position":{"start":{"line":9,"column":1,"offset":227},"end":{"line":9,"column":73,"offset":299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each node is either red or black.","position":{"start":{"line":11,"column":4,"offset":304},"end":{"line":11,"column":37,"offset":337}}}],"position":{"start":{"line":11,"column":1,"offset":301},"end":{"line":11,"column":37,"offset":337}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The root is black.","position":{"start":{"line":12,"column":4,"offset":341},"end":{"line":12,"column":22,"offset":359}}}],"position":{"start":{"line":12,"column":1,"offset":338},"end":{"line":12,"column":22,"offset":359}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All leaves (NIL) are black.","position":{"start":{"line":13,"column":4,"offset":363},"end":{"line":13,"column":31,"offset":390}}}],"position":{"start":{"line":13,"column":1,"offset":360},"end":{"line":13,"column":31,"offset":390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a node is red, then both its children are black.","position":{"start":{"line":14,"column":4,"offset":394},"end":{"line":14,"column":55,"offset":445}}}],"position":{"start":{"line":14,"column":1,"offset":391},"end":{"line":14,"column":55,"offset":445}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Every path from a given node to any of its descendant NIL nodes contains the same number of black nodes.","position":{"start":{"line":15,"column":4,"offset":449},"end":{"line":15,"column":108,"offset":553}}}],"position":{"start":{"line":15,"column":1,"offset":446},"end":{"line":15,"column":108,"offset":553}}},{"type":"text","value":"\n"}],"position":{"start":{"line":11,"column":1,"offset":301},"end":{"line":15,"column":108,"offset":553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"My additional rules for clarification which are based upon the first 5 rules.","position":{"start":{"line":17,"column":1,"offset":555},"end":{"line":17,"column":78,"offset":632}}}],"position":{"start":{"line":17,"column":1,"offset":555},"end":{"line":17,"column":78,"offset":632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a node has one child, the child must be red","position":{"start":{"line":18,"column":3,"offset":635},"end":{"line":18,"column":49,"offset":681}}}],"position":{"start":{"line":18,"column":1,"offset":633},"end":{"line":18,"column":49,"offset":681}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a node has two children, one or both of the children can be red if the parent is black","position":{"start":{"line":19,"column":3,"offset":684},"end":{"line":19,"column":92,"offset":773}}}],"position":{"start":{"line":19,"column":1,"offset":682},"end":{"line":19,"column":92,"offset":773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If a node is red, it must have either two children who are black or no children at all.","position":{"start":{"line":20,"column":3,"offset":776},"end":{"line":20,"column":90,"offset":863}}}],"position":{"start":{"line":20,"column":1,"offset":774},"end":{"line":20,"column":90,"offset":863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The parent of a red node must be black","position":{"start":{"line":21,"column":3,"offset":866},"end":{"line":21,"column":41,"offset":904}}}],"position":{"start":{"line":21,"column":1,"offset":864},"end":{"line":21,"column":41,"offset":904}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The black height of any leaf node must be the same (another way of stating 5)","position":{"start":{"line":22,"column":3,"offset":907},"end":{"line":22,"column":80,"offset":984}}}],"position":{"start":{"line":22,"column":1,"offset":905},"end":{"line":22,"column":80,"offset":984}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A red-black tree often will have many more black nodes than red nodes.  This is okay and expected.  The red node is an indication that the tree may be somehow out of balance.  It is possible to have more red nodes than black nodes, but it isn't typical.","position":{"start":{"line":23,"column":3,"offset":987},"end":{"line":23,"column":256,"offset":1240}}}],"position":{"start":{"line":23,"column":1,"offset":985},"end":{"line":23,"column":256,"offset":1240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"A red-black tree has a worst case of a 2logN depth but is likely to maintain a logN depth or be very close to it.","position":{"start":{"line":24,"column":3,"offset":1243},"end":{"line":24,"column":116,"offset":1356}}}],"position":{"start":{"line":24,"column":1,"offset":1241},"end":{"line":24,"column":116,"offset":1356}}},{"type":"text","value":"\n"}],"position":{"start":{"line":18,"column":1,"offset":633},"end":{"line":24,"column":116,"offset":1356}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red-black tree is balanced through rotations and changing colors, which were discussed in ","position":{"start":{"line":26,"column":1,"offset":1358},"end":{"line":26,"column":95,"offset":1452}}},{"type":"element","tagName":"a","properties":{"href":"11_balancing_binary_search_trees.md"},"children":[{"type":"text","value":"Balancing Binary Search Trees","position":{"start":{"line":26,"column":96,"offset":1453},"end":{"line":26,"column":125,"offset":1482}}}],"position":{"start":{"line":26,"column":95,"offset":1452},"end":{"line":26,"column":163,"offset":1520}}},{"type":"text","value":".  Make sure the tree_operations tool is built from the last section if you want to follow along.","position":{"start":{"line":26,"column":163,"offset":1520},"end":{"line":26,"column":260,"offset":1617}}}],"position":{"start":{"line":26,"column":1,"offset":1358},"end":{"line":26,"column":260,"offset":1617}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/11_balancing_binary_search_trees/2_tree_operations\n<span class=\"token function\">make</span></code></pre></div>","position":{"start":{"line":28,"column":1,"offset":1619},"end":{"line":31,"column":4,"offset":1707}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then run","position":{"start":{"line":33,"column":1,"offset":1709},"end":{"line":33,"column":9,"offset":1717}}}],"position":{"start":{"line":33,"column":1,"offset":1709},"end":{"line":33,"column":9,"offset":1717}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations ABC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\nq</code></pre></div>","position":{"start":{"line":34,"column":1,"offset":1718},"end":{"line":44,"column":4,"offset":1882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To make sure that it is working.","position":{"start":{"line":46,"column":1,"offset":1884},"end":{"line":46,"column":33,"offset":1916}}}],"position":{"start":{"line":46,"column":1,"offset":1884},"end":{"line":46,"column":33,"offset":1916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code for this section is found in ","position":{"start":{"line":48,"column":1,"offset":1918},"end":{"line":48,"column":39,"offset":1956}}},{"type":"raw","value":"<i>","position":{"start":{"line":48,"column":39,"offset":1956},"end":{"line":48,"column":42,"offset":1959}}},{"type":"text","value":"illustrations/12","position":{"start":{"line":48,"column":42,"offset":1959},"end":{"line":48,"column":58,"offset":1975}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"red","position":{"start":{"line":48,"column":59,"offset":1976},"end":{"line":48,"column":62,"offset":1979}}}],"position":{"start":{"line":48,"column":58,"offset":1975},"end":{"line":48,"column":63,"offset":1980}}},{"type":"text","value":"black","position":{"start":{"line":48,"column":63,"offset":1980},"end":{"line":48,"column":68,"offset":1985}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"tree/1","position":{"start":{"line":48,"column":69,"offset":1986},"end":{"line":48,"column":75,"offset":1992}}}],"position":{"start":{"line":48,"column":68,"offset":1985},"end":{"line":48,"column":76,"offset":1993}}},{"type":"text","value":"red","position":{"start":{"line":48,"column":76,"offset":1993},"end":{"line":48,"column":79,"offset":1996}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":48,"column":80,"offset":1997},"end":{"line":48,"column":85,"offset":2002}}}],"position":{"start":{"line":48,"column":79,"offset":1996},"end":{"line":48,"column":86,"offset":2003}}},{"type":"text","value":"tree","position":{"start":{"line":48,"column":86,"offset":2003},"end":{"line":48,"column":90,"offset":2007}}},{"type":"raw","value":"</i>","position":{"start":{"line":48,"column":90,"offset":2007},"end":{"line":48,"column":94,"offset":2011}}}],"position":{"start":{"line":48,"column":1,"offset":1918},"end":{"line":48,"column":94,"offset":2011}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/12_red_black_tree/1_red_black_tree\n<span class=\"token function\">make</span></code></pre></div>","position":{"start":{"line":49,"column":1,"offset":2012},"end":{"line":52,"column":4,"offset":2084}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Most of the code is in red","position":{"start":{"line":54,"column":1,"offset":2086},"end":{"line":54,"column":27,"offset":2112}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":54,"column":28,"offset":2113},"end":{"line":54,"column":33,"offset":2118}}}],"position":{"start":{"line":54,"column":27,"offset":2112},"end":{"line":54,"column":34,"offset":2119}}},{"type":"text","value":"tree.c","position":{"start":{"line":54,"column":34,"offset":2119},"end":{"line":54,"column":40,"offset":2125}}}],"position":{"start":{"line":54,"column":1,"offset":2086},"end":{"line":54,"column":40,"offset":2125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"testing-the-red-black-tree-properties"},"children":[{"type":"element","tagName":"a","properties":{"href":"#testing-the-red-black-tree-properties","aria-label":"testing the red black tree properties permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Testing the red-black tree properties","position":{"start":{"line":56,"column":4,"offset":2130},"end":{"line":56,"column":41,"offset":2167}}}],"position":{"start":{"line":56,"column":1,"offset":2127},"end":{"line":56,"column":41,"offset":2167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When an algorithm can be tested through a function, it is often a good idea to write such a function.  Functions like the one to follow should be pretty straight-forward, given the rules above.","position":{"start":{"line":58,"column":1,"offset":2169},"end":{"line":58,"column":194,"offset":2362}}}],"position":{"start":{"line":58,"column":1,"offset":2169},"end":{"line":58,"column":194,"offset":2362}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">test_red_black_rules</span><span class=\"token punctuation\">(</span>ac_pool_t <span class=\"token operator\">*</span>pool<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* an empty tree is valid */</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  bool success <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* the root is black */</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-></span>color <span class=\"token operator\">!=</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"The root is not black!\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> black_nodes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>first_black_leaf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>sn <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* only consider leaf nodes */</span>\n      black_nodes <span class=\"token operator\">=</span> <span class=\"token function\">count_black_nodes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      first_black_leaf <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  n <span class=\"token operator\">=</span> sn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* check if one child and that child is red */</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> bn <span class=\"token operator\">=</span> <span class=\"token function\">count_black_nodes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bn <span class=\"token operator\">!=</span> black_nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a NULL left child with a different black height than \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>first_black_leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> bn <span class=\"token operator\">=</span> <span class=\"token function\">count_black_nodes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bn <span class=\"token operator\">!=</span> black_nodes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a NULL right child with a different black height than \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>first_black_leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>right <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">!=</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has one left child and it isn't red\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>right <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">!=</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has one right child and it isn't red\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a red left child and is red\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>right <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a red right child and is red\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> n<span class=\"token operator\">-></span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a red parent and is red\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>n<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* only consider leaf nodes */</span>\n      <span class=\"token keyword\">int</span> bn <span class=\"token operator\">=</span> <span class=\"token function\">count_black_nodes</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>black_nodes <span class=\"token operator\">!=</span> bn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        success <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\" has a different black height than \"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">print_node_with_color</span><span class=\"token punctuation\">(</span>first_black_leaf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":60,"column":1,"offset":2364},"end":{"line":150,"column":4,"offset":4953}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"insert"},"children":[{"type":"element","tagName":"a","properties":{"href":"#insert","aria-label":"insert permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Insert","position":{"start":{"line":152,"column":4,"offset":4958},"end":{"line":152,"column":10,"offset":4964}}}],"position":{"start":{"line":152,"column":1,"offset":4955},"end":{"line":152,"column":10,"offset":4964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red-black tree functions in many ways are similar to the binary search tree.  Iterating and finding are the same.  Erasing and inserting are done in virtually the same way, except once an item is inserted or erased, the color must be fixed.  The difference between the binary search tree and red-black tree node_insert is shown below.","position":{"start":{"line":154,"column":1,"offset":4966},"end":{"line":154,"column":339,"offset":5304}}}],"position":{"start":{"line":154,"column":1,"offset":4966},"end":{"line":154,"column":339,"offset":5304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"binary","position":{"start":{"line":156,"column":1,"offset":5306},"end":{"line":156,"column":7,"offset":5312}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"search","position":{"start":{"line":156,"column":8,"offset":5313},"end":{"line":156,"column":14,"offset":5319}}}],"position":{"start":{"line":156,"column":7,"offset":5312},"end":{"line":156,"column":15,"offset":5320}}},{"type":"text","value":"tree.c","position":{"start":{"line":156,"column":15,"offset":5320},"end":{"line":156,"column":21,"offset":5326}}}],"position":{"start":{"line":156,"column":1,"offset":5306},"end":{"line":156,"column":21,"offset":5326}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> root<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_insert<span class=\"token operator\">-></span>key <span class=\"token operator\">&lt;</span> parent<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      n <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_insert<span class=\"token operator\">-></span>key <span class=\"token operator\">></span> parent<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      n <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  node_to_insert<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n  node_to_insert<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> node_to_insert<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":157,"column":1,"offset":5327},"end":{"line":175,"column":4,"offset":5772}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"red","position":{"start":{"line":177,"column":1,"offset":5774},"end":{"line":177,"column":4,"offset":5777}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":177,"column":5,"offset":5778},"end":{"line":177,"column":10,"offset":5783}}}],"position":{"start":{"line":177,"column":4,"offset":5777},"end":{"line":177,"column":11,"offset":5784}}},{"type":"text","value":"tree.c","position":{"start":{"line":177,"column":11,"offset":5784},"end":{"line":177,"column":17,"offset":5790}}}],"position":{"start":{"line":177,"column":1,"offset":5774},"end":{"line":177,"column":17,"offset":5790}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> root<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_insert<span class=\"token operator\">-></span>key <span class=\"token operator\">&lt;</span> parent<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      n <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_insert<span class=\"token operator\">-></span>key <span class=\"token operator\">></span> parent<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      n <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  node_to_insert<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n  node_to_insert<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> node_to_insert<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_to_insert<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":178,"column":1,"offset":5791},"end":{"line":199,"column":4,"offset":6331}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The difference is:","position":{"start":{"line":201,"column":1,"offset":6333},"end":{"line":201,"column":19,"offset":6351}}}],"position":{"start":{"line":201,"column":1,"offset":6333},"end":{"line":201,"column":19,"offset":6351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"red","position":{"start":{"line":203,"column":1,"offset":6353},"end":{"line":203,"column":4,"offset":6356}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":203,"column":5,"offset":6357},"end":{"line":203,"column":10,"offset":6362}}}],"position":{"start":{"line":203,"column":4,"offset":6356},"end":{"line":203,"column":11,"offset":6363}}},{"type":"text","value":"tree.c","position":{"start":{"line":203,"column":11,"offset":6363},"end":{"line":203,"column":17,"offset":6369}}}],"position":{"start":{"line":203,"column":1,"offset":6353},"end":{"line":203,"column":17,"offset":6369}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_to_insert<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":204,"column":1,"offset":6370},"end":{"line":208,"column":4,"offset":6474}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red","position":{"start":{"line":210,"column":1,"offset":6476},"end":{"line":210,"column":8,"offset":6483}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":210,"column":9,"offset":6484},"end":{"line":210,"column":14,"offset":6489}}}],"position":{"start":{"line":210,"column":8,"offset":6483},"end":{"line":210,"column":15,"offset":6490}}},{"type":"text","value":"insert method in red","position":{"start":{"line":210,"column":15,"offset":6490},"end":{"line":210,"column":35,"offset":6510}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":210,"column":36,"offset":6511},"end":{"line":210,"column":41,"offset":6516}}}],"position":{"start":{"line":210,"column":35,"offset":6510},"end":{"line":210,"column":42,"offset":6517}}},{"type":"text","value":"tree.c","position":{"start":{"line":210,"column":42,"offset":6517},"end":{"line":210,"column":48,"offset":6523}}}],"position":{"start":{"line":210,"column":1,"offset":6476},"end":{"line":210,"column":48,"offset":6523}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>grandparent<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>uncle<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n      node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n    grandparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      uncle <span class=\"token operator\">=</span> grandparent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// recolor grandparent</span>\n        grandparent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> grandparent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotate_right_and_swap_colors</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      uncle <span class=\"token operator\">=</span> grandparent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// recolor grandparent</span>\n        grandparent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n        parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n        node <span class=\"token operator\">=</span> grandparent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotate_left_and_swap_colors</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":211,"column":1,"offset":6524},"end":{"line":260,"column":4,"offset":7679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is assumed that node is linked into its proper parent and that the node is a leaf node with left and right pointers set to NULL.  The red-black tree always initially paints the given node red.","position":{"start":{"line":262,"column":1,"offset":7681},"end":{"line":262,"column":196,"offset":7876}}}],"position":{"start":{"line":262,"column":1,"offset":7681},"end":{"line":262,"column":196,"offset":7876}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">red_black_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":263,"column":1,"offset":7877},"end":{"line":266,"column":4,"offset":7959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The insert operation will need to look at the parent, the grandparent, and the uncle (the sibling of the parent).  Declare these variables for later use.","position":{"start":{"line":268,"column":1,"offset":7961},"end":{"line":268,"column":154,"offset":8114}}}],"position":{"start":{"line":268,"column":1,"offset":7961},"end":{"line":268,"column":154,"offset":8114}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>grandparent<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>uncle<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":269,"column":1,"offset":8115},"end":{"line":271,"column":4,"offset":8163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red-black tree insert may need to recurse.  Many recursion problems (this one included) can be written as a loop.  The loop will continue forever until a break is called.  ","position":{"start":{"line":273,"column":1,"offset":8165},"end":{"line":273,"column":177,"offset":8341}}}],"position":{"start":{"line":273,"column":1,"offset":8165},"end":{"line":273,"column":177,"offset":8341}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>true<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  parent <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":274,"column":1,"offset":8342},"end":{"line":277,"column":4,"offset":8390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"At this point in the code, the node is always red.","position":{"start":{"line":278,"column":1,"offset":8391},"end":{"line":278,"column":51,"offset":8441}}}],"position":{"start":{"line":278,"column":1,"offset":8391},"end":{"line":278,"column":51,"offset":8441}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first check is to see if the given node is the root node.  If the node doesn't have a parent, it is a root node.  Root nodes are colored black, and then we are done (break out of the while loop).    ","position":{"start":{"line":280,"column":1,"offset":8443},"end":{"line":280,"column":204,"offset":8646}}}],"position":{"start":{"line":280,"column":1,"offset":8443},"end":{"line":280,"column":204,"offset":8646}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    node<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":281,"column":1,"offset":8647},"end":{"line":287,"column":4,"offset":8736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the parent is black, we are done as having a red leaf following a black parent is always valid.","position":{"start":{"line":289,"column":1,"offset":8738},"end":{"line":289,"column":99,"offset":8836}}}],"position":{"start":{"line":289,"column":1,"offset":8738},"end":{"line":289,"column":99,"offset":8836}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":290,"column":1,"offset":8837},"end":{"line":293,"column":4,"offset":8885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The parent is valid, and it must be red (as it must be red or black, and it was determined to not be black in the last block of code).  It is a violation of the red-black tree to have two red nodes in a row.  Get the grandparent (the parent's parent).","position":{"start":{"line":295,"column":1,"offset":8887},"end":{"line":295,"column":252,"offset":9138}}}],"position":{"start":{"line":295,"column":1,"offset":8887},"end":{"line":295,"column":252,"offset":9138}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  grandparent <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":296,"column":1,"offset":9139},"end":{"line":298,"column":4,"offset":9179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red-black tree insert operation considers the node's uncle's color.  The uncle would be the grandparent's other child.  If the grandparent->left == parent, then the uncle is the right node.  Otherwise, the uncle is the left node.  The else block is a mirror of the if block, switching every instance of left with right.","position":{"start":{"line":300,"column":1,"offset":9181},"end":{"line":300,"column":324,"offset":9504}}}],"position":{"start":{"line":300,"column":1,"offset":9181},"end":{"line":300,"column":324,"offset":9504}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uncle <span class=\"token operator\">=</span> grandparent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    uncle <span class=\"token operator\">=</span> grandparent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":301,"column":1,"offset":9505},"end":{"line":310,"column":4,"offset":9645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The next case to test is if the uncle exists and the uncle's color is red.  At this point, the parent and the uncle are both red.  The red-black tree needs to maintain a constant black height.","position":{"start":{"line":312,"column":1,"offset":9647},"end":{"line":312,"column":193,"offset":9839}}}],"position":{"start":{"line":312,"column":1,"offset":9647},"end":{"line":312,"column":193,"offset":9839}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ $ac/bin/tree_operations FDGBE\nF1\n| \\\n|  G2\n|    \nD2\n| \\\n|  (E2)\n|      \n(B2)\n\n(i)nsert, (e)rase, (r)ight_rotate, (l)eft_rotate, (R)ed, (b)lack, re(c)olor, (h)elp, (q)uit\ni A\nF1\n| \\\n|  G2\n|    \nD2\n| \\\n|  (E2)\n|      \n(B2)\n|   \n(A2)\n\n(A2) has a red parent and is red\n(B2) has a red left child and is red\n\n(i)nsert, (e)rase, (r)ight_rotate, (l)eft_rotate, (R)ed, (b)lack, re(c)olor, (h)elp, (q)uit</code></pre></div>","position":{"start":{"line":314,"column":1,"offset":9841},"end":{"line":344,"column":4,"offset":10245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Before inserting node (A2), notice that the leaf nodes (B2), (E2), and G2 all have a black height of 2, meaning that there are only 2 black nodes in the path from the root to each of the leaf nodes.  If you recolor (B2) and (E2) black and change D2 to be red, it doesn't change the black height of any of the leaf nodes.","position":{"start":{"line":346,"column":1,"offset":10247},"end":{"line":346,"column":321,"offset":10567}}}],"position":{"start":{"line":346,"column":1,"offset":10247},"end":{"line":346,"column":321,"offset":10567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the tool, you can type:","position":{"start":{"line":348,"column":1,"offset":10569},"end":{"line":348,"column":27,"offset":10595}}}],"position":{"start":{"line":348,"column":1,"offset":10569},"end":{"line":348,"column":27,"offset":10595}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">c D</code></pre></div>","position":{"start":{"line":349,"column":1,"offset":10596},"end":{"line":351,"column":4,"offset":10607}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"to recolor and get the following partial output","position":{"start":{"line":352,"column":1,"offset":10608},"end":{"line":352,"column":48,"offset":10655}}}],"position":{"start":{"line":352,"column":1,"offset":10608},"end":{"line":352,"column":48,"offset":10655}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">F1\n| \\\n|  G2\n|    \n(D1)\n|   \\\nB2   E2\n|      \n(A2)</code></pre></div>","position":{"start":{"line":353,"column":1,"offset":10656},"end":{"line":363,"column":4,"offset":10714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice that in this case, the recoloring created a valid red-black tree.  The black height is 2 to every leaf node.  The root is black.  There are not two red nodes in a row.  In the one case (A2) where a node only has a single child, the child is red.","position":{"start":{"line":365,"column":1,"offset":10716},"end":{"line":365,"column":253,"offset":10968}}}],"position":{"start":{"line":365,"column":1,"offset":10716},"end":{"line":365,"column":253,"offset":10968}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To recap, if the parent and uncle are red, paint the parent and uncle black and the grandparent red.  However, the grandparent's parent possibly was also red.  To handle this case, we can repeat all of the tests recursively. Since the recursion is simple, continuing in a while loop works by changing the node to the grandparent. The grandparent which painted red to maintain the rule that the loop always starts with a red node.  The code is below:","position":{"start":{"line":367,"column":1,"offset":10970},"end":{"line":367,"column":450,"offset":11419}}}],"position":{"start":{"line":367,"column":1,"offset":10970},"end":{"line":367,"column":450,"offset":11419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uncle <span class=\"token operator\">=</span> grandparent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uncle <span class=\"token operator\">&amp;&amp;</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      grandparent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n      parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> uncle<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      node <span class=\"token operator\">=</span> grandparent<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":368,"column":1,"offset":11420},"end":{"line":377,"column":4,"offset":11659}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following example adds the letter 0 (zero) to the left of (A2).  This creates the same case as above, but when recoloring happens (c B), (B1) and (D1) are both red. D becomes the new node. It is an example where recoloring creates a parent and child, which are both red.","position":{"start":{"line":379,"column":1,"offset":11661},"end":{"line":379,"column":275,"offset":11935}}}],"position":{"start":{"line":379,"column":1,"offset":11661},"end":{"line":379,"column":275,"offset":11935}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is illustrated by the tool below.","position":{"start":{"line":381,"column":1,"offset":11937},"end":{"line":381,"column":39,"offset":11975}}}],"position":{"start":{"line":381,"column":1,"offset":11937},"end":{"line":381,"column":39,"offset":11975}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations FDGBEABCDEFGHI\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>I2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>      \n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>G2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>D1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2   E2\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>    \n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\ni <span class=\"token number\">0</span>\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>I2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>      \n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>G2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>D1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2   E2\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>    \n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   \n<span class=\"token punctuation\">(</span>02<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>02<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span> has a red left child and is red\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\nc B\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>I2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>      \n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>G2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>D1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>    E2\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nA2   C2\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>02<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>D1<span class=\"token punctuation\">)</span> has a red left child and is red</code></pre></div>","position":{"start":{"line":382,"column":1,"offset":11976},"end":{"line":445,"column":4,"offset":12703}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The next case is if the uncle is black or NULL, then rotate to the right around the grandparent.  ","position":{"start":{"line":447,"column":1,"offset":12705},"end":{"line":447,"column":99,"offset":12803}}}],"position":{"start":{"line":447,"column":1,"offset":12705},"end":{"line":447,"column":99,"offset":12803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code is below:","position":{"start":{"line":449,"column":1,"offset":12805},"end":{"line":449,"column":19,"offset":12823}}}],"position":{"start":{"line":449,"column":1,"offset":12805},"end":{"line":449,"column":19,"offset":12823}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rotate_right_and_swap_colors</span><span class=\"token punctuation\">(</span>grandparent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":450,"column":1,"offset":12824},"end":{"line":455,"column":4,"offset":12951}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the node being inserted is to the right of the parent, it needs to be rotated to the left to keep one child to either side after the rotation.  If the left rotate isn't done first, the following will happen:","position":{"start":{"line":457,"column":1,"offset":12953},"end":{"line":457,"column":211,"offset":13163}}}],"position":{"start":{"line":457,"column":1,"offset":12953},"end":{"line":457,"column":211,"offset":13163}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations FDGB\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\ni C\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">\\</span>\n     <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span> has a red parent and is red\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\nr D\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G2\n<span class=\"token operator\">|</span>    \nB2\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>   \n   <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span> has a red left child and is red</code></pre></div>","position":{"start":{"line":459,"column":1,"offset":13165},"end":{"line":494,"column":4,"offset":13658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This just created the inverse problem (D is to the right and C is to the left of D).  ","position":{"start":{"line":496,"column":1,"offset":13660},"end":{"line":496,"column":87,"offset":13746}}}],"position":{"start":{"line":496,"column":1,"offset":13660},"end":{"line":496,"column":87,"offset":13746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Notice that while swapping colors during the rotate, that the placement of the black node doesn't change. This maintains the proper black height.","position":{"start":{"line":498,"column":1,"offset":13748},"end":{"line":498,"column":146,"offset":13893}}}],"position":{"start":{"line":498,"column":1,"offset":13748},"end":{"line":498,"column":146,"offset":13893}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After inserting A, do a right rotation on its grandparent D because its uncle is NULL (NULL is black).","position":{"start":{"line":500,"column":1,"offset":13895},"end":{"line":500,"column":103,"offset":13997}}}],"position":{"start":{"line":500,"column":1,"offset":13895},"end":{"line":500,"column":103,"offset":13997}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations FDGB\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\ni A\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   \n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span> has a red left child and is red\n\n<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>nsert, <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>rase, <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>ight_rotate, <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>eft_rotate, <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">)</span>ed, <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>lack, re<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>olor, <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span>elp, <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>uit\nr D\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G2\n<span class=\"token operator\">|</span>    \nB2\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A2<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":502,"column":1,"offset":13999},"end":{"line":534,"column":4,"offset":14411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example below, C is inserted to the left of B.  Both C and B are red.  Left rotate around B (the parent) before right rotating through D (the grandparent).","position":{"start":{"line":536,"column":1,"offset":14413},"end":{"line":536,"column":163,"offset":14575}}}],"position":{"start":{"line":536,"column":1,"offset":14413},"end":{"line":536,"column":163,"offset":14575}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Starting with a valid red black tree\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n\n\nOperation: insert C\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">\\</span>\n     <span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span> has a red parent and is red\n\nOperation: left_rotate B\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nD2 G2\n<span class=\"token operator\">|</span>    \n<span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>C2<span class=\"token punctuation\">)</span> has a red left child and is red\n\nOperation: right_rotate D\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G2\n<span class=\"token operator\">|</span>    \nC2\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>B2<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":538,"column":1,"offset":14577},"end":{"line":582,"column":4,"offset":15025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As stated before, the else block is where the parent is the right child, and the uncle is the left child.  All of the logic is reversed (left is swapped for right).","position":{"start":{"line":584,"column":1,"offset":15027},"end":{"line":584,"column":165,"offset":15191}}}],"position":{"start":{"line":584,"column":1,"offset":15027},"end":{"line":584,"column":165,"offset":15191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To recap","position":{"start":{"line":586,"column":1,"offset":15193},"end":{"line":586,"column":9,"offset":15201}}}],"position":{"start":{"line":586,"column":1,"offset":15193},"end":{"line":586,"column":9,"offset":15201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Link a node into the tree just like you would with a binary search tree","position":{"start":{"line":588,"column":4,"offset":15206},"end":{"line":588,"column":75,"offset":15277}}}],"position":{"start":{"line":588,"column":1,"offset":15203},"end":{"line":588,"column":75,"offset":15277}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Paint the node red","position":{"start":{"line":589,"column":4,"offset":15281},"end":{"line":589,"column":22,"offset":15299}}}],"position":{"start":{"line":589,"column":1,"offset":15278},"end":{"line":589,"column":22,"offset":15299}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Start a forever loop","position":{"start":{"line":590,"column":4,"offset":15303},"end":{"line":590,"column":24,"offset":15323}}}],"position":{"start":{"line":590,"column":1,"offset":15300},"end":{"line":590,"column":24,"offset":15323}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node doesn't have a parent, paint the node black and return","position":{"start":{"line":591,"column":4,"offset":15327},"end":{"line":591,"column":70,"offset":15393}}}],"position":{"start":{"line":591,"column":1,"offset":15324},"end":{"line":591,"column":70,"offset":15393}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node's parent is black, return","position":{"start":{"line":592,"column":4,"offset":15397},"end":{"line":592,"column":41,"offset":15434}}}],"position":{"start":{"line":592,"column":1,"offset":15394},"end":{"line":592,"column":41,"offset":15434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node's uncle is not NULL and it is red\na. paint the parent and the uncle black\nb. paint the grandparent red\nc. set the node to be the grandparent and continue in loop (3)","position":{"start":{"line":593,"column":4,"offset":15438},"end":{"line":596,"column":66,"offset":15624}}}],"position":{"start":{"line":593,"column":1,"offset":15435},"end":{"line":596,"column":66,"offset":15624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node is on the same side of the parent as the uncle is to the grandparent, rotate away from the uncle around the parent.","position":{"start":{"line":597,"column":4,"offset":15628},"end":{"line":597,"column":131,"offset":15755}}}],"position":{"start":{"line":597,"column":1,"offset":15625},"end":{"line":597,"column":131,"offset":15755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Rotate towards the uncle around the grandparent, swap colors with the parent and the grandparent, and return.","position":{"start":{"line":598,"column":4,"offset":15759},"end":{"line":598,"column":113,"offset":15868}}}],"position":{"start":{"line":598,"column":1,"offset":15756},"end":{"line":598,"column":113,"offset":15868}}},{"type":"text","value":"\n"}],"position":{"start":{"line":588,"column":1,"offset":15203},"end":{"line":598,"column":113,"offset":15868}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"erase"},"children":[{"type":"element","tagName":"a","properties":{"href":"#erase","aria-label":"erase permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Erase","position":{"start":{"line":600,"column":4,"offset":15873},"end":{"line":600,"column":9,"offset":15878}}}],"position":{"start":{"line":600,"column":1,"offset":15870},"end":{"line":600,"column":9,"offset":15878}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Erasing nodes in a red black tree is more complex than insertion.  In writing this and trying to visualize what is happening, I needed to keep reminding myself of the importance of maintaining black height and to a lesser extent, the other rules (particularly that a node with only one child must have a red child).  Like insertion, node_erase calls a function to fix the balance of the tree once the node is removed.  A key difference is that the color doesn't always have to be fixed.  Another difference is that what fixed is either the parent or the successor.","position":{"start":{"line":602,"column":1,"offset":15880},"end":{"line":602,"column":565,"offset":16444}}}],"position":{"start":{"line":602,"column":1,"offset":15880},"end":{"line":602,"column":565,"offset":16444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The function replace","position":{"start":{"line":604,"column":1,"offset":16446},"end":{"line":604,"column":21,"offset":16466}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"node","position":{"start":{"line":604,"column":22,"offset":16467},"end":{"line":604,"column":26,"offset":16471}}}],"position":{"start":{"line":604,"column":21,"offset":16466},"end":{"line":604,"column":27,"offset":16472}}},{"type":"text","value":"with_child sets the child color to the node that it is replacing's color.","position":{"start":{"line":604,"column":27,"offset":16472},"end":{"line":604,"column":100,"offset":16545}}}],"position":{"start":{"line":604,"column":1,"offset":16446},"end":{"line":604,"column":100,"offset":16545}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">child<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":605,"column":1,"offset":16546},"end":{"line":607,"column":4,"offset":16582}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If there is one child or if the node is the last in the tree, the color doesn't need to be fixed.  The only case in the block below where a node needs fixed is if you erase a black node without any children, that isn't the root.","position":{"start":{"line":609,"column":1,"offset":16584},"end":{"line":609,"column":229,"offset":16812}}}],"position":{"start":{"line":609,"column":1,"offset":16584},"end":{"line":609,"column":229,"offset":16812}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">replace_node_with_child</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span>\n          parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n          parent<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n          <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">replace_node_with_child</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> root <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":611,"column":1,"offset":16814},"end":{"line":634,"column":4,"offset":17429}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you consider the following examples, it should be clear why erasing a red leaf is never a problem or a node with one child.","position":{"start":{"line":636,"column":1,"offset":17431},"end":{"line":636,"column":127,"offset":17557}}}],"position":{"start":{"line":636,"column":1,"offset":17431},"end":{"line":636,"column":127,"offset":17557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The tree_operations has a -q feature which is less verbose (you don't get the menu or the list of operations that lead to a successful red-black tree structure).","position":{"start":{"line":638,"column":1,"offset":17559},"end":{"line":638,"column":162,"offset":17720}}}],"position":{"start":{"line":638,"column":1,"offset":17559},"end":{"line":638,"column":162,"offset":17720}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span>\n\ne A\nB1\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red black tree.\n\ne C\nB1\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":640,"column":1,"offset":17722},"end":{"line":659,"column":4,"offset":17907}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span>\n\ne A\nB1\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red black tree.\n\ne B\nC1\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":661,"column":1,"offset":17909},"end":{"line":680,"column":4,"offset":18094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The case where fixing the color is important is shown below.  A has no children and is black.","position":{"start":{"line":682,"column":1,"offset":18096},"end":{"line":682,"column":94,"offset":18189}}}],"position":{"start":{"line":682,"column":1,"offset":18096},"end":{"line":682,"column":94,"offset":18189}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABCD\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nA2 C2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span>\n\ne A\nB1\n  <span class=\"token punctuation\">\\</span>\n   C2\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>D2<span class=\"token punctuation\">)</span>\n\nB1 has one right child, and it isn't red</code></pre></div>","position":{"start":{"line":683,"column":1,"offset":18190},"end":{"line":699,"column":4,"offset":18344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The rest of the erase method is to consider cases where the node being erased has two children.  If the successor is to the right (it doesn't have any left children), it will replace the node to erase as usual.  If the successor has a right child, then its child color will change to black (from red).  We can be assured that the successor's right child is red because it is an only child.","position":{"start":{"line":701,"column":1,"offset":18346},"end":{"line":701,"column":390,"offset":18735}}}],"position":{"start":{"line":701,"column":1,"offset":18346},"end":{"line":701,"column":390,"offset":18735}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>successor <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>successor<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t color <span class=\"token operator\">=</span> successor<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">replace_node_with_child</span><span class=\"token punctuation\">(</span>successor<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    successor<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n    successor<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> successor<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>successor<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span>\n      successor<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>successor<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":703,"column":1,"offset":18737},"end":{"line":718,"column":4,"offset":19138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<b>","position":{"start":{"line":720,"column":1,"offset":19140},"end":{"line":720,"column":4,"offset":19143}}},{"type":"text","value":"An example where the successor has a right node:","position":{"start":{"line":720,"column":4,"offset":19143},"end":{"line":720,"column":52,"offset":19191}}},{"type":"raw","value":"</b>","position":{"start":{"line":720,"column":52,"offset":19191},"end":{"line":720,"column":56,"offset":19195}}},{"type":"text","value":"  erasing F, G becomes successor, G has right child H.  ","position":{"start":{"line":720,"column":56,"offset":19195},"end":{"line":720,"column":112,"offset":19251}}}],"position":{"start":{"line":720,"column":1,"offset":19140},"end":{"line":720,"column":112,"offset":19251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Move G into F's spot.","position":{"start":{"line":722,"column":3,"offset":19255},"end":{"line":722,"column":24,"offset":19276}}}],"position":{"start":{"line":722,"column":1,"offset":19253},"end":{"line":722,"column":24,"offset":19276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"color G's right (H) black","position":{"start":{"line":723,"column":3,"offset":19279},"end":{"line":723,"column":28,"offset":19304}}}],"position":{"start":{"line":723,"column":1,"offset":19277},"end":{"line":723,"column":28,"offset":19304}}},{"type":"text","value":"\n"}],"position":{"start":{"line":722,"column":1,"offset":19253},"end":{"line":723,"column":28,"offset":19304}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABCDEFGH\nD1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>F1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E2   G2\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">(</span>H2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>          \nA2   C2\n\ne F\nD1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>G1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E2 <span class=\"token punctuation\">(</span>H1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>         \n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nA2   C2\n\n<span class=\"token punctuation\">(</span>G1<span class=\"token punctuation\">)</span> has a red right child and is red\n<span class=\"token punctuation\">(</span>H1<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>H1<span class=\"token punctuation\">)</span> has a different black height than A2\n\nb H\nD1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>G1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E2   H2\n<span class=\"token operator\">|</span>         \n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nA2   C2\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":725,"column":1,"offset":19306},"end":{"line":764,"column":4,"offset":19736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<b>","position":{"start":{"line":766,"column":1,"offset":19738},"end":{"line":766,"column":4,"offset":19741}}},{"type":"text","value":"An example where the successor is black:","position":{"start":{"line":766,"column":4,"offset":19741},"end":{"line":766,"column":44,"offset":19781}}},{"type":"raw","value":"</b>","position":{"start":{"line":766,"column":44,"offset":19781},"end":{"line":766,"column":48,"offset":19785}}},{"type":"text","value":" In this case, B is erased, C is the successor and is black.  C is colored the color of B.  The tree becomes invalid because C has a single black child (single children must be red).  The color must be fixed.","position":{"start":{"line":766,"column":48,"offset":19785},"end":{"line":766,"column":256,"offset":19993}}}],"position":{"start":{"line":766,"column":1,"offset":19738},"end":{"line":766,"column":256,"offset":19993}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABCDEFGH\nD1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>F1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E2   G2\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">(</span>B1<span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">(</span>H2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>          \nA2   C2\n\ne B\nD1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>F1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  E2   G2\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">\\</span>\n<span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>       <span class=\"token punctuation\">(</span>H2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>              \nA2\n\n<span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span> has one left child and it isn't red</code></pre></div>","position":{"start":{"line":768,"column":1,"offset":19995},"end":{"line":792,"column":4,"offset":20260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, an example where the successor is red.","position":{"start":{"line":794,"column":1,"offset":20262},"end":{"line":794,"column":48,"offset":20309}}}],"position":{"start":{"line":794,"column":1,"offset":20262},"end":{"line":794,"column":48,"offset":20309}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ABC\nB1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>C1<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>      \n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span>\n\ne B\nC1\n<span class=\"token operator\">|</span>\n<span class=\"token punctuation\">(</span>A1<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":795,"column":1,"offset":20310},"end":{"line":809,"column":4,"offset":20439}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the successor is to the left of the node to the right of the node to erase, then the normal erasing happens.  If the successor has a child, it would be right and red (because it would be the only child).  In this case, we replace the node that is going to be erased with both the successor and the successor that has the right child of the successor (in both cases, exchanging colors).  The node to the right of the successor will change to black because the successor started as black (because it only had one red child).","position":{"start":{"line":811,"column":1,"offset":20441},"end":{"line":811,"column":526,"offset":20966}}}],"position":{"start":{"line":811,"column":1,"offset":20441},"end":{"line":811,"column":526,"offset":20966}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>successor<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span>\n        successor <span class=\"token operator\">=</span> successor<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n\n      size_t color <span class=\"token operator\">=</span> successor<span class=\"token operator\">-></span>color<span class=\"token punctuation\">;</span>\n      node_t <span class=\"token operator\">*</span>right <span class=\"token operator\">=</span> successor<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n      node_t <span class=\"token operator\">*</span>parent <span class=\"token operator\">=</span> successor<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span>\n      parent<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n        right<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n        color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">replace_node_with_child</span><span class=\"token punctuation\">(</span>successor<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      successor<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n      successor<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> successor<span class=\"token punctuation\">;</span>\n      successor<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n      successor<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> successor<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":813,"column":1,"offset":20968},"end":{"line":839,"column":4,"offset":21629}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example below H is erased and replaced with its successor (I).  I has a right child M which becomes a child of N and is colored black.","position":{"start":{"line":841,"column":1,"offset":21631},"end":{"line":841,"column":142,"offset":21772}}}],"position":{"start":{"line":841,"column":1,"offset":21631},"end":{"line":841,"column":142,"offset":21772}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ACBFHEGPNIONM\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    I3   P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>     <span class=\"token punctuation\">\\</span>  <span class=\"token operator\">|</span>\nA3 C3    <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>   <span class=\"token operator\">|</span>     \n      <span class=\"token operator\">|</span>  <span class=\"token punctuation\">(</span>M3<span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">|</span>      \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\ne H\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  I2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    <span class=\"token punctuation\">(</span>M2<span class=\"token punctuation\">)</span> P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>        <span class=\"token operator\">|</span>\nA3 C3      <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>         \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>M2<span class=\"token punctuation\">)</span> has a red parent and is red\n<span class=\"token punctuation\">(</span>M2<span class=\"token punctuation\">)</span> has a different black height than A3\n<span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span> has a red left child and is red\n\nb M\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  I2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    M3   P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>        <span class=\"token operator\">|</span>\nA3 C3      <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>         \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":843,"column":1,"offset":21774},"end":{"line":890,"column":4,"offset":22360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example below, H is erased (which is black) and replaced with I, which doesn't have a child.  The color must be fixed.","position":{"start":{"line":892,"column":1,"offset":22362},"end":{"line":892,"column":126,"offset":22487}}}],"position":{"start":{"line":892,"column":1,"offset":22362},"end":{"line":892,"column":126,"offset":22487}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ACBFHEGPNION\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    I3   P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>        <span class=\"token operator\">|</span>\nA3 C3      <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>         \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\ne H\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  I2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>         <span class=\"token punctuation\">\\</span>\nB2         P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>        <span class=\"token operator\">|</span>\nA3 C3      <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>         \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span> has one right child and it isn't red</code></pre></div>","position":{"start":{"line":894,"column":1,"offset":22489},"end":{"line":922,"column":4,"offset":22816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example below, N is erased (which is red) and replaced with O, which doesn't have a right child.  Because N is red, O will be red, and the overall tree height will be maintained.  The red black tree properties remain valid.","position":{"start":{"line":924,"column":1,"offset":22818},"end":{"line":924,"column":231,"offset":23048}}}],"position":{"start":{"line":924,"column":1,"offset":22818},"end":{"line":924,"column":231,"offset":23048}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q ACBFHEGPNION\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>N2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    I3   P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>        <span class=\"token operator\">|</span>\nA3 C3      <span class=\"token punctuation\">(</span>O3<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">\\</span>         \n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\ne N\nF1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  H2\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  G3 <span class=\"token punctuation\">(</span>O2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>     <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\nB2    I3   P3\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>          \nA3 C3\n     <span class=\"token punctuation\">\\</span>\n      <span class=\"token punctuation\">(</span>E3<span class=\"token punctuation\">)</span>\n\nThe above tree is a valid red black tree</code></pre></div>","position":{"start":{"line":925,"column":1,"offset":23049},"end":{"line":953,"column":4,"offset":23357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"quick-recap-of-when-tree-becomes-invalid"},"children":[{"type":"element","tagName":"a","properties":{"href":"#quick-recap-of-when-tree-becomes-invalid","aria-label":"quick recap of when tree becomes invalid permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Quick recap of when tree becomes invalid","position":{"start":{"line":955,"column":4,"offset":23362},"end":{"line":955,"column":44,"offset":23402}}}],"position":{"start":{"line":955,"column":1,"offset":23359},"end":{"line":955,"column":44,"offset":23402}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The node to erase has no children, is black, and has a parent.  The node's parent is invalid.","position":{"start":{"line":956,"column":3,"offset":23405},"end":{"line":956,"column":96,"offset":23498}}}],"position":{"start":{"line":956,"column":1,"offset":23403},"end":{"line":956,"column":96,"offset":23498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The node to erase has two children, the successor was originally black, and the successor did not have a right child.  The successor's original parent is invalid (this is the successor itself when the successor is to the right of the node","position":{"start":{"line":957,"column":3,"offset":23501},"end":{"line":957,"column":241,"offset":23739}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":957,"column":242,"offset":23740},"end":{"line":957,"column":244,"offset":23742}}}],"position":{"start":{"line":957,"column":241,"offset":23739},"end":{"line":957,"column":245,"offset":23743}}},{"type":"text","value":"erase since it replaced its parent).","position":{"start":{"line":957,"column":245,"offset":23743},"end":{"line":957,"column":281,"offset":23779}}}],"position":{"start":{"line":957,"column":1,"offset":23499},"end":{"line":957,"column":281,"offset":23779}}},{"type":"text","value":"\n"}],"position":{"start":{"line":956,"column":1,"offset":23403},"end":{"line":957,"column":281,"offset":23779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's worth noting that when you erase a node and use a successor, that you are erasing the successor and putting it in place of the node to erase.  That's why in the first case, the parent of the node to erase is used, and in the second case, the parent of the successor is used.","position":{"start":{"line":959,"column":1,"offset":23781},"end":{"line":959,"column":280,"offset":24060}}}],"position":{"start":{"line":959,"column":1,"offset":23781},"end":{"line":959,"column":280,"offset":24060}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"fixcolorfor_erase"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fixcolorfor_erase","aria-label":"fixcolorfor_erase permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"fix","position":{"start":{"line":961,"column":4,"offset":24065},"end":{"line":961,"column":7,"offset":24068}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"color","position":{"start":{"line":961,"column":8,"offset":24069},"end":{"line":961,"column":13,"offset":24074}}}],"position":{"start":{"line":961,"column":7,"offset":24068},"end":{"line":961,"column":14,"offset":24075}}},{"type":"text","value":"for_erase","position":{"start":{"line":961,"column":14,"offset":24075},"end":{"line":961,"column":23,"offset":24084}}}],"position":{"start":{"line":961,"column":1,"offset":24062},"end":{"line":961,"column":23,"offset":24084}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>sibling<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          sibling<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n              <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n              parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sibling<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          sibling<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n              <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span>\n              parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      sibling<span class=\"token operator\">-></span>left<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span>\n        parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":963,"column":1,"offset":24086},"end":{"line":1053,"column":4,"offset":26605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The fix","position":{"start":{"line":1055,"column":1,"offset":26607},"end":{"line":1055,"column":8,"offset":26614}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"color","position":{"start":{"line":1055,"column":9,"offset":26615},"end":{"line":1055,"column":14,"offset":26620}}}],"position":{"start":{"line":1055,"column":8,"offset":26614},"end":{"line":1055,"column":15,"offset":26621}}},{"type":"text","value":"for_erase function is large but can split into sections that largely mirror each other.","position":{"start":{"line":1055,"column":15,"offset":26621},"end":{"line":1055,"column":102,"offset":26708}}}],"position":{"start":{"line":1055,"column":1,"offset":26607},"end":{"line":1055,"column":102,"offset":26708}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>node<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>sibling<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>right <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1057,"column":1,"offset":26710},"end":{"line":1069,"column":4,"offset":26938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The only difference between the if and the else statement is that every left and right are swapped.  The rest of the explanation will focus on where the sibling is on the right.","position":{"start":{"line":1071,"column":1,"offset":26940},"end":{"line":1071,"column":178,"offset":27117}}}],"position":{"start":{"line":1071,"column":1,"offset":26940},"end":{"line":1071,"column":178,"offset":27117}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The insert color fixing method of the red black tree uses the uncle's color to help decide actions.  The erase color fixing method uses the sibling.  If the sibling is red, we can rotate away from the sibling around the parent and set the sibling to be the parent's right node.","position":{"start":{"line":1073,"column":1,"offset":27119},"end":{"line":1073,"column":278,"offset":27396}}}],"position":{"start":{"line":1073,"column":1,"offset":27119},"end":{"line":1073,"column":278,"offset":27396}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sibling <span class=\"token operator\">=</span> parent<span class=\"token operator\">-></span>right<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1075,"column":1,"offset":27398},"end":{"line":1080,"column":4,"offset":27492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the example below, erase A, the sibling is O (which is red), and the parent is E:","position":{"start":{"line":1083,"column":1,"offset":27495},"end":{"line":1083,"column":85,"offset":27579}}}],"position":{"start":{"line":1083,"column":1,"offset":27495},"end":{"line":1083,"column":85,"offset":27579}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token variable\">$ac</span>/bin/tree_operations -q AEIOUY\nE1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\nA2 <span class=\"token punctuation\">(</span>O1<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n   I2   U2\n          <span class=\"token punctuation\">\\</span>\n           <span class=\"token punctuation\">(</span>Y2<span class=\"token punctuation\">)</span>\n\ne A\nE1\n  <span class=\"token punctuation\">\\</span>\n   <span class=\"token punctuation\">(</span>O1<span class=\"token punctuation\">)</span>\n   <span class=\"token operator\">|</span>   <span class=\"token punctuation\">\\</span>\n   I2   U2\n          <span class=\"token punctuation\">\\</span>\n           <span class=\"token punctuation\">(</span>Y2<span class=\"token punctuation\">)</span>\n\nE1 has a NULL left child with a different black height than I2\n\nl E\nO1\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>  U2\n<span class=\"token operator\">|</span>    <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span>     <span class=\"token punctuation\">(</span>Y2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>         \n<span class=\"token punctuation\">(</span>E1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">\\</span>\n     I2\n\n<span class=\"token punctuation\">(</span>E1<span class=\"token punctuation\">)</span> has a NULL left child with a different black height than I2\n<span class=\"token punctuation\">(</span>E1<span class=\"token punctuation\">)</span> has one right child and it isn't red</code></pre></div>","position":{"start":{"line":1084,"column":1,"offset":27580},"end":{"line":1118,"column":4,"offset":27996}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After the rotation, E becomes red, and I becomes the sibling that is black.  ","position":{"start":{"line":1120,"column":1,"offset":27998},"end":{"line":1120,"column":78,"offset":28075}}}],"position":{"start":{"line":1120,"column":1,"offset":27998},"end":{"line":1120,"column":78,"offset":28075}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To recap: if the sibling is red, rotate away from the sibling and set the sibling to be equal to what is on the same side of the parent again.  The sibling will be black, and we can proceed with the cases which expect the sibling to be black.","position":{"start":{"line":1122,"column":1,"offset":28077},"end":{"line":1122,"column":243,"offset":28319}}}],"position":{"start":{"line":1122,"column":1,"offset":28077},"end":{"line":1122,"column":243,"offset":28319}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>right <span class=\"token operator\">&amp;&amp;</span> sibling<span class=\"token operator\">-></span>right <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  sibling<span class=\"token operator\">-></span>right<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sibling<span class=\"token operator\">-></span>left <span class=\"token operator\">&amp;&amp;</span> sibling<span class=\"token operator\">-></span>left <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">rotate_right</span><span class=\"token punctuation\">(</span>sibling<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">rotate_left</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  sibling<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">fix_color_for_erase</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    parent<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1124,"column":1,"offset":28321},"end":{"line":1141,"column":4,"offset":28751}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<b>","position":{"start":{"line":1143,"column":1,"offset":28753},"end":{"line":1143,"column":4,"offset":28756}}},{"type":"text","value":"If the sibling is to the right and is black:","position":{"start":{"line":1143,"column":4,"offset":28756},"end":{"line":1143,"column":48,"offset":28800}}},{"type":"raw","value":"</b>","position":{"start":{"line":1143,"column":48,"offset":28800},"end":{"line":1143,"column":52,"offset":28804}}}],"position":{"start":{"line":1143,"column":1,"offset":28753},"end":{"line":1143,"column":52,"offset":28804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"First, check to see if the sibling's right child is red.  If it is, color it black and rotate left around the parent.","position":{"start":{"line":1145,"column":1,"offset":28806},"end":{"line":1145,"column":118,"offset":28923}}}],"position":{"start":{"line":1145,"column":1,"offset":28806},"end":{"line":1145,"column":118,"offset":28923}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">EXAMPLE</code></pre></div>","position":{"start":{"line":1147,"column":1,"offset":28925},"end":{"line":1149,"column":4,"offset":28944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If not, check if the sibling's left child is red.  If it is, rotate right around the sibling, then left around the parent.  Finally, color the sibling black (the rotations will have changed the sibling's color).","position":{"start":{"line":1151,"column":1,"offset":28946},"end":{"line":1151,"column":212,"offset":29157}}}],"position":{"start":{"line":1151,"column":1,"offset":28946},"end":{"line":1151,"column":212,"offset":29157}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">EXAMPLE</code></pre></div>","position":{"start":{"line":1153,"column":1,"offset":29159},"end":{"line":1155,"column":4,"offset":29178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, if neither of the sibling's children are red, color the sibling red.  If the parent is red or is the root, color the parent black.  Otherwise, fix the color for the parent's parent and set the node to pair up with a sibling to be the parent.","position":{"start":{"line":1157,"column":1,"offset":29180},"end":{"line":1157,"column":251,"offset":29430}}}],"position":{"start":{"line":1157,"column":1,"offset":29180},"end":{"line":1157,"column":251,"offset":29430}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">EXAMPLE</code></pre></div>","position":{"start":{"line":1159,"column":1,"offset":29432},"end":{"line":1161,"column":4,"offset":29451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"packing-color-into-the-parent-node"},"children":[{"type":"element","tagName":"a","properties":{"href":"#packing-color-into-the-parent-node","aria-label":"packing color into the parent node permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Packing color into the parent node","position":{"start":{"line":1163,"column":4,"offset":29456},"end":{"line":1163,"column":38,"offset":29490}}}],"position":{"start":{"line":1163,"column":1,"offset":29453},"end":{"line":1163,"column":38,"offset":29490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code for this section is found in ","position":{"start":{"line":1165,"column":1,"offset":29492},"end":{"line":1165,"column":39,"offset":29530}}},{"type":"raw","value":"<i>","position":{"start":{"line":1165,"column":39,"offset":29530},"end":{"line":1165,"column":42,"offset":29533}}},{"type":"text","value":"illustrations/12","position":{"start":{"line":1165,"column":42,"offset":29533},"end":{"line":1165,"column":58,"offset":29549}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"red","position":{"start":{"line":1165,"column":59,"offset":29550},"end":{"line":1165,"column":62,"offset":29553}}}],"position":{"start":{"line":1165,"column":58,"offset":29549},"end":{"line":1165,"column":63,"offset":29554}}},{"type":"text","value":"black","position":{"start":{"line":1165,"column":63,"offset":29554},"end":{"line":1165,"column":68,"offset":29559}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"tree/2","position":{"start":{"line":1165,"column":69,"offset":29560},"end":{"line":1165,"column":75,"offset":29566}}}],"position":{"start":{"line":1165,"column":68,"offset":29559},"end":{"line":1165,"column":76,"offset":29567}}},{"type":"text","value":"red","position":{"start":{"line":1165,"column":76,"offset":29567},"end":{"line":1165,"column":79,"offset":29570}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":1165,"column":80,"offset":29571},"end":{"line":1165,"column":85,"offset":29576}}}],"position":{"start":{"line":1165,"column":79,"offset":29570},"end":{"line":1165,"column":86,"offset":29577}}},{"type":"text","value":"tree","position":{"start":{"line":1165,"column":86,"offset":29577},"end":{"line":1165,"column":90,"offset":29581}}},{"type":"raw","value":"</i>","position":{"start":{"line":1165,"column":90,"offset":29581},"end":{"line":1165,"column":94,"offset":29585}}}],"position":{"start":{"line":1165,"column":1,"offset":29492},"end":{"line":1165,"column":94,"offset":29585}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/12_red_black_tree/2_red_black_tree\n<span class=\"token function\">make</span></code></pre></div>","position":{"start":{"line":1166,"column":1,"offset":29586},"end":{"line":1169,"column":4,"offset":29658}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The red","position":{"start":{"line":1171,"column":1,"offset":29660},"end":{"line":1171,"column":8,"offset":29667}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"black","position":{"start":{"line":1171,"column":9,"offset":29668},"end":{"line":1171,"column":14,"offset":29673}}}],"position":{"start":{"line":1171,"column":8,"offset":29667},"end":{"line":1171,"column":15,"offset":29674}}},{"type":"text","value":"tree code above used the following node data structure.","position":{"start":{"line":1171,"column":15,"offset":29674},"end":{"line":1171,"column":70,"offset":29729}}}],"position":{"start":{"line":1171,"column":1,"offset":29660},"end":{"line":1171,"column":70,"offset":29729}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  size_t color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1173,"column":1,"offset":29731},"end":{"line":1181,"column":4,"offset":29858}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This requires 8 bytes (on a 64-bit machine) for the color and 8 bytes for the parent.  Since pointers to structures are typically aligned, we can use the 0 bit of the parent for the color and save 8 bytes per node structure.  Our new structure will look like.","position":{"start":{"line":1183,"column":1,"offset":29860},"end":{"line":1183,"column":260,"offset":30119}}}],"position":{"start":{"line":1183,"column":1,"offset":29860},"end":{"line":1183,"column":260,"offset":30119}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  size_t parent_color<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1185,"column":1,"offset":30121},"end":{"line":1192,"column":4,"offset":30230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can then use the following #define macros to access and set the parent node and the color.","position":{"start":{"line":1194,"column":1,"offset":30232},"end":{"line":1194,"column":94,"offset":30325}}}],"position":{"start":{"line":1194,"column":1,"offset":30232},"end":{"line":1194,"column":94,"offset":30325}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_color(n) ((n)->parent_color &amp; 1)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_is_red(n) (((n)->parent_color &amp; 1) == 0)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_is_black(n) (((n)->parent_color &amp; 1) == 1)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_parent(n) (node_t *)((n)->parent_color - ((n)->parent_color &amp; 1))</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_set_black(n) (n)->parent_color |= 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_set_red(n) (n)->parent_color -= ((n)->parent_color &amp; 1)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_set_parent(n, parent) (n)->parent_color = ((n)->parent_color &amp; 1) + (size_t)(parent)</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rb_clear_black(n) (n)->parent_color = 1</span></code></pre></div>","position":{"start":{"line":1196,"column":1,"offset":30327},"end":{"line":1207,"column":4,"offset":30822}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The rest of the change involves converting code, which accesses the parent pointer or the color to one of these macros.  You can run the following command to find all of the diffs.  I'll show a few.","position":{"start":{"line":1209,"column":1,"offset":30824},"end":{"line":1209,"column":199,"offset":31022}}}],"position":{"start":{"line":1209,"column":1,"offset":30824},"end":{"line":1209,"column":199,"offset":31022}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">diff</span> red_black_tree.c <span class=\"token punctuation\">..</span>/1_red_black_tree/red_black_tree.c <span class=\"token operator\">|</span> <span class=\"token function\">less</span></code></pre></div>","position":{"start":{"line":1211,"column":1,"offset":31024},"end":{"line":1213,"column":4,"offset":31101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rb_parent","position":{"start":{"line":1215,"column":1,"offset":31103},"end":{"line":1215,"column":10,"offset":31112}}}],"position":{"start":{"line":1215,"column":1,"offset":31103},"end":{"line":1215,"column":10,"offset":31112}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1216,"column":1,"offset":31113},"end":{"line":1218,"column":4,"offset":31136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"becomes","position":{"start":{"line":1219,"column":1,"offset":31137},"end":{"line":1219,"column":8,"offset":31144}}}],"position":{"start":{"line":1219,"column":1,"offset":31137},"end":{"line":1219,"column":8,"offset":31144}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">n <span class=\"token operator\">=</span> <span class=\"token function\">rb_parent</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1220,"column":1,"offset":31145},"end":{"line":1222,"column":4,"offset":31171}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br/>\n<br/>","position":{"start":{"line":1223,"column":1,"offset":31172},"end":{"line":1224,"column":6,"offset":31183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rb","position":{"start":{"line":1226,"column":1,"offset":31185},"end":{"line":1226,"column":3,"offset":31187}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"set","position":{"start":{"line":1226,"column":4,"offset":31188},"end":{"line":1226,"column":7,"offset":31191}}}],"position":{"start":{"line":1226,"column":3,"offset":31187},"end":{"line":1226,"column":8,"offset":31192}}},{"type":"text","value":"red","position":{"start":{"line":1226,"column":8,"offset":31192},"end":{"line":1226,"column":11,"offset":31195}}}],"position":{"start":{"line":1226,"column":1,"offset":31185},"end":{"line":1226,"column":11,"offset":31195}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">n<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1227,"column":1,"offset":31196},"end":{"line":1229,"column":4,"offset":31220}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"becomes","position":{"start":{"line":1230,"column":1,"offset":31221},"end":{"line":1230,"column":8,"offset":31228}}}],"position":{"start":{"line":1230,"column":1,"offset":31221},"end":{"line":1230,"column":8,"offset":31228}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">rb_set_red</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1231,"column":1,"offset":31229},"end":{"line":1233,"column":4,"offset":31252}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br/>\n<br/>","position":{"start":{"line":1234,"column":1,"offset":31253},"end":{"line":1235,"column":6,"offset":31264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rb","position":{"start":{"line":1237,"column":1,"offset":31266},"end":{"line":1237,"column":3,"offset":31268}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"is","position":{"start":{"line":1237,"column":4,"offset":31269},"end":{"line":1237,"column":6,"offset":31271}}}],"position":{"start":{"line":1237,"column":3,"offset":31268},"end":{"line":1237,"column":7,"offset":31272}}},{"type":"text","value":"red","position":{"start":{"line":1237,"column":7,"offset":31272},"end":{"line":1237,"column":10,"offset":31275}}}],"position":{"start":{"line":1237,"column":1,"offset":31266},"end":{"line":1237,"column":10,"offset":31275}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":1238,"column":1,"offset":31276},"end":{"line":1240,"column":4,"offset":31304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"becomes","position":{"start":{"line":1241,"column":1,"offset":31305},"end":{"line":1241,"column":8,"offset":31312}}}],"position":{"start":{"line":1241,"column":1,"offset":31305},"end":{"line":1241,"column":8,"offset":31312}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">rb_is_red</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":1242,"column":1,"offset":31313},"end":{"line":1244,"column":4,"offset":31338}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br/>\n<br/>","position":{"start":{"line":1245,"column":1,"offset":31339},"end":{"line":1246,"column":6,"offset":31350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"rb","position":{"start":{"line":1248,"column":1,"offset":31352},"end":{"line":1248,"column":3,"offset":31354}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"clear","position":{"start":{"line":1248,"column":4,"offset":31355},"end":{"line":1248,"column":9,"offset":31360}}}],"position":{"start":{"line":1248,"column":3,"offset":31354},"end":{"line":1248,"column":10,"offset":31361}}},{"type":"text","value":"black","position":{"start":{"line":1248,"column":10,"offset":31361},"end":{"line":1248,"column":15,"offset":31366}}}],"position":{"start":{"line":1248,"column":1,"offset":31352},"end":{"line":1248,"column":15,"offset":31366}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">n<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\nn<span class=\"token operator\">-></span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1249,"column":1,"offset":31367},"end":{"line":1252,"column":4,"offset":31411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"becomes","position":{"start":{"line":1253,"column":1,"offset":31412},"end":{"line":1253,"column":8,"offset":31419}}}],"position":{"start":{"line":1253,"column":1,"offset":31412},"end":{"line":1253,"column":8,"offset":31419}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">rb_clear_black</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1254,"column":1,"offset":31420},"end":{"line":1256,"column":4,"offset":31447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"and so on.","position":{"start":{"line":1258,"column":1,"offset":31449},"end":{"line":1258,"column":11,"offset":31459}}}],"position":{"start":{"line":1258,"column":1,"offset":31449},"end":{"line":1258,"column":11,"offset":31459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"../README.md"},"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":1261,"column":2,"offset":31463},"end":{"line":1261,"column":19,"offset":31480}}}],"position":{"start":{"line":1261,"column":1,"offset":31462},"end":{"line":1261,"column":34,"offset":31495}}},{"type":"text","value":"  - Copyright 2019 Andy Curtis","position":{"start":{"line":1261,"column":34,"offset":31495},"end":{"line":1261,"column":64,"offset":31525}}}],"position":{"start":{"line":1261,"column":1,"offset":31462},"end":{"line":1261,"column":64,"offset":31525}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1262,"column":1,"offset":31526}}}}