{"expireTime":9007200828330009000,"key":"transformer-remark-markdown-ast-cab06118332510097fc7bd64e171bfe6-gatsby-remark-prismjsgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Copyright 2019 Andy Curtis & Daniel Curtis","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#the-global-allocator-object","title":null,"children":[],"data":{"hProperties":{"aria-label":"the global allocator object permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"The Global Allocator Object","position":{"start":{"line":4,"column":3,"offset":47},"end":{"line":4,"column":30,"offset":74},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":45},"end":{"line":4,"column":30,"offset":74},"indent":[]},"data":{"id":"the-global-allocator-object","htmlAttributes":{"id":"the-global-allocator-object"},"hProperties":{"id":"the-global-allocator-object"}}},{"type":"paragraph","children":[{"type":"text","value":"A quick note about C allocation methods:","position":{"start":{"line":6,"column":1,"offset":76},"end":{"line":6,"column":41,"offset":116},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":76},"end":{"line":6,"column":41,"offset":116},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In C, there are five basic functions for allocating memory (technically there are more, but they are rarely used).","position":{"start":{"line":8,"column":1,"offset":118},"end":{"line":8,"column":115,"offset":232},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":118},"end":{"line":8,"column":115,"offset":232},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":9,"column":1,"offset":233},"end":{"line":15,"column":4,"offset":384},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The middle three functions essentially work as follows (although the internal implementation is more complex for performance reasons).","position":{"start":{"line":17,"column":1,"offset":386},"end":{"line":17,"column":135,"offset":520},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":386},"end":{"line":17,"column":135,"offset":520},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t old_len <span class=\"token operator\">=</span> <span class=\"token function\">extract_length</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// details of this function depend upon how malloc is implemented</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> old_len<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> old_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":18,"column":1,"offset":521},"end":{"line":42,"column":4,"offset":1046},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It's important to realize that malloc (memory alloc) is the core behind all of these functions or at a minimum, they are derivates of malloc.","position":{"start":{"line":44,"column":1,"offset":1048},"end":{"line":44,"column":142,"offset":1189},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":1048},"end":{"line":44,"column":142,"offset":1189},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One of the reasons that people tend to steer clear of C is because you must maintain pointers to memory that you allocate so that it can later be freed.  In the last chapter, I introduced doubly-linked lists.  We can implement a way of tracking allocations using a doubly-linked list.  The functions that we will implement are the ones defined above - so the interface will be pretty straight forward.  To prevent naming conflicts, we will use the ac prefix.","position":{"start":{"line":46,"column":1,"offset":1191},"end":{"line":46,"column":459,"offset":1649},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1191},"end":{"line":46,"column":459,"offset":1649},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _ac_allocator_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _ac_allocator_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_calloc</span><span class=\"token punctuation\">(</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":48,"column":1,"offset":1651},"end":{"line":61,"column":4,"offset":1886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You may notice that I don't use two parameters for ac_calloc.  This is intentional as I don't see a benefit in changing the signature from malloc.  ","position":{"start":{"line":63,"column":1,"offset":1888},"end":{"line":63,"column":149,"offset":2036},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1888},"end":{"line":63,"column":149,"offset":2036},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We could redefine our interface as","position":{"start":{"line":65,"column":1,"offset":2038},"end":{"line":65,"column":35,"offset":2072},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2038},"end":{"line":65,"column":35,"offset":2072},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _ac_allocator_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _ac_allocator_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span> </span><span class=\"token comment\">/* for size_t */</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_calloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ac_strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":67,"column":1,"offset":2074},"end":{"line":80,"column":4,"offset":2473},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then call our functions like this.","position":{"start":{"line":82,"column":1,"offset":2475},"end":{"line":82,"column":39,"offset":2513},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2475},"end":{"line":82,"column":39,"offset":2513},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"sample.c (this won't work - because I'm not building the object this way in the end)","position":{"start":{"line":84,"column":1,"offset":2515},"end":{"line":84,"column":85,"offset":2599},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2515},"end":{"line":84,"column":85,"offset":2599},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ac_free</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">__LINE__</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":85,"column":1,"offset":2600},"end":{"line":93,"column":4,"offset":2776},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is a pattern above in that every time we call ac_malloc (and others), we would call it with ","position":{"start":{"line":95,"column":1,"offset":2778},"end":{"line":95,"column":99,"offset":2876},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"FILE","position":{"start":{"line":95,"column":101,"offset":2878},"end":{"line":95,"column":105,"offset":2882},"indent":[]}}],"position":{"start":{"line":95,"column":99,"offset":2876},"end":{"line":95,"column":107,"offset":2884},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":95,"column":107,"offset":2884},"end":{"line":95,"column":109,"offset":2886},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"LINE","position":{"start":{"line":95,"column":111,"offset":2888},"end":{"line":95,"column":115,"offset":2892},"indent":[]}}],"position":{"start":{"line":95,"column":109,"offset":2886},"end":{"line":95,"column":117,"offset":2894},"indent":[]}},{"type":"text","value":", as the first two parameters.  ","position":{"start":{"line":95,"column":117,"offset":2894},"end":{"line":95,"column":149,"offset":2926},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2778},"end":{"line":95,"column":149,"offset":2926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In creating the global allocator, maybe we only want line numbers and malloc to be passed in when the software is defined as being in debug mode.  To define ac_malloc, we might want to do the following.  Considering that we have just identified how to merge the ","position":{"start":{"line":97,"column":1,"offset":2928},"end":{"line":97,"column":263,"offset":3190},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"FILE","position":{"start":{"line":97,"column":265,"offset":3192},"end":{"line":97,"column":269,"offset":3196},"indent":[]}}],"position":{"start":{"line":97,"column":263,"offset":3190},"end":{"line":97,"column":271,"offset":3198},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":97,"column":271,"offset":3198},"end":{"line":97,"column":276,"offset":3203},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"LINE","position":{"start":{"line":97,"column":278,"offset":3205},"end":{"line":97,"column":282,"offset":3209},"indent":[]}}],"position":{"start":{"line":97,"column":276,"offset":3203},"end":{"line":97,"column":284,"offset":3211},"indent":[]}},{"type":"text","value":", we will use that.","position":{"start":{"line":97,"column":284,"offset":3211},"end":{"line":97,"column":303,"offset":3230},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2928},"end":{"line":97,"column":303,"offset":3230},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) _ac_malloc_d(__AC_FILE_LINE__, len)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) malloc(len)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":99,"column":1,"offset":3232},"end":{"line":107,"column":4,"offset":3427},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When defining functions this way, it is good to come up with a convention.  My convention is to use an underscore before the function and to suffix the debug function with _d.  In defining the final interface, I came up with a few additional features.  The first is based upon the idea that the allocator will use an internal object to represent its structure.  That object will be global, and all of the allocation functions will have to pass a pointer to the object.","position":{"start":{"line":109,"column":1,"offset":3429},"end":{"line":109,"column":469,"offset":3897},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3429},"end":{"line":109,"column":469,"offset":3897},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":111,"column":1,"offset":3899},"end":{"line":113,"column":4,"offset":3961},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":115,"column":1,"offset":3963},"end":{"line":115,"column":8,"offset":3970},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3963},"end":{"line":115,"column":8,"offset":3970},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span> ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":116,"column":1,"offset":3971},"end":{"line":118,"column":4,"offset":4052},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The macro changes to.","position":{"start":{"line":120,"column":1,"offset":4054},"end":{"line":120,"column":22,"offset":4075},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":4054},"end":{"line":120,"column":22,"offset":4075},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) _ac_malloc_d(NULL, __AC_FILE_LINE__, len)</span></code></pre></div>","position":{"start":{"line":121,"column":1,"offset":4076},"end":{"line":123,"column":4,"offset":4149},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A NULL allocator simply means to use the global allocator.","position":{"start":{"line":125,"column":1,"offset":4151},"end":{"line":125,"column":59,"offset":4209},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":4151},"end":{"line":125,"column":59,"offset":4209},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The second feature is to allow for a mechanism to allow for custom content in place of the caller.  For example, if we allocate a buffer and keep changing its size, we might want to know the following: where the buffer was initialized, the maximum size of the buffer, its initial size, etc. Passing a boolean at the end denotes this custom feature, which defaults to false.","position":{"start":{"line":127,"column":1,"offset":4211},"end":{"line":127,"column":374,"offset":4584},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":4211},"end":{"line":127,"column":374,"offset":4584},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span> ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":129,"column":1,"offset":4586},"end":{"line":131,"column":4,"offset":4667},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":133,"column":1,"offset":4669},"end":{"line":133,"column":8,"offset":4676},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":4669},"end":{"line":133,"column":8,"offset":4676},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span> ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> bool custom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":134,"column":1,"offset":4677},"end":{"line":136,"column":4,"offset":4771},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The macro changes to.","position":{"start":{"line":138,"column":1,"offset":4773},"end":{"line":138,"column":22,"offset":4794},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":4773},"end":{"line":138,"column":22,"offset":4794},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) _ac_malloc_d(NULL, __AC_FILE_LINE__, len, false)</span></code></pre></div>","position":{"start":{"line":139,"column":1,"offset":4795},"end":{"line":141,"column":4,"offset":4875},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If the custom feature is enabled, the objects need a way to dump their state to a file (or to the terminal).  In C, you can define a function pointer and then associate the pointer to functions programmatically.  An example is below.  The gist of it is that you specify the new function pointer type by surrounding the name in parenthesis and an extra asterisk.","position":{"start":{"line":143,"column":1,"offset":4877},"end":{"line":143,"column":362,"offset":5238},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":4877},"end":{"line":143,"column":362,"offset":5238},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example,","position":{"start":{"line":145,"column":1,"offset":5240},"end":{"line":145,"column":13,"offset":5252},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":5240},"end":{"line":145,"column":13,"offset":5252},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>my_function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":146,"column":1,"offset":5253},"end":{"line":148,"column":4,"offset":5292},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"would declare a function pointer type named my_function, which took no arguments and didn't return anything (it has a void return type).  I recommend using a suffix for function pointers (I'm going to use _f).  The allocator needs to define a function pointer to allow other objects to dump their details.","position":{"start":{"line":150,"column":1,"offset":5294},"end":{"line":150,"column":306,"offset":5599},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":5294},"end":{"line":150,"column":306,"offset":5599},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ac_dump_details_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":152,"column":1,"offset":5601},"end":{"line":154,"column":4,"offset":5679},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In C, the order of the members of a structure is also the byte order of the structure.  This is often exploited to allow a structure to be able to be cast as a structure of a different type.","position":{"start":{"line":156,"column":1,"offset":5681},"end":{"line":156,"column":191,"offset":5871},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":5681},"end":{"line":156,"column":191,"offset":5871},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  ac_dump_details_f dump<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ac_allocator_dump_t<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":158,"column":1,"offset":5873},"end":{"line":163,"column":4,"offset":5969},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another useful feature is to have the state of the memory usage dumped every so often.  All this means is that if ","position":{"start":{"line":165,"column":1,"offset":5971},"end":{"line":165,"column":115,"offset":6085},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":165,"column":116,"offset":6086},"end":{"line":165,"column":118,"offset":6088},"indent":[]}}],"position":{"start":{"line":165,"column":115,"offset":6085},"end":{"line":165,"column":119,"offset":6089},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":165,"column":119,"offset":6089},"end":{"line":165,"column":124,"offset":6094},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":165,"column":125,"offset":6095},"end":{"line":165,"column":131,"offset":6101},"indent":[]}}],"position":{"start":{"line":165,"column":124,"offset":6094},"end":{"line":165,"column":132,"offset":6102},"indent":[]}},{"type":"text","value":" is defined as a filename, any program which uses the allocator will record all of the memory allocations every N seconds and rotate the previous snapshot.  To maintain a smaller number of output files, the rotations will rotate files with an ever-expanding gap between them.","position":{"start":{"line":165,"column":132,"offset":6102},"end":{"line":165,"column":407,"offset":6377},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":5971},"end":{"line":165,"column":407,"offset":6377},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The full allocator interface is below.","position":{"start":{"line":167,"column":1,"offset":6379},"end":{"line":167,"column":39,"offset":6417},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":6379},"end":{"line":167,"column":39,"offset":6417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"$ac/src/ac_allocator.h","position":{"start":{"line":169,"column":1,"offset":6419},"end":{"line":169,"column":23,"offset":6441},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":6419},"end":{"line":169,"column":23,"offset":6441},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _ac_allocator_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _ac_allocator_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) _ac_malloc_d(NULL, __AC_FILE_LINE__, len, false)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_calloc(len) _ac_calloc_d(NULL, __AC_FILE_LINE__, len, false)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_realloc(p, len) _ac_realloc_d(NULL, __AC_FILE_LINE__, p, len, false)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_strdup(p) _ac_strdup_d(NULL, __AC_FILE_LINE__, p)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_free(p) _ac_free_d(NULL, __AC_FILE_LINE__, p)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_malloc(len) malloc(len)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_calloc(len) calloc(1, len)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_realloc(p, len) realloc(p, len)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_strdup(p) strdup(p)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_free(p) free(p)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ac_dump_details_f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>FILE <span class=\"token operator\">*</span>out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  ac_dump_details_f dump<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> ac_allocator_dump_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_allocator_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">ac_allocator_s</span> ac_allocator_t<span class=\"token punctuation\">;</span>\n\nac_allocator_t <span class=\"token operator\">*</span><span class=\"token function\">ac_allocator_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_allocator_destroy</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ac_dump_global_allocations</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> bool custom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_calloc_d</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> bool custom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_realloc_d</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> bool custom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">_ac_strdup_d</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">_ac_free_d</span><span class=\"token punctuation\">(</span>ac_allocator_t <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":170,"column":1,"offset":6442},"end":{"line":220,"column":4,"offset":7932},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Before understanding the implementation, let's see how other objects and code use this.  The ac_timer.h/c will change in the following way:","position":{"start":{"line":222,"column":1,"offset":7934},"end":{"line":222,"column":140,"offset":8073},"indent":[]}}],"position":{"start":{"line":222,"column":1,"offset":7934},"end":{"line":222,"column":140,"offset":8073},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Include ac_common.h","position":{"start":{"line":224,"column":1,"offset":8075},"end":{"line":224,"column":20,"offset":8094},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":8075},"end":{"line":224,"column":20,"offset":8094},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ac_timer.h","position":{"start":{"line":226,"column":1,"offset":8096},"end":{"line":226,"column":11,"offset":8106},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":8096},"end":{"line":226,"column":11,"offset":8106},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span></code></pre></div>","position":{"start":{"line":227,"column":1,"offset":8107},"end":{"line":229,"column":4,"offset":8138},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Replace","position":{"start":{"line":231,"column":1,"offset":8140},"end":{"line":231,"column":8,"offset":8147},"indent":[]}}],"position":{"start":{"line":231,"column":1,"offset":8140},"end":{"line":231,"column":8,"offset":8147},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":232,"column":1,"offset":8148},"end":{"line":234,"column":4,"offset":8195},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"with","position":{"start":{"line":236,"column":1,"offset":8197},"end":{"line":236,"column":5,"offset":8201},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":8197},"end":{"line":236,"column":5,"offset":8201},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat, AC_FILE_LINE_MACRO(\"ac_timer\"))</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat)</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":237,"column":1,"offset":8202},"end":{"line":245,"column":4,"offset":8486},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above code has two basic cases: one where ","position":{"start":{"line":247,"column":1,"offset":8488},"end":{"line":247,"column":47,"offset":8534},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":247,"column":48,"offset":8535},"end":{"line":247,"column":50,"offset":8537},"indent":[]}}],"position":{"start":{"line":247,"column":47,"offset":8534},"end":{"line":247,"column":51,"offset":8538},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":247,"column":51,"offset":8538},"end":{"line":247,"column":56,"offset":8543},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":247,"column":57,"offset":8544},"end":{"line":247,"column":63,"offset":8550},"indent":[]}}],"position":{"start":{"line":247,"column":56,"offset":8543},"end":{"line":247,"column":64,"offset":8551},"indent":[]}},{"type":"text","value":" is defined, and one where it is not (#else).  It may be easier to break this into a couple of steps.","position":{"start":{"line":247,"column":64,"offset":8551},"end":{"line":247,"column":165,"offset":8652},"indent":[]}}],"position":{"start":{"line":247,"column":1,"offset":8488},"end":{"line":247,"column":165,"offset":8652},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"convert the init function to be prefixed with an underscore","position":{"start":{"line":249,"column":5,"offset":8658},"end":{"line":249,"column":64,"offset":8717},"indent":[]}}],"position":{"start":{"line":249,"column":5,"offset":8658},"end":{"line":249,"column":64,"offset":8717},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":8654},"end":{"line":249,"column":64,"offset":8717},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":8654},"end":{"line":249,"column":64,"offset":8717},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":251,"column":1,"offset":8719},"end":{"line":253,"column":4,"offset":8766},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":255,"column":1,"offset":8768},"end":{"line":255,"column":8,"offset":8775},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":8768},"end":{"line":255,"column":8,"offset":8775},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":256,"column":1,"offset":8776},"end":{"line":258,"column":4,"offset":8824},"indent":[1,1]}},{"type":"list","ordered":true,"start":2,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"create a macro which defines ac","position":{"start":{"line":260,"column":5,"offset":8830},"end":{"line":260,"column":36,"offset":8861},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer","position":{"start":{"line":260,"column":37,"offset":8862},"end":{"line":260,"column":42,"offset":8867},"indent":[]}}],"position":{"start":{"line":260,"column":36,"offset":8861},"end":{"line":260,"column":43,"offset":8868},"indent":[]}},{"type":"text","value":"init as ","position":{"start":{"line":260,"column":43,"offset":8868},"end":{"line":260,"column":51,"offset":8876},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ac","position":{"start":{"line":260,"column":52,"offset":8877},"end":{"line":260,"column":54,"offset":8879},"indent":[]}}],"position":{"start":{"line":260,"column":51,"offset":8876},"end":{"line":260,"column":55,"offset":8880},"indent":[]}},{"type":"text","value":"timer_init","position":{"start":{"line":260,"column":55,"offset":8880},"end":{"line":260,"column":65,"offset":8890},"indent":[]}}],"position":{"start":{"line":260,"column":5,"offset":8830},"end":{"line":260,"column":65,"offset":8890},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat)</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":261,"column":1,"offset":8891},"end":{"line":264,"column":4,"offset":8992},"indent":[1,1,1]}}],"position":{"start":{"line":260,"column":1,"offset":8826},"end":{"line":265,"column":1,"offset":8993},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"define the macro if logic with the else part filled in.","position":{"start":{"line":266,"column":5,"offset":8998},"end":{"line":266,"column":60,"offset":9053},"indent":[]}}],"position":{"start":{"line":266,"column":5,"offset":8998},"end":{"line":266,"column":60,"offset":9053},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat)</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":267,"column":1,"offset":9054},"end":{"line":273,"column":4,"offset":9193},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":266,"column":1,"offset":8994},"end":{"line":274,"column":1,"offset":9194},"indent":[1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add const char *caller to the debug version of ","position":{"start":{"line":275,"column":5,"offset":9199},"end":{"line":275,"column":52,"offset":9246},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ac","position":{"start":{"line":275,"column":53,"offset":9247},"end":{"line":275,"column":55,"offset":9249},"indent":[]}}],"position":{"start":{"line":275,"column":52,"offset":9246},"end":{"line":275,"column":56,"offset":9250},"indent":[]}},{"type":"text","value":"timer_init","position":{"start":{"line":275,"column":56,"offset":9250},"end":{"line":275,"column":66,"offset":9260},"indent":[]}}],"position":{"start":{"line":275,"column":5,"offset":9199},"end":{"line":275,"column":66,"offset":9260},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":276,"column":1,"offset":9261},"end":{"line":278,"column":4,"offset":9329},"indent":[1,1]}}],"position":{"start":{"line":275,"column":1,"offset":9195},"end":{"line":279,"column":1,"offset":9330},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"define the macro to call the init function.","position":{"start":{"line":280,"column":5,"offset":9335},"end":{"line":280,"column":48,"offset":9378},"indent":[]}}],"position":{"start":{"line":280,"column":5,"offset":9335},"end":{"line":280,"column":48,"offset":9378},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat, AC_FILE_LINE_MACRO(\"ac_timer\"))</span></code></pre></div>","position":{"start":{"line":281,"column":1,"offset":9379},"end":{"line":283,"column":4,"offset":9472},"indent":[1,1]}}],"position":{"start":{"line":280,"column":1,"offset":9331},"end":{"line":284,"column":1,"offset":9473},"indent":[1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"put the two calls in the #ifdef ","position":{"start":{"line":285,"column":5,"offset":9478},"end":{"line":285,"column":37,"offset":9510},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":285,"column":38,"offset":9511},"end":{"line":285,"column":40,"offset":9513},"indent":[]}}],"position":{"start":{"line":285,"column":37,"offset":9510},"end":{"line":285,"column":41,"offset":9514},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":285,"column":41,"offset":9514},"end":{"line":285,"column":46,"offset":9519},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":285,"column":47,"offset":9520},"end":{"line":285,"column":53,"offset":9526},"indent":[]}}],"position":{"start":{"line":285,"column":46,"offset":9519},"end":{"line":285,"column":54,"offset":9527},"indent":[]}},{"type":"text","value":" section.","position":{"start":{"line":285,"column":54,"offset":9527},"end":{"line":285,"column":63,"offset":9536},"indent":[]}}],"position":{"start":{"line":285,"column":5,"offset":9478},"end":{"line":285,"column":63,"offset":9536},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat, AC_FILE_LINE_MACRO(\"ac_timer\"))</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ac_timer_init(repeat) _ac_timer_init(repeat)</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":286,"column":1,"offset":9537},"end":{"line":294,"column":4,"offset":9821},"indent":[1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":285,"column":1,"offset":9474},"end":{"line":294,"column":4,"offset":9821},"indent":[1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":260,"column":1,"offset":8826},"end":{"line":294,"column":4,"offset":9821},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Objects will typically use the AC","position":{"start":{"line":296,"column":1,"offset":9823},"end":{"line":296,"column":34,"offset":9856},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"FILE","position":{"start":{"line":296,"column":35,"offset":9857},"end":{"line":296,"column":39,"offset":9861},"indent":[]}}],"position":{"start":{"line":296,"column":34,"offset":9856},"end":{"line":296,"column":40,"offset":9862},"indent":[]}},{"type":"text","value":"LINE","position":{"start":{"line":296,"column":40,"offset":9862},"end":{"line":296,"column":44,"offset":9866},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MACRO(\"object","position":{"start":{"line":296,"column":45,"offset":9867},"end":{"line":296,"column":58,"offset":9880},"indent":[]}}],"position":{"start":{"line":296,"column":44,"offset":9866},"end":{"line":296,"column":59,"offset":9881},"indent":[]}},{"type":"text","value":"name\") when defining the init call, as in step 5 above.","position":{"start":{"line":296,"column":59,"offset":9881},"end":{"line":296,"column":114,"offset":9936},"indent":[]}}],"position":{"start":{"line":296,"column":1,"offset":9823},"end":{"line":296,"column":114,"offset":9936},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Change ac_timer.c from","position":{"start":{"line":298,"column":1,"offset":9938},"end":{"line":298,"column":23,"offset":9960},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":9938},"end":{"line":298,"column":23,"offset":9960},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ac_timer_t <span class=\"token operator\">*</span>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ac_timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ac_timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":299,"column":1,"offset":9961},"end":{"line":302,"column":4,"offset":10069},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to","position":{"start":{"line":304,"column":1,"offset":10071},"end":{"line":304,"column":3,"offset":10073},"indent":[]}}],"position":{"start":{"line":304,"column":1,"offset":10071},"end":{"line":304,"column":3,"offset":10073},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _AC_DEBUG_MEMORY_</span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>caller<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ac_timer_t <span class=\"token operator\">*</span>t <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span>ac_timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">_ac_malloc_d</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> caller<span class=\"token punctuation\">,</span>\n                                   <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ac_timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\nac_timer_t <span class=\"token operator\">*</span><span class=\"token function\">_ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ac_timer_t <span class=\"token operator\">*</span>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ac_timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ac_timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":305,"column":1,"offset":10074},"end":{"line":315,"column":4,"offset":10411},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Change all malloc, calloc, strdup, realloc, and free calls to have ac_ prefix.","position":{"start":{"line":317,"column":5,"offset":10417},"end":{"line":317,"column":83,"offset":10495},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":317,"column":83,"offset":10495},"end":{"line":317,"column":88,"offset":10500},"indent":[]}}],"position":{"start":{"line":317,"column":5,"offset":10417},"end":{"line":317,"column":88,"offset":10500},"indent":[]}}],"position":{"start":{"line":317,"column":1,"offset":10413},"end":{"line":317,"column":88,"offset":10500},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Change the function name from ac","position":{"start":{"line":318,"column":5,"offset":10505},"end":{"line":318,"column":37,"offset":10537},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer","position":{"start":{"line":318,"column":38,"offset":10538},"end":{"line":318,"column":43,"offset":10543},"indent":[]}}],"position":{"start":{"line":318,"column":37,"offset":10537},"end":{"line":318,"column":44,"offset":10544},"indent":[]}},{"type":"text","value":"init to ","position":{"start":{"line":318,"column":44,"offset":10544},"end":{"line":318,"column":52,"offset":10552},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ac","position":{"start":{"line":318,"column":53,"offset":10553},"end":{"line":318,"column":55,"offset":10555},"indent":[]}}],"position":{"start":{"line":318,"column":52,"offset":10552},"end":{"line":318,"column":56,"offset":10556},"indent":[]}},{"type":"text","value":"timer_init.","position":{"start":{"line":318,"column":56,"offset":10556},"end":{"line":318,"column":67,"offset":10567},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":318,"column":67,"offset":10567},"end":{"line":318,"column":72,"offset":10572},"indent":[]}}],"position":{"start":{"line":318,"column":5,"offset":10505},"end":{"line":318,"column":72,"offset":10572},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":10501},"end":{"line":318,"column":72,"offset":10572},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Wrap the block in a #ifdef ","position":{"start":{"line":319,"column":5,"offset":10577},"end":{"line":319,"column":32,"offset":10604},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":319,"column":33,"offset":10605},"end":{"line":319,"column":35,"offset":10607},"indent":[]}}],"position":{"start":{"line":319,"column":32,"offset":10604},"end":{"line":319,"column":36,"offset":10608},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":319,"column":36,"offset":10608},"end":{"line":319,"column":41,"offset":10613},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":319,"column":42,"offset":10614},"end":{"line":319,"column":48,"offset":10620},"indent":[]}}],"position":{"start":{"line":319,"column":41,"offset":10613},"end":{"line":319,"column":49,"offset":10621},"indent":[]}},{"type":"text","value":"/#else/#endif block","position":{"start":{"line":319,"column":49,"offset":10621},"end":{"line":319,"column":68,"offset":10640},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":319,"column":68,"offset":10640},"end":{"line":319,"column":73,"offset":10645},"indent":[]}}],"position":{"start":{"line":319,"column":5,"offset":10577},"end":{"line":319,"column":73,"offset":10645},"indent":[]}}],"position":{"start":{"line":319,"column":1,"offset":10573},"end":{"line":319,"column":73,"offset":10645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Define the ","position":{"start":{"line":320,"column":5,"offset":10650},"end":{"line":320,"column":16,"offset":10661},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":320,"column":17,"offset":10662},"end":{"line":320,"column":19,"offset":10664},"indent":[]}}],"position":{"start":{"line":320,"column":16,"offset":10661},"end":{"line":320,"column":20,"offset":10665},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":320,"column":20,"offset":10665},"end":{"line":320,"column":25,"offset":10670},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":320,"column":26,"offset":10671},"end":{"line":320,"column":32,"offset":10677},"indent":[]}}],"position":{"start":{"line":320,"column":25,"offset":10670},"end":{"line":320,"column":33,"offset":10678},"indent":[]}},{"type":"text","value":" portion.  The ","position":{"start":{"line":320,"column":33,"offset":10678},"end":{"line":320,"column":48,"offset":10693},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"ac","position":{"start":{"line":320,"column":49,"offset":10694},"end":{"line":320,"column":51,"offset":10696},"indent":[]}}],"position":{"start":{"line":320,"column":48,"offset":10693},"end":{"line":320,"column":52,"offset":10697},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":320,"column":52,"offset":10697},"end":{"line":320,"column":57,"offset":10702},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"init function has the extra const char *caller parameter.  The allocation uses _ac","position":{"start":{"line":320,"column":58,"offset":10703},"end":{"line":320,"column":140,"offset":10785},"indent":[]}}],"position":{"start":{"line":320,"column":57,"offset":10702},"end":{"line":320,"column":141,"offset":10786},"indent":[]}},{"type":"text","value":"malloc_d directly, as shown above.","position":{"start":{"line":320,"column":141,"offset":10786},"end":{"line":320,"column":175,"offset":10820},"indent":[]}}],"position":{"start":{"line":320,"column":5,"offset":10650},"end":{"line":320,"column":175,"offset":10820},"indent":[]}}],"position":{"start":{"line":320,"column":1,"offset":10646},"end":{"line":320,"column":175,"offset":10820},"indent":[]}}],"position":{"start":{"line":317,"column":1,"offset":10413},"end":{"line":320,"column":175,"offset":10820},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To test these changes out, I've modified code from $ac/illustrations/2","position":{"start":{"line":322,"column":1,"offset":10822},"end":{"line":322,"column":71,"offset":10892},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/13","position":{"start":{"line":322,"column":72,"offset":10893},"end":{"line":322,"column":81,"offset":10902},"indent":[]}}],"position":{"start":{"line":322,"column":71,"offset":10892},"end":{"line":322,"column":82,"offset":10903},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":322,"column":82,"offset":10903},"end":{"line":322,"column":87,"offset":10908},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":10822},"end":{"line":322,"column":87,"offset":10908},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":325,"column":1,"offset":10911},"end":{"line":325,"column":32,"offset":10942},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":325,"column":32,"offset":10942},"end":{"line":325,"column":35,"offset":10945},"indent":[]}},{"type":"text","value":"illustrations/6","position":{"start":{"line":325,"column":35,"offset":10945},"end":{"line":325,"column":50,"offset":10960},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"allocator/1","position":{"start":{"line":325,"column":51,"offset":10961},"end":{"line":325,"column":62,"offset":10972},"indent":[]}}],"position":{"start":{"line":325,"column":50,"offset":10960},"end":{"line":325,"column":63,"offset":10973},"indent":[]}},{"type":"text","value":"timing","position":{"start":{"line":325,"column":63,"offset":10973},"end":{"line":325,"column":69,"offset":10979},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":325,"column":69,"offset":10979},"end":{"line":325,"column":73,"offset":10983},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":10911},"end":{"line":325,"column":73,"offset":10983},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/6_allocator/1_timing</code></pre></div>","position":{"start":{"line":326,"column":1,"offset":10984},"end":{"line":328,"column":4,"offset":11037},"indent":[1,1]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 -I<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span>NULL <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_timer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_allocator.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_buffer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_pool.c test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">7</span>.7260ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">1</span>.8180ns\noverall time_spent: <span class=\"token number\">9</span>.5440ns\n<span class=\"token number\">99</span> byte<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> allocated <span class=\"token keyword\">in</span> <span class=\"token number\">4</span> allocations <span class=\"token punctuation\">(</span><span class=\"token number\">160</span> byte<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> overhead<span class=\"token punctuation\">)</span>\ntest_timer.c:24: <span class=\"token number\">27</span>\ntest_timer.c:26 <span class=\"token punctuation\">[</span>ac_timer<span class=\"token punctuation\">]</span>: <span class=\"token number\">32</span>\ntest_timer.c:24: <span class=\"token number\">8</span>\ntest_timer.c:26 <span class=\"token punctuation\">[</span>ac_timer<span class=\"token punctuation\">]</span>: <span class=\"token number\">32</span></code></pre></div>","position":{"start":{"line":330,"column":1,"offset":11039},"end":{"line":344,"column":4,"offset":11589},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Include ac","position":{"start":{"line":346,"column":1,"offset":11591},"end":{"line":346,"column":11,"offset":11601},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"allocator.h in test","position":{"start":{"line":346,"column":12,"offset":11602},"end":{"line":346,"column":31,"offset":11621},"indent":[]}}],"position":{"start":{"line":346,"column":11,"offset":11601},"end":{"line":346,"column":32,"offset":11622},"indent":[]}},{"type":"text","value":"timer.c","position":{"start":{"line":346,"column":32,"offset":11622},"end":{"line":346,"column":39,"offset":11629},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":11591},"end":{"line":346,"column":39,"offset":11629},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_allocator.h\"</span></span></code></pre></div>","position":{"start":{"line":347,"column":1,"offset":11630},"end":{"line":349,"column":4,"offset":11664},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and alter the malloc and free calls to ac","position":{"start":{"line":351,"column":1,"offset":11666},"end":{"line":351,"column":42,"offset":11707},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"malloc and ac","position":{"start":{"line":351,"column":43,"offset":11708},"end":{"line":351,"column":56,"offset":11721},"indent":[]}}],"position":{"start":{"line":351,"column":42,"offset":11707},"end":{"line":351,"column":57,"offset":11722},"indent":[]}},{"type":"text","value":"free.  I've intentionally commented out several destroy calls and the ac_free call.","position":{"start":{"line":351,"column":57,"offset":11722},"end":{"line":351,"column":140,"offset":11805},"indent":[]}}],"position":{"start":{"line":351,"column":1,"offset":11666},"end":{"line":351,"column":140,"offset":11805},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When make was run above, the following extra lines were output","position":{"start":{"line":353,"column":1,"offset":11807},"end":{"line":353,"column":63,"offset":11869},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":11807},"end":{"line":353,"column":63,"offset":11869},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">99 byte(s) allocated in 4 allocations (160 byte(s) overhead)\ntest_timer.c:24: 27\ntest_timer.c:26 [ac_timer]: 32\ntest_timer.c:24: 8\ntest_timer.c:26 [ac_timer]: 32</code></pre></div>","position":{"start":{"line":354,"column":1,"offset":11870},"end":{"line":360,"column":4,"offset":12039},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This indicates that 4 allocations were not properly freed.","position":{"start":{"line":362,"column":1,"offset":12041},"end":{"line":362,"column":59,"offset":12099},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":12041},"end":{"line":362,"column":59,"offset":12099},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"line 24","position":{"start":{"line":364,"column":1,"offset":12101},"end":{"line":364,"column":8,"offset":12108},"indent":[]}}],"position":{"start":{"line":364,"column":1,"offset":12101},"end":{"line":364,"column":8,"offset":12108},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":365,"column":1,"offset":12109},"end":{"line":367,"column":4,"offset":12153},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"line 26","position":{"start":{"line":369,"column":1,"offset":12155},"end":{"line":369,"column":8,"offset":12162},"indent":[]}}],"position":{"start":{"line":369,"column":1,"offset":12155},"end":{"line":369,"column":8,"offset":12162},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">ac_timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":370,"column":1,"offset":12163},"end":{"line":372,"column":4,"offset":12247},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To fix the code, we need to make sure that copy_timer is destroyed and s is freed.  Lines 47-48 are what need uncommented to make this work.","position":{"start":{"line":374,"column":1,"offset":12249},"end":{"line":374,"column":141,"offset":12389},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":12249},"end":{"line":374,"column":141,"offset":12389},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// ac_timer_destroy(copy_timer);</span>\n<span class=\"token comment\">// ac_free(s);</span></code></pre></div>","position":{"start":{"line":375,"column":1,"offset":12390},"end":{"line":378,"column":4,"offset":12446},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The error reported logged the ac","position":{"start":{"line":380,"column":1,"offset":12448},"end":{"line":380,"column":33,"offset":12480},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer","position":{"start":{"line":380,"column":34,"offset":12481},"end":{"line":380,"column":39,"offset":12486},"indent":[]}}],"position":{"start":{"line":380,"column":33,"offset":12480},"end":{"line":380,"column":40,"offset":12487},"indent":[]}},{"type":"text","value":"init line as opposed to the ac","position":{"start":{"line":380,"column":40,"offset":12487},"end":{"line":380,"column":70,"offset":12517},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"malloc inside of ac","position":{"start":{"line":380,"column":71,"offset":12518},"end":{"line":380,"column":90,"offset":12537},"indent":[]}}],"position":{"start":{"line":380,"column":70,"offset":12517},"end":{"line":380,"column":91,"offset":12538},"indent":[]}},{"type":"text","value":"timer_init.  This is likely more useful unless you are testing the individual object.","position":{"start":{"line":380,"column":91,"offset":12538},"end":{"line":380,"column":176,"offset":12623},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":12448},"end":{"line":380,"column":176,"offset":12623},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Go ahead and uncomment those lines and run make again","position":{"start":{"line":382,"column":1,"offset":12625},"end":{"line":382,"column":54,"offset":12678},"indent":[]}}],"position":{"start":{"line":382,"column":1,"offset":12625},"end":{"line":382,"column":54,"offset":12678},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 -I<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span>NULL <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_timer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_allocator.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_buffer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_pool.c test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">7</span>.7260ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">1</span>.8180ns\noverall time_spent: <span class=\"token number\">9</span>.5440ns</code></pre></div>","position":{"start":{"line":383,"column":1,"offset":12679},"end":{"line":392,"column":4,"offset":13067},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Go ahead and revert your changes.  You can revert your changes in the current directory by running the following git command.  If you don't specify the ., then it will revert all changes in the whole repo (so this command can be somewhat dangerous!)","position":{"start":{"line":394,"column":1,"offset":13069},"end":{"line":394,"column":250,"offset":13318},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":13069},"end":{"line":394,"column":250,"offset":13318},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">.</span></code></pre></div>","position":{"start":{"line":395,"column":1,"offset":13319},"end":{"line":397,"column":4,"offset":13345},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The lines indicating memory loss are no longer printed.  In this example, ","position":{"start":{"line":399,"column":1,"offset":13347},"end":{"line":399,"column":75,"offset":13421},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":399,"column":76,"offset":13422},"end":{"line":399,"column":78,"offset":13424},"indent":[]}}],"position":{"start":{"line":399,"column":75,"offset":13421},"end":{"line":399,"column":79,"offset":13425},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":399,"column":79,"offset":13425},"end":{"line":399,"column":84,"offset":13430},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":399,"column":85,"offset":13431},"end":{"line":399,"column":91,"offset":13437},"indent":[]}}],"position":{"start":{"line":399,"column":84,"offset":13430},"end":{"line":399,"column":92,"offset":13438},"indent":[]}},{"type":"text","value":" was defined as NULL in the Makefile using the following line.","position":{"start":{"line":399,"column":92,"offset":13438},"end":{"line":399,"column":154,"offset":13500},"indent":[]}}],"position":{"start":{"line":399,"column":1,"offset":13347},"end":{"line":399,"column":154,"offset":13500},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">FLAGS <span class=\"token operator\">+=</span> -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span>NULL</code></pre></div>","position":{"start":{"line":400,"column":1,"offset":13501},"end":{"line":402,"column":4,"offset":13550},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we change this to","position":{"start":{"line":404,"column":1,"offset":13552},"end":{"line":404,"column":21,"offset":13572},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":13552},"end":{"line":404,"column":21,"offset":13572},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">FLAGS <span class=\"token operator\">+=</span> -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span>\\\"memory.log\\\"</code></pre></div>","position":{"start":{"line":405,"column":1,"offset":13573},"end":{"line":407,"column":4,"offset":13632},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"run","position":{"start":{"line":408,"column":1,"offset":13633},"end":{"line":408,"column":4,"offset":13636},"indent":[]}}],"position":{"start":{"line":408,"column":1,"offset":13633},"end":{"line":408,"column":4,"offset":13636},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> clean</code></pre></div>","position":{"start":{"line":409,"column":1,"offset":13637},"end":{"line":411,"column":4,"offset":13659},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then","position":{"start":{"line":413,"column":1,"offset":13661},"end":{"line":413,"column":9,"offset":13669},"indent":[]}}],"position":{"start":{"line":413,"column":1,"offset":13661},"end":{"line":413,"column":9,"offset":13669},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 -I<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span><span class=\"token punctuation\">\\</span>\"memory.log<span class=\"token punctuation\">\\</span>\" <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_timer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_allocator.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_buffer.c <span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/src/ac_pool.c test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">5</span>.9220ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">1</span>.5720ns\noverall time_spent: <span class=\"token number\">7</span>.4940ns</code></pre></div>","position":{"start":{"line":414,"column":1,"offset":13670},"end":{"line":423,"column":4,"offset":14068},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There is a new file called memory.log in this directory.","position":{"start":{"line":425,"column":1,"offset":14070},"end":{"line":425,"column":57,"offset":14126},"indent":[]}}],"position":{"start":{"line":425,"column":1,"offset":14070},"end":{"line":425,"column":57,"offset":14126},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span>\nMakefile\tmemory.log\ttest_timer\ttest_timer.c</code></pre></div>","position":{"start":{"line":426,"column":1,"offset":14127},"end":{"line":429,"column":4,"offset":14187},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can view memory.log by running","position":{"start":{"line":431,"column":1,"offset":14189},"end":{"line":431,"column":35,"offset":14223},"indent":[]}}],"position":{"start":{"line":431,"column":1,"offset":14189},"end":{"line":431,"column":35,"offset":14223},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> memory.log\n<span class=\"token number\">99</span> byte<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> allocated <span class=\"token keyword\">in</span> <span class=\"token number\">4</span> allocations <span class=\"token punctuation\">(</span><span class=\"token number\">160</span> byte<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> overhead<span class=\"token punctuation\">)</span>\ntest_timer.c:24: <span class=\"token number\">27</span>\ntest_timer.c:26 <span class=\"token punctuation\">[</span>ac_timer<span class=\"token punctuation\">]</span>: <span class=\"token number\">32</span>\ntest_timer.c:24: <span class=\"token number\">8</span>\ntest_timer.c:26 <span class=\"token punctuation\">[</span>ac_timer<span class=\"token punctuation\">]</span>: <span class=\"token number\">32</span></code></pre></div>","position":{"start":{"line":432,"column":1,"offset":14224},"end":{"line":439,"column":4,"offset":14414},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you view the test","position":{"start":{"line":441,"column":1,"offset":14416},"end":{"line":441,"column":21,"offset":14436},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c code, you will notice that a significant portion of the main function now has the ac","position":{"start":{"line":441,"column":22,"offset":14437},"end":{"line":441,"column":114,"offset":14529},"indent":[]}}],"position":{"start":{"line":441,"column":21,"offset":14436},"end":{"line":441,"column":115,"offset":14530},"indent":[]}},{"type":"text","value":" prefix.","position":{"start":{"line":441,"column":115,"offset":14530},"end":{"line":441,"column":123,"offset":14538},"indent":[]}}],"position":{"start":{"line":441,"column":1,"offset":14416},"end":{"line":441,"column":123,"offset":14538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_timer.c (main function)","position":{"start":{"line":443,"column":1,"offset":14540},"end":{"line":443,"column":29,"offset":14568},"indent":[]}}],"position":{"start":{"line":443,"column":1,"offset":14540},"end":{"line":443,"column":29,"offset":14568},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> repeat_test <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n  ac_timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ac_timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">ac_timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">ac_timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ac_timer_t <span class=\"token operator\">*</span>test_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">ac_timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_start</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">ac_timer_stop</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_subtract</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">,</span> copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_add</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">,</span> test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ac_timer_ns</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ac_timer_destroy</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ac_timer_destroy(copy_timer);</span>\n    <span class=\"token comment\">// ac_free(s);</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"overall time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ac_timer_ns</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ac_timer_destroy</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":444,"column":1,"offset":14569},"end":{"line":480,"column":4,"offset":15682},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Breaking out all of the ac_ statements:","position":{"start":{"line":482,"column":1,"offset":15684},"end":{"line":482,"column":40,"offset":15723},"indent":[]}}],"position":{"start":{"line":482,"column":1,"offset":15684},"end":{"line":482,"column":40,"offset":15723},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  ac_timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">ac_malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ac_timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">ac_timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ac_timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ac_timer_t <span class=\"token operator\">*</span>test_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">ac_timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_start</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ac_timer_stop</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_subtract</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">,</span> copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ac_timer_add</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">,</span> test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ac_timer_destroy</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ac_timer_destroy(copy_timer);</span>\n    <span class=\"token comment\">// ac_free(s);</span>\n  <span class=\"token function\">ac_timer_destroy</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":483,"column":1,"offset":15724},"end":{"line":503,"column":4,"offset":16338},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you mentally note that ac is just a prefix and view the code as","position":{"start":{"line":505,"column":1,"offset":16340},"end":{"line":505,"column":67,"offset":16406},"indent":[]}}],"position":{"start":{"line":505,"column":1,"offset":16340},"end":{"line":505,"column":67,"offset":16406},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  timer_t <span class=\"token operator\">*</span>test_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">,</span> copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">,</span> test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// timer_destroy(copy_timer);</span>\n  <span class=\"token comment\">// free(s);</span>\n<span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":506,"column":1,"offset":16407},"end":{"line":526,"column":4,"offset":16936},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can see that there are timer objects, malloc, and free.  Given that malloc, calloc, realloc, strdup, and free are so common in code, I opted not to provide any extra qualifiers other than ac.  I aim to make code highly optimized and very readable.  Another important feature of qualified naming is that it makes it possible to search for all places something exists.  For example, to find all cases where ac_timer are used, you can run..","position":{"start":{"line":528,"column":1,"offset":16938},"end":{"line":528,"column":442,"offset":17379},"indent":[]}}],"position":{"start":{"line":528,"column":1,"offset":16938},"end":{"line":528,"column":442,"offset":17379},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations\n<span class=\"token function\">grep</span> -rn ac_timer <span class=\"token builtin class-name\">.</span></code></pre></div>","position":{"start":{"line":530,"column":1,"offset":17381},"end":{"line":533,"column":6,"offset":17435},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and your output might look like...","position":{"start":{"line":535,"column":1,"offset":17437},"end":{"line":535,"column":35,"offset":17471},"indent":[]}}],"position":{"start":{"line":535,"column":1,"offset":17437},"end":{"line":535,"column":35,"offset":17471},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">./2_timing/12_timer/test_timer.c:1:#include &quot;ac_timer.h&quot;\n./2_timing/12_timer/test_timer.c:20:  ac_timer_t *overall_timer = ac_timer_init(repeat_test);\n./2_timing/12_timer/test_timer.c:25:    ac_timer_t *copy_timer = ac_timer_init(ac_timer_get_repeat(overall_timer));\n./2_timing/12_timer/test_timer.c:26:    ac_timer_start(copy_timer);\n./2_timing/12_timer/test_timer.c:30:    ac_timer_stop(copy_timer);\n./2_timing/12_timer/test_timer.c:32:    ac_timer_t *test_timer = ac_timer_init(ac_timer_get_repeat(overall_timer));\n./2_timing/12_timer/test_timer.c:33:    ac_timer_start(test_timer);\n./2_timing/12_timer/test_timer.c:38:    ac_timer_stop(test_timer);\n./2_timing/12_timer/test_timer.c:39:    ac_timer_subtract(test_timer, copy_timer);\n./2_timing/12_timer/test_timer.c:40:    ac_timer_add(overall_timer, test_timer);\n./2_timing/12_timer/test_timer.c:43:    printf( &quot;time_spent: %0.4fns\\n&quot;, ac_timer_ns(test_timer) );\n./2_timing/12_timer/test_timer.c:45:    ac_timer_destroy(test_timer);\n./2_timing/12_timer/test_timer.c:46:    ac_timer_destroy(copy_timer);\n./2_timing/12_timer/test_timer.c:49:  printf( &quot;overall time_spent: %0.4fns\\n&quot;, ac_timer_ns(overall_timer) );\n./2_timing/12_timer/test_timer.c:50:  ac_timer_destroy(overall_timer);\n./2_timing/12_timer/Makefile:2:OBJECTS=$(ROOT)/src/ac_timer.c\n./2_timing/12_timer/Makefile:3:HEADER_FILES=$(ROOT)/src/ac_timer.h\nBinary file ./2_timing/12_timer/test_timer matches\n./2_timing/13_timer/test_timer.c:1:#include &quot;ac_timer.h&quot;\n./2_timing/13_timer/test_timer.c:20:  ac_timer_t *overall_timer = ac_timer_init(repeat_test);\n./2_timing/13_timer/test_timer.c:25:    ac_timer_t *copy_timer = ac_timer_init(ac_timer_get_repeat(overall_timer));\n./2_timing/13_timer/test_timer.c:26:    ac_timer_start(copy_timer);\n./2_timing/13_timer/test_timer.c:30:    ac_timer_stop(copy_timer);\n...</code></pre></div>","position":{"start":{"line":536,"column":1,"offset":17472},"end":{"line":561,"column":4,"offset":19302},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This feature alone is extremely valuable when working with a large codebase.  It takes longer to write each line of code, but the reader can easily find every line of code where the object is used.  This makes it easier to find example code and to build upon the work of others.","position":{"start":{"line":563,"column":1,"offset":19304},"end":{"line":563,"column":279,"offset":19582},"indent":[]}}],"position":{"start":{"line":563,"column":1,"offset":19304},"end":{"line":563,"column":279,"offset":19582},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#a-quick-recap","title":null,"children":[],"data":{"hProperties":{"aria-label":"a quick recap permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"A Quick Recap","position":{"start":{"line":565,"column":3,"offset":19586},"end":{"line":565,"column":16,"offset":19599},"indent":[]}}],"position":{"start":{"line":565,"column":1,"offset":19584},"end":{"line":565,"column":16,"offset":19599},"indent":[]},"data":{"id":"a-quick-recap","htmlAttributes":{"id":"a-quick-recap"},"hProperties":{"id":"a-quick-recap"}}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The 5 basic allocation methods in C are...","position":{"start":{"line":567,"column":5,"offset":19605},"end":{"line":567,"column":47,"offset":19647},"indent":[]}}],"position":{"start":{"line":567,"column":5,"offset":19605},"end":{"line":567,"column":47,"offset":19647},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>size_t num<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":568,"column":1,"offset":19648},"end":{"line":574,"column":4,"offset":19799},"indent":[1,1,1,1,1,1]}}],"position":{"start":{"line":567,"column":1,"offset":19601},"end":{"line":575,"column":1,"offset":19800},"indent":[1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We define those functions with the ac_ prefix such that if we are debugging memory, we can track where the allocations are made.  This allows us to recognize memory leaks and potentially a couple of other common errors.","position":{"start":{"line":576,"column":5,"offset":19805},"end":{"line":576,"column":224,"offset":20024},"indent":[]}}],"position":{"start":{"line":576,"column":5,"offset":19805},"end":{"line":576,"column":224,"offset":20024},"indent":[]}}],"position":{"start":{"line":576,"column":1,"offset":19801},"end":{"line":577,"column":1,"offset":20025},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Callback functions should have a suffix of _f","position":{"start":{"line":578,"column":5,"offset":20030},"end":{"line":578,"column":50,"offset":20075},"indent":[]}}],"position":{"start":{"line":578,"column":5,"offset":20030},"end":{"line":578,"column":50,"offset":20075},"indent":[]}}],"position":{"start":{"line":578,"column":1,"offset":20026},"end":{"line":579,"column":1,"offset":20076},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We defined an approach to find when objects are created (and not destroyed).  The basic changes to ac","position":{"start":{"line":580,"column":5,"offset":20081},"end":{"line":580,"column":106,"offset":20182},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer were outlined to make it support using the ac","position":{"start":{"line":580,"column":107,"offset":20183},"end":{"line":580,"column":158,"offset":20234},"indent":[]}}],"position":{"start":{"line":580,"column":106,"offset":20182},"end":{"line":580,"column":159,"offset":20235},"indent":[]}},{"type":"text","value":"allocator.","position":{"start":{"line":580,"column":159,"offset":20235},"end":{"line":580,"column":169,"offset":20245},"indent":[]}}],"position":{"start":{"line":580,"column":5,"offset":20081},"end":{"line":580,"column":169,"offset":20245},"indent":[]}}],"position":{"start":{"line":580,"column":1,"offset":20077},"end":{"line":581,"column":1,"offset":20246},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"When we are using the ac","position":{"start":{"line":582,"column":5,"offset":20251},"end":{"line":582,"column":29,"offset":20275},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"allocator object outside of objects, the only change to the code is to replace the 5 basic allocation methods with `ac","position":{"start":{"line":582,"column":30,"offset":20276},"end":{"line":582,"column":148,"offset":20394},"indent":[]}}],"position":{"start":{"line":582,"column":29,"offset":20275},"end":{"line":582,"column":149,"offset":20395},"indent":[]}},{"type":"text","value":"...` If, for some reason, you do not wish to allocate memory using the ac method, then make sure that you don't free it with the ac method.","position":{"start":{"line":582,"column":149,"offset":20395},"end":{"line":582,"column":288,"offset":20534},"indent":[]}}],"position":{"start":{"line":582,"column":5,"offset":20251},"end":{"line":582,"column":288,"offset":20534},"indent":[]}}],"position":{"start":{"line":582,"column":1,"offset":20247},"end":{"line":583,"column":1,"offset":20535},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can define ","position":{"start":{"line":584,"column":5,"offset":20540},"end":{"line":584,"column":19,"offset":20554},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":584,"column":20,"offset":20555},"end":{"line":584,"column":22,"offset":20557},"indent":[]}}],"position":{"start":{"line":584,"column":19,"offset":20554},"end":{"line":584,"column":23,"offset":20558},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":584,"column":23,"offset":20558},"end":{"line":584,"column":28,"offset":20563},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":584,"column":29,"offset":20564},"end":{"line":584,"column":35,"offset":20570},"indent":[]}}],"position":{"start":{"line":584,"column":28,"offset":20563},"end":{"line":584,"column":36,"offset":20571},"indent":[]}},{"type":"text","value":" as NULL and have memory leaks reported to the terminal when the program exits.","position":{"start":{"line":584,"column":36,"offset":20571},"end":{"line":584,"column":115,"offset":20650},"indent":[]}}],"position":{"start":{"line":584,"column":5,"offset":20540},"end":{"line":584,"column":115,"offset":20650},"indent":[]}}],"position":{"start":{"line":584,"column":1,"offset":20536},"end":{"line":584,"column":115,"offset":20650},"indent":[]}}],"position":{"start":{"line":567,"column":1,"offset":19601},"end":{"line":584,"column":115,"offset":20650},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">FLAGS <span class=\"token operator\">+=</span> -D_AC_DEBUG_MEMORY_<span class=\"token operator\">=</span>\\\"memory.log\\\"</code></pre></div>","position":{"start":{"line":586,"column":1,"offset":20652},"end":{"line":588,"column":4,"offset":20711},"indent":[1,1]}},{"type":"list","ordered":true,"start":7,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"We can define ","position":{"start":{"line":590,"column":5,"offset":20717},"end":{"line":590,"column":19,"offset":20731},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":590,"column":20,"offset":20732},"end":{"line":590,"column":22,"offset":20734},"indent":[]}}],"position":{"start":{"line":590,"column":19,"offset":20731},"end":{"line":590,"column":23,"offset":20735},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":590,"column":23,"offset":20735},"end":{"line":590,"column":28,"offset":20740},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":590,"column":29,"offset":20741},"end":{"line":590,"column":35,"offset":20747},"indent":[]}}],"position":{"start":{"line":590,"column":28,"offset":20740},"end":{"line":590,"column":36,"offset":20748},"indent":[]}},{"type":"text","value":" as a string and have memory leaks reported to a file periodically.  The period is defined in seconds as ","position":{"start":{"line":590,"column":36,"offset":20748},"end":{"line":590,"column":141,"offset":20853},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"AC","position":{"start":{"line":590,"column":142,"offset":20854},"end":{"line":590,"column":144,"offset":20856},"indent":[]}}],"position":{"start":{"line":590,"column":141,"offset":20853},"end":{"line":590,"column":145,"offset":20857},"indent":[]}},{"type":"text","value":"DEBUG","position":{"start":{"line":590,"column":145,"offset":20857},"end":{"line":590,"column":150,"offset":20862},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"MEMORY","position":{"start":{"line":590,"column":151,"offset":20863},"end":{"line":590,"column":157,"offset":20869},"indent":[]}}],"position":{"start":{"line":590,"column":150,"offset":20862},"end":{"line":590,"column":158,"offset":20870},"indent":[]}},{"type":"text","value":"SPEED_ and defaults to 60 in ac_common.h","position":{"start":{"line":590,"column":158,"offset":20870},"end":{"line":590,"column":198,"offset":20910},"indent":[]}}],"position":{"start":{"line":590,"column":5,"offset":20717},"end":{"line":590,"column":198,"offset":20910},"indent":[]}}],"position":{"start":{"line":590,"column":1,"offset":20713},"end":{"line":591,"column":1,"offset":20911},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"You can grep for any line of code which contains an object using the following approach.  The following grep line will search all subdirectories for the string ac_timer and report the filename and line number where the text is found.","position":{"start":{"line":592,"column":5,"offset":20916},"end":{"line":592,"column":238,"offset":21149},"indent":[]}}],"position":{"start":{"line":592,"column":5,"offset":20916},"end":{"line":592,"column":238,"offset":21149},"indent":[]}}],"position":{"start":{"line":592,"column":1,"offset":20912},"end":{"line":592,"column":238,"offset":21149},"indent":[]}}],"position":{"start":{"line":590,"column":1,"offset":20713},"end":{"line":592,"column":238,"offset":21149},"indent":[1,1]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> -rn ac_timer <span class=\"token builtin class-name\">.</span></code></pre></div>","position":{"start":{"line":594,"column":1,"offset":21151},"end":{"line":596,"column":4,"offset":21182},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"ac_timer can be replaced with a function name or another object name (or whatever you want to find).","position":{"start":{"line":598,"column":1,"offset":21184},"end":{"line":598,"column":101,"offset":21284},"indent":[]}}],"position":{"start":{"line":598,"column":1,"offset":21184},"end":{"line":598,"column":101,"offset":21284},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#continue-to-build-out-the-allocator-implementation","title":null,"children":[],"data":{"hProperties":{"aria-label":"continue to build out the allocator implementation permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Continue to build out the ","position":{"start":{"line":600,"column":3,"offset":21288},"end":{"line":600,"column":29,"offset":21314},"indent":[]}},{"type":"link","title":null,"url":"8_allocator_impl.md","children":[{"type":"text","value":"allocator implementation","position":{"start":{"line":600,"column":30,"offset":21315},"end":{"line":600,"column":54,"offset":21339},"indent":[]}}],"position":{"start":{"line":600,"column":29,"offset":21314},"end":{"line":600,"column":76,"offset":21361},"indent":[]}},{"type":"text","value":"!","position":{"start":{"line":600,"column":76,"offset":21361},"end":{"line":600,"column":77,"offset":21362},"indent":[]}}],"position":{"start":{"line":600,"column":1,"offset":21286},"end":{"line":600,"column":77,"offset":21362},"indent":[]},"data":{"id":"continue-to-build-out-the-allocator-implementation","htmlAttributes":{"id":"continue-to-build-out-the-allocator-implementation"},"hProperties":{"id":"continue-to-build-out-the-allocator-implementation"}}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"../README.md","children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":602,"column":2,"offset":21365},"end":{"line":602,"column":19,"offset":21382},"indent":[]}}],"position":{"start":{"line":602,"column":1,"offset":21364},"end":{"line":602,"column":34,"offset":21397},"indent":[]}},{"type":"text","value":"  - Copyright 2019 Andy Curtis","position":{"start":{"line":602,"column":34,"offset":21397},"end":{"line":602,"column":64,"offset":21427},"indent":[]}}],"position":{"start":{"line":602,"column":1,"offset":21364},"end":{"line":602,"column":64,"offset":21427},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":603,"column":1,"offset":21428}}}}