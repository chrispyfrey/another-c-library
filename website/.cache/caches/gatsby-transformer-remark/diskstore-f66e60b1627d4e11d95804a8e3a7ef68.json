{"expireTime":9007200828255475000,"key":"transformer-remark-markdown-html-ast-a35d69ad7441787f07c13bd68a76c42b-gatsby-remark-prismjsgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Copyright 2019 Andy Curtis & Daniel Curtis","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"linked-lists"},"children":[{"type":"element","tagName":"a","properties":{"href":"#linked-lists","aria-label":"linked lists permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"Linked Lists","position":{"start":{"line":4,"column":3,"offset":47},"end":{"line":4,"column":15,"offset":59}}}],"position":{"start":{"line":4,"column":1,"offset":45},"end":{"line":4,"column":15,"offset":59}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"a-data-structure-interface"},"children":[{"type":"element","tagName":"a","properties":{"href":"#a-data-structure-interface","aria-label":"a data structure interface permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"A data structure interface","position":{"start":{"line":6,"column":4,"offset":64},"end":{"line":6,"column":30,"offset":90}}}],"position":{"start":{"line":6,"column":1,"offset":61},"end":{"line":6,"column":30,"offset":90}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We will explore the singly linked list, the doubly linked list, binary search trees, and finally, the red-black tree.  Each of these builds upon each other in complexity and can share a similar interface.  The code and interfaces are meant more for understanding and to show various optimizations along the way.  A linked list and binary search trees allow for inserting, finding, erasing, and iteration.","position":{"start":{"line":8,"column":1,"offset":92},"end":{"line":8,"column":405,"offset":496}}}],"position":{"start":{"line":8,"column":1,"offset":92},"end":{"line":8,"column":405,"offset":496}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This code that follows is found in illustrations/linked","position":{"start":{"line":10,"column":1,"offset":498},"end":{"line":10,"column":56,"offset":553}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structures/1","position":{"start":{"line":10,"column":57,"offset":554},"end":{"line":10,"column":69,"offset":566}}}],"position":{"start":{"line":10,"column":56,"offset":553},"end":{"line":10,"column":70,"offset":567}}},{"type":"text","value":"singly","position":{"start":{"line":10,"column":70,"offset":567},"end":{"line":10,"column":76,"offset":573}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":10,"column":77,"offset":574},"end":{"line":10,"column":83,"offset":580}}}],"position":{"start":{"line":10,"column":76,"offset":573},"end":{"line":10,"column":84,"offset":581}}},{"type":"text","value":"list","position":{"start":{"line":10,"column":84,"offset":581},"end":{"line":10,"column":88,"offset":585}}},{"type":"raw","value":"<br/>","position":{"start":{"line":10,"column":88,"offset":585},"end":{"line":10,"column":93,"offset":590}}},{"type":"text","value":"\nIf you change to that directory, you will find the following Makefile.  ","position":{"start":{"line":10,"column":93,"offset":590},"end":{"line":11,"column":73,"offset":663}}}],"position":{"start":{"line":10,"column":1,"offset":498},"end":{"line":11,"column":73,"offset":663}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">DATA_STRUCTURE<span class=\"token operator\">=</span>singly_linked_list\n\n<span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_data_structure examples\n\n<span class=\"token symbol\">test_data_structure</span><span class=\"token punctuation\">:</span> test_data_structure.c data_structure.h <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>.c\n\tgcc test_data_structure.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>.c -o test_data_structure -DDATA_STRUCTURE<span class=\"token operator\">=</span>\\\"<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>\\\"\n\n<span class=\"token symbol\">examples</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token operator\">@</span>./test_data_structure AB CAB ABCDEF AFCEDB\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\trm -f test_data_structure *~</code></pre></div>","position":{"start":{"line":13,"column":1,"offset":665},"end":{"line":26,"column":4,"offset":1033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When you run","position":{"start":{"line":28,"column":1,"offset":1035},"end":{"line":28,"column":13,"offset":1047}}}],"position":{"start":{"line":28,"column":1,"offset":1035},"end":{"line":28,"column":13,"offset":1047}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1048},"end":{"line":31,"column":4,"offset":1064}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first block with a colon will be run.  In this Makefile, it is the following line.","position":{"start":{"line":33,"column":1,"offset":1066},"end":{"line":33,"column":87,"offset":1152}}}],"position":{"start":{"line":33,"column":1,"offset":1066},"end":{"line":33,"column":87,"offset":1152}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_data_structure examples</code></pre></div>","position":{"start":{"line":34,"column":1,"offset":1153},"end":{"line":36,"column":4,"offset":1202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The all group simply refers to other groups to be built.  In this case, it is test","position":{"start":{"line":38,"column":1,"offset":1204},"end":{"line":38,"column":83,"offset":1286}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":38,"column":84,"offset":1287},"end":{"line":38,"column":88,"offset":1291}}}],"position":{"start":{"line":38,"column":83,"offset":1286},"end":{"line":38,"column":89,"offset":1292}}},{"type":"text","value":"structure and examples.","position":{"start":{"line":38,"column":89,"offset":1292},"end":{"line":38,"column":112,"offset":1315}}}],"position":{"start":{"line":38,"column":1,"offset":1204},"end":{"line":38,"column":112,"offset":1315}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">test_data_structure</span><span class=\"token punctuation\">:</span> test_data_structure.c data_structure.h <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>.c\n\tgcc test_data_structure.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>.c -o test_data_structure -DDATA_STRUCTURE<span class=\"token operator\">=</span>\\\"<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>\\\"\n\n<span class=\"token symbol\">examples</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token operator\">@</span>./test_data_structure AB CAB ABCDEF AFCEDB</code></pre></div>","position":{"start":{"line":39,"column":1,"offset":1316},"end":{"line":45,"column":4,"offset":1576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The lines of code after test","position":{"start":{"line":47,"column":1,"offset":1578},"end":{"line":47,"column":29,"offset":1606}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":47,"column":30,"offset":1607},"end":{"line":47,"column":34,"offset":1611}}}],"position":{"start":{"line":47,"column":29,"offset":1606},"end":{"line":47,"column":35,"offset":1612}}},{"type":"text","value":"structure will run if the file called test","position":{"start":{"line":47,"column":35,"offset":1612},"end":{"line":47,"column":77,"offset":1654}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":47,"column":78,"offset":1655},"end":{"line":47,"column":82,"offset":1659}}}],"position":{"start":{"line":47,"column":77,"offset":1654},"end":{"line":47,"column":83,"offset":1660}}},{"type":"text","value":"structure is older than the files after the colon.  If you edit test","position":{"start":{"line":47,"column":83,"offset":1660},"end":{"line":47,"column":151,"offset":1728}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":47,"column":152,"offset":1729},"end":{"line":47,"column":156,"offset":1733}}}],"position":{"start":{"line":47,"column":151,"offset":1728},"end":{"line":47,"column":157,"offset":1734}}},{"type":"text","value":"structure.c, data","position":{"start":{"line":47,"column":157,"offset":1734},"end":{"line":47,"column":174,"offset":1751}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structure.h or singly","position":{"start":{"line":47,"column":175,"offset":1752},"end":{"line":47,"column":196,"offset":1773}}}],"position":{"start":{"line":47,"column":174,"offset":1751},"end":{"line":47,"column":197,"offset":1774}}},{"type":"text","value":"linked","position":{"start":{"line":47,"column":197,"offset":1774},"end":{"line":47,"column":203,"offset":1780}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"list.h (same as $(DATA","position":{"start":{"line":47,"column":204,"offset":1781},"end":{"line":47,"column":226,"offset":1803}}}],"position":{"start":{"line":47,"column":203,"offset":1780},"end":{"line":47,"column":227,"offset":1804}}},{"type":"text","value":"STRUCTURE).h), the program will be built using the following line of code.  $(DATA","position":{"start":{"line":47,"column":227,"offset":1804},"end":{"line":47,"column":309,"offset":1886}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"STRUCTURE) is converted to singly","position":{"start":{"line":47,"column":310,"offset":1887},"end":{"line":47,"column":343,"offset":1920}}}],"position":{"start":{"line":47,"column":309,"offset":1886},"end":{"line":47,"column":344,"offset":1921}}},{"type":"text","value":"linked","position":{"start":{"line":47,"column":344,"offset":1921},"end":{"line":47,"column":350,"offset":1927}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"list.  The output is test","position":{"start":{"line":47,"column":351,"offset":1928},"end":{"line":47,"column":376,"offset":1953}}}],"position":{"start":{"line":47,"column":350,"offset":1927},"end":{"line":47,"column":377,"offset":1954}}},{"type":"text","value":"data_structure.","position":{"start":{"line":47,"column":377,"offset":1954},"end":{"line":47,"column":392,"offset":1969}}}],"position":{"start":{"line":47,"column":1,"offset":1578},"end":{"line":47,"column":392,"offset":1969}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">gcc test_data_structure.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>.c -o test_data_structure -DDATA_STRUCTURE<span class=\"token operator\">=</span>\\\"<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>DATA_STRUCTURE<span class=\"token punctuation\">)</span>\\\"</code></pre></div>","position":{"start":{"line":48,"column":1,"offset":1970},"end":{"line":50,"column":4,"offset":2093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you didn't want to use a Makefile to build test","position":{"start":{"line":52,"column":1,"offset":2095},"end":{"line":52,"column":51,"offset":2145}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":52,"column":52,"offset":2146},"end":{"line":52,"column":56,"offset":2150}}}],"position":{"start":{"line":52,"column":51,"offset":2145},"end":{"line":52,"column":57,"offset":2151}}},{"type":"text","value":"structure, you could do so from the command line using the following command.","position":{"start":{"line":52,"column":57,"offset":2151},"end":{"line":52,"column":134,"offset":2228}}}],"position":{"start":{"line":52,"column":1,"offset":2095},"end":{"line":52,"column":134,"offset":2228}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc test_data_structure.c singly_linked_list.c -o test_data_structure -DDATA_STRUCTURE<span class=\"token operator\">=</span><span class=\"token punctuation\">\\</span>\"singly_linked_list<span class=\"token punctuation\">\\</span>\"</code></pre></div>","position":{"start":{"line":54,"column":1,"offset":2230},"end":{"line":56,"column":4,"offset":2351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The examples block will run every time because it doesn't have any dependencies, and examples isn't a file that exists.  If you were to create a file called examples, then the examples block would cease to run.  The @ symbol prevents the command from being printed to the screen.  By running ","position":{"start":{"line":58,"column":1,"offset":2353},"end":{"line":58,"column":293,"offset":2645}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":293,"offset":2645},"end":{"line":58,"column":296,"offset":2648}}},{"type":"text","value":"make","position":{"start":{"line":58,"column":296,"offset":2648},"end":{"line":58,"column":300,"offset":2652}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":300,"offset":2652},"end":{"line":58,"column":304,"offset":2656}}},{"type":"text","value":", you will effectively build test","position":{"start":{"line":58,"column":304,"offset":2656},"end":{"line":58,"column":337,"offset":2689}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":58,"column":338,"offset":2690},"end":{"line":58,"column":342,"offset":2694}}}],"position":{"start":{"line":58,"column":337,"offset":2689},"end":{"line":58,"column":343,"offset":2695}}},{"type":"text","value":"structure if it needs to build and run the examples block.  Running ","position":{"start":{"line":58,"column":343,"offset":2695},"end":{"line":58,"column":411,"offset":2763}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":411,"offset":2763},"end":{"line":58,"column":414,"offset":2766}}},{"type":"text","value":"make clean","position":{"start":{"line":58,"column":414,"offset":2766},"end":{"line":58,"column":424,"offset":2776}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":424,"offset":2776},"end":{"line":58,"column":428,"offset":2780}}},{"type":"text","value":" will clean up the binary.  You can run any block by specifying it.  ","position":{"start":{"line":58,"column":428,"offset":2780},"end":{"line":58,"column":497,"offset":2849}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":497,"offset":2849},"end":{"line":58,"column":500,"offset":2852}}},{"type":"text","value":"make all","position":{"start":{"line":58,"column":500,"offset":2852},"end":{"line":58,"column":508,"offset":2860}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":508,"offset":2860},"end":{"line":58,"column":512,"offset":2864}}},{"type":"text","value":" is equivalent to running ","position":{"start":{"line":58,"column":512,"offset":2864},"end":{"line":58,"column":538,"offset":2890}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":538,"offset":2890},"end":{"line":58,"column":541,"offset":2893}}},{"type":"text","value":"make","position":{"start":{"line":58,"column":541,"offset":2893},"end":{"line":58,"column":545,"offset":2897}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":545,"offset":2897},"end":{"line":58,"column":549,"offset":2901}}},{"type":"text","value":" as ","position":{"start":{"line":58,"column":549,"offset":2901},"end":{"line":58,"column":553,"offset":2905}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":553,"offset":2905},"end":{"line":58,"column":556,"offset":2908}}},{"type":"text","value":"make","position":{"start":{"line":58,"column":556,"offset":2908},"end":{"line":58,"column":560,"offset":2912}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":560,"offset":2912},"end":{"line":58,"column":564,"offset":2916}}},{"type":"text","value":" runs the first block.  If you just want to run the examples block, you can by running ","position":{"start":{"line":58,"column":564,"offset":2916},"end":{"line":58,"column":651,"offset":3003}}},{"type":"raw","value":"<b>","position":{"start":{"line":58,"column":651,"offset":3003},"end":{"line":58,"column":654,"offset":3006}}},{"type":"text","value":"make examples","position":{"start":{"line":58,"column":654,"offset":3006},"end":{"line":58,"column":667,"offset":3019}}},{"type":"raw","value":"</b>","position":{"start":{"line":58,"column":667,"offset":3019},"end":{"line":58,"column":671,"offset":3023}}},{"type":"text","value":".  ","position":{"start":{"line":58,"column":671,"offset":3023},"end":{"line":58,"column":674,"offset":3026}}}],"position":{"start":{"line":58,"column":1,"offset":2353},"end":{"line":58,"column":674,"offset":3026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Go ahead and read the code in illustrations/3","position":{"start":{"line":60,"column":1,"offset":3028},"end":{"line":60,"column":46,"offset":3073}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":60,"column":47,"offset":3074},"end":{"line":60,"column":53,"offset":3080}}}],"position":{"start":{"line":60,"column":46,"offset":3073},"end":{"line":60,"column":54,"offset":3081}}},{"type":"text","value":"structures/1","position":{"start":{"line":60,"column":54,"offset":3081},"end":{"line":60,"column":66,"offset":3093}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"singly","position":{"start":{"line":60,"column":67,"offset":3094},"end":{"line":60,"column":73,"offset":3100}}}],"position":{"start":{"line":60,"column":66,"offset":3093},"end":{"line":60,"column":74,"offset":3101}}},{"type":"text","value":"linked_list and then continue with this book.  The code is inlined in the book as well, but it never hurts to read code and try and understand it.  To illustrate how red-black trees work, it makes sense to understand linked lists and binary search trees well first.  A great way to understand code is to have something which you can build, change, and experiment with.  This first example is a bit more involved than the typical hello world program.  However, it provides the basis for understanding more complicated work and is about as simple as I can make it.","position":{"start":{"line":60,"column":74,"offset":3101},"end":{"line":60,"column":636,"offset":3663}}}],"position":{"start":{"line":60,"column":1,"offset":3028},"end":{"line":60,"column":636,"offset":3663}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you run ","position":{"start":{"line":62,"column":1,"offset":3665},"end":{"line":62,"column":12,"offset":3676}}},{"type":"raw","value":"<code class=\"language-text\">make</code>","position":{"start":{"line":62,"column":12,"offset":3676},"end":{"line":62,"column":18,"offset":3682}}},{"type":"text","value":", you will get the following output.","position":{"start":{"line":62,"column":18,"offset":3682},"end":{"line":62,"column":54,"offset":3718}}}],"position":{"start":{"line":62,"column":1,"offset":3665},"end":{"line":62,"column":54,"offset":3718}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make\ngcc test_data_structure.c singly_linked_list.c -o test_data_structure -DDATA_STRUCTURE=\\&quot;singly_linked_list\\&quot;\nCreating singly_linked_list for AB\nroot -&gt; B -&gt; A -&gt; NULL\nprint_using_iteration: BA\n\nCreating singly_linked_list for CAB\nroot -&gt; B -&gt; A -&gt; C -&gt; NULL\nprint_using_iteration: BAC\n\nCreating singly_linked_list for ABCDEF\nroot -&gt; F -&gt; E -&gt; D -&gt; C -&gt; B -&gt; A -&gt; NULL\nprint_using_iteration: FEDCBA\n\nCreating singly_linked_list for AFCEDB\nroot -&gt; B -&gt; D -&gt; E -&gt; C -&gt; F -&gt; A -&gt; NULL\nprint_using_iteration: BDECFA</code></pre></div>","position":{"start":{"line":64,"column":1,"offset":3720},"end":{"line":82,"column":4,"offset":4246}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After the code is built, ","position":{"start":{"line":84,"column":1,"offset":4248},"end":{"line":84,"column":26,"offset":4273}}},{"type":"raw","value":"<b>","position":{"start":{"line":84,"column":26,"offset":4273},"end":{"line":84,"column":29,"offset":4276}}},{"type":"text","value":"./test","position":{"start":{"line":84,"column":29,"offset":4276},"end":{"line":84,"column":35,"offset":4282}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":84,"column":36,"offset":4283},"end":{"line":84,"column":40,"offset":4287}}}],"position":{"start":{"line":84,"column":35,"offset":4282},"end":{"line":84,"column":41,"offset":4288}}},{"type":"text","value":"structure AB CAB ABCDEF AFCEDB","position":{"start":{"line":84,"column":41,"offset":4288},"end":{"line":84,"column":71,"offset":4318}}},{"type":"raw","value":"</b>","position":{"start":{"line":84,"column":71,"offset":4318},"end":{"line":84,"column":75,"offset":4322}}},{"type":"text","value":" is run, which creates four linked lists based upon the arguments passed in.  The output shows how the input transforms into a linked list with arrows (->) for pointers and letters for each node.  The linked lists will place the items in reverse order (notice that BA becomes root -> A -> B -> NULL).  root is just a pointer and not a node.  For your data structure to be accessible, you must have a reference to it.  NULL is to indicate that B doesn't point to a node.  This doesn't have to be the case. However, to show off linked lists, it is good to know the two instruction insertion method, which is demonstrated below.  ","position":{"start":{"line":84,"column":75,"offset":4322},"end":{"line":84,"column":702,"offset":4949}}}],"position":{"start":{"line":84,"column":1,"offset":4248},"end":{"line":84,"column":702,"offset":4949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The primary goal is to build a red-black tree with an interface that looks something like the following (it'll change once we address production concerns).  The data","position":{"start":{"line":86,"column":1,"offset":4951},"end":{"line":86,"column":166,"offset":5116}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structure.h is an interface that can be used for singly-linked lists, doubly linked lists, binary search trees, and the red-black tree.  The interface or header file below separates the implementation from the definition.  The definition is the only thing that test","position":{"start":{"line":86,"column":167,"offset":5117},"end":{"line":86,"column":432,"offset":5382}}}],"position":{"start":{"line":86,"column":166,"offset":5116},"end":{"line":86,"column":433,"offset":5383}}},{"type":"text","value":"data_structure.c (later) will be able to work with.  When building larger software packages, defining clean interfaces can greatly reduce complexity.","position":{"start":{"line":86,"column":433,"offset":5383},"end":{"line":86,"column":582,"offset":5532}}}],"position":{"start":{"line":86,"column":1,"offset":4951},"end":{"line":86,"column":582,"offset":5532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"data_structure.h","position":{"start":{"line":88,"column":1,"offset":5534},"end":{"line":88,"column":17,"offset":5550}}}],"position":{"start":{"line":88,"column":1,"offset":5534},"end":{"line":88,"column":17,"offset":5550}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _data_structure_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _data_structure_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_common.h\"</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> node_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  You may or may not want to have methods like node_init, node_key, node_print,\n  and node_destroy.  My purpose in having them is to provide a uniform interface\n  for test_data_structure.  This is only an interface for testing.\n*/</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_destroy</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token function\">node_key</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_print</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  Given a data structure, find a node given a pointer to the root node and the key of interest.\n*/</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  If the key doesn't exist, insert a node into the data structure.  The\n  node_to_insert has already been initialized by the client application (most likely through node_init).  The node's physical location in memory will not change as a result of inserting or erasing nodes.  Because the root might change, a pointer to the root is passed to node_insert.\n*/</span>\nbool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  Once finding a node, erase the node from the data structure.  The\n  node_to_erase is typically found through node_find.  The pointer to root is passed to node_erase as the root might change.  node_erase doesn't free resources used by node_to_erase.  It only unlinks it from the data structure.\n*/</span>\nbool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_erase<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Iteration\n  All of the linked structures will support first and next.\n  Some can support last and previous as well.\n*/</span>\nbool <span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_first</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_last</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\n  To destroy a data structure, you will need to use the following pattern...\n  node_t *n = node_first_to_erase(root);\n  while(n) {\n    node_t *next = node_next_to_erase(n);\n    node_destroy(n);\n    n = next;\n  }\n\n  Notice that a temporary link to the next node to erase is saved before destroying the node.  For binary search trees, the beginning to the end isn't the same as a sorted order.  It's known as postorder iteration.  Postorder iteration can be useful for fast construction and destruction of binary search trees.  By having an alternate iterator for destruction, we can have\n  one interface which works for several data structure types.\n*/</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_first_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_next_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":89,"column":1,"offset":5551},"end":{"line":151,"column":4,"offset":7988}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In C, you can specify a struct without indicating how it is defined in a header file.  The details can either be hidden in the implementation or declared later.  By declaring the structure in this way, outside applications won't be able to access members of the struct.  I generally try and hide implementation details, providing a minimalistic interface.","position":{"start":{"line":153,"column":1,"offset":7990},"end":{"line":153,"column":356,"offset":8345}}}],"position":{"start":{"line":153,"column":1,"offset":7990},"end":{"line":153,"column":356,"offset":8345}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> node_t<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":154,"column":1,"offset":8346},"end":{"line":157,"column":4,"offset":8399}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The rest of the functions were commented inline above.","position":{"start":{"line":159,"column":1,"offset":8401},"end":{"line":159,"column":55,"offset":8455}}}],"position":{"start":{"line":159,"column":1,"offset":8401},"end":{"line":159,"column":55,"offset":8455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-data-structure-interface-test-driver"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-data-structure-interface-test-driver","aria-label":"the data structure interface test driver permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The data structure interface test driver","position":{"start":{"line":161,"column":4,"offset":8460},"end":{"line":161,"column":44,"offset":8500}}}],"position":{"start":{"line":161,"column":1,"offset":8457},"end":{"line":161,"column":44,"offset":8500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In addition to having a common interface, I have created a set of functions to test the data structure.  The set of functions will include data_structure.h and test that the code is doing what it is supposed to do and show how to use the interface.","position":{"start":{"line":163,"column":1,"offset":8502},"end":{"line":163,"column":249,"offset":8750}}}],"position":{"start":{"line":163,"column":1,"offset":8502},"end":{"line":163,"column":249,"offset":8750}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"data_structure.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token comment\">/*\n  arg contains several characters (or letters).  Each letter is inserted\n  into the data structure, assuming that it hasn't already been inserted.\n  The characters are inserted in the order that they are found within the string.  Because this is a tool to test the data structure, I also test that if an insert should work, that it does work.  Once the insert succeeds, test if the item can be found.  After all of the inserts are done, the root of the data structure is returned.\n*/</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">fill_data_structure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find failed for %c and insert failed as well!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find failed for %c after insert succeeded!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  This function is similar to fill_data_structure, except that the characters\n  are inserted in random order.\n*/</span>\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">fill_data_structure_randomly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num_inserted <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num_inserted <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> p<span class=\"token operator\">+</span>pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find failed for %c and insert failed as well!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      num_inserted<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find failed for %c after insert succeeded!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  find_everything checks that every character in arg is properly inserted in the data structure.\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">find_everything</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// check that everything can still be found</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Find failed for %c after binary tree was constructed!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  find_and_erase_everything iterates over all of the characters in arg in random order and erases them.  erase should succeed if find succeeds.  If it doesn't, an error is printed.\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">find_and_erase_everything</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">;</span> <span class=\"token comment\">// find and erase all of the nodes</span>\n  <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> num_destroyed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num_destroyed <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> len<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> p<span class=\"token operator\">+</span>pos<span class=\"token punctuation\">;</span>\n    node_t <span class=\"token operator\">*</span>node_to_erase <span class=\"token operator\">=</span> <span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_erase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_to_erase<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Erase failed for %c after find succeeded!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      num_destroyed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">node_destroy</span><span class=\"token punctuation\">(</span>node_to_erase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  print the datastructure iterating over the keys using first/next\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_using_iteration</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print_using_iteration: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_first</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">node_key</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  print the datastructure backwards iterating over the keys using last/previous\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_using_reverse_iteration</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print_using_reverse_iteration: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_last</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">node_key</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> <span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  destroy the data structure by iterating over the keys using the\n  first_to_erase/next_to_erase methods\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">destroy_using_iteration</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">node_first_to_erase</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    node_t <span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> <span class=\"token function\">node_next_to_erase</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">node_destroy</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n1.  Create the data structure N times (100000) using the letters that are found\n    in arg.  Randomize the insertion and erase order.\n2.  Create the data structure using the letters that are found in arg by\n    inserting them in the order of the string.  Print the whole data structure\n    using the overall print method and using iteration.\n3.  Finally, destroy the structure by using the first_node_to_erase,\n    node_next_to_erase methods (which may be defined to be the same as\n    first/next)\n*/</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_data_structure</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating %s for %s\\n\"</span><span class=\"token punctuation\">,</span> DATA_STRUCTURE<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    root <span class=\"token operator\">=</span> <span class=\"token function\">fill_data_structure_randomly</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// node_print(root);</span>\n    <span class=\"token function\">find_everything</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">find_and_erase_everything</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  root <span class=\"token operator\">=</span> <span class=\"token function\">fill_data_structure</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">node_print</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_using_iteration</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print_using_reverse_iteration</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">destroy_using_iteration</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  The various tests will use A-Z, a-z, and 0-9 for valid keys\n*/</span>\nbool <span class=\"token function\">valid_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'A'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ch <span class=\"token operator\">>=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">&amp;&amp;</span> ch <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  Create a copy of the input string (p) and only include valid characters (based upon valid_char above).  Also, check that each character is\n  unique.  The wp is only updated and incremented if a character is new and is\n  valid\n*/</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">get_valid_characters</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>res <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>wp <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">valid_char</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\ts <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> wp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">==</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\ts<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> wp<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">*</span>wp<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token operator\">*</span>wp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  The main function expects to have two or more command-line arguments and calls\n  the function test_data_structure with each argument (after extracting valid\n  characters).  If there are less than two arguments, a usage statement is\n  printed, and the program exits.  One useful tip from the code below is that in\n  C or C++, you can chain a series of string constants together by just having spacing or a newline character separating the string constants.\n*/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s &lt;sequence of characters for tree> [sequence2] ...\"</span>\n            <span class=\"token string\">\" [sequenceN]\\n\"</span><span class=\"token punctuation\">,</span>\n            argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"  Constructs data structures and runs various tests on them.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>arg <span class=\"token operator\">=</span> <span class=\"token function\">get_valid_characters</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">test_data_structure</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":165,"column":1,"offset":8752},"end":{"line":390,"column":4,"offset":15204}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The code is commented above (it's a good idea to begin reading code from the\nmain function.","position":{"start":{"line":392,"column":1,"offset":15206},"end":{"line":393,"column":15,"offset":15297}}}],"position":{"start":{"line":392,"column":1,"offset":15206},"end":{"line":393,"column":15,"offset":15297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The include order is important.  If you place data","position":{"start":{"line":395,"column":1,"offset":15299},"end":{"line":395,"column":51,"offset":15349}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structure.h after the standard includes, you might mask an error where data","position":{"start":{"line":395,"column":52,"offset":15350},"end":{"line":395,"column":127,"offset":15425}}}],"position":{"start":{"line":395,"column":51,"offset":15349},"end":{"line":395,"column":128,"offset":15426}}},{"type":"text","value":"structure.h doesn't include all of its dependencies properly.","position":{"start":{"line":395,"column":128,"offset":15426},"end":{"line":395,"column":189,"offset":15487}}}],"position":{"start":{"line":395,"column":1,"offset":15299},"end":{"line":395,"column":189,"offset":15487}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"data_structure.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></code></pre></div>","position":{"start":{"line":396,"column":1,"offset":15488},"end":{"line":402,"column":4,"offset":15585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-singly-linked-list"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-singly-linked-list","aria-label":"the singly linked list permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The singly linked list","position":{"start":{"line":404,"column":4,"offset":15590},"end":{"line":404,"column":26,"offset":15612}}}],"position":{"start":{"line":404,"column":1,"offset":15587},"end":{"line":404,"column":26,"offset":15612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the previous section, we implemented a basic interface.  Below is the implementation of the singly-linked list.","position":{"start":{"line":406,"column":1,"offset":15614},"end":{"line":406,"column":115,"offset":15728}}}],"position":{"start":{"line":406,"column":1,"offset":15614},"end":{"line":406,"column":115,"offset":15728}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"data_structure.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_destroy</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">node_key</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> root<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_to_insert<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_print</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> %c\"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_erase<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> node_to_erase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// no end of list check</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will cause the program to crash if n is NULL (which is what we are doing anyways)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n    prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_first</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_last</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nbool <span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_first_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_next_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":408,"column":1,"offset":15730},"end":{"line":488,"column":4,"offset":17281}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Singly-linked lists have a single link or pointer connecting one node to the next.  The pointer is often called next, but can be anything.  Because the structure is hidden inside the implementation, there are functions to initialize and destroy the object.  node_key is also needed to get the key member for the same reason.  ","position":{"start":{"line":490,"column":1,"offset":17283},"end":{"line":490,"column":327,"offset":17609}}}],"position":{"start":{"line":490,"column":1,"offset":17283},"end":{"line":490,"column":327,"offset":17609}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">node_destroy</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">char</span> <span class=\"token function\">node_key</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":491,"column":1,"offset":17610},"end":{"line":507,"column":4,"offset":17887}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Insertion into a singly linked list is a very fast operation typically requiring two lines of code.  1.  Associate the link on the node to insert it to the root node.  2.  Set the root node pointer to point to the node to insert.","position":{"start":{"line":509,"column":1,"offset":17889},"end":{"line":509,"column":230,"offset":18118}}}],"position":{"start":{"line":509,"column":1,"offset":17889},"end":{"line":509,"column":230,"offset":18118}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_to_insert<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span> <span class=\"token comment\">// line 1</span>\n  <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// line 2</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":510,"column":1,"offset":18119},"end":{"line":516,"column":4,"offset":18286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Iterating through a linked list might look like the following:","position":{"start":{"line":518,"column":1,"offset":18288},"end":{"line":518,"column":63,"offset":18350}}}],"position":{"start":{"line":518,"column":1,"offset":18288},"end":{"line":518,"column":63,"offset":18350}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">iterate_through_linked_list</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":519,"column":1,"offset":18351},"end":{"line":526,"column":4,"offset":18461}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To iterate through a linked list looking for a particular match, you would do the following.","position":{"start":{"line":528,"column":1,"offset":18463},"end":{"line":528,"column":93,"offset":18555}}}],"position":{"start":{"line":528,"column":1,"offset":18463},"end":{"line":528,"column":93,"offset":18555}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> root<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":529,"column":1,"offset":18556},"end":{"line":538,"column":4,"offset":18714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With lists, the root node is the first node.  With binary search trees, the first node is the left most node.","position":{"start":{"line":540,"column":1,"offset":18716},"end":{"line":540,"column":110,"offset":18825}}}],"position":{"start":{"line":540,"column":1,"offset":18716},"end":{"line":540,"column":110,"offset":18825}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_first</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":541,"column":1,"offset":18826},"end":{"line":543,"column":4,"offset":18878}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_next</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":545,"column":1,"offset":18880},"end":{"line":547,"column":4,"offset":18937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For the singly linked list, going backward doesn't work, so node","position":{"start":{"line":549,"column":1,"offset":18939},"end":{"line":549,"column":65,"offset":19003}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"previous","position":{"start":{"line":549,"column":66,"offset":19004},"end":{"line":549,"column":74,"offset":19012}}}],"position":{"start":{"line":549,"column":65,"offset":19003},"end":{"line":549,"column":75,"offset":19013}}},{"type":"text","value":"supported should return false and node_previous should return NULL","position":{"start":{"line":549,"column":75,"offset":19013},"end":{"line":549,"column":141,"offset":19079}}}],"position":{"start":{"line":549,"column":1,"offset":18939},"end":{"line":549,"column":141,"offset":19079}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":550,"column":1,"offset":19080},"end":{"line":554,"column":4,"offset":19188}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While singly linked lists can't go backward due to a lack of a previous pointer, you can keep track of the last node as you iterate through the list.  This can be useful for finding the last node in a list or erasing a node.","position":{"start":{"line":556,"column":1,"offset":19190},"end":{"line":556,"column":225,"offset":19414}}}],"position":{"start":{"line":556,"column":1,"offset":19190},"end":{"line":556,"column":225,"offset":19414}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_last</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> prev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":557,"column":1,"offset":19415},"end":{"line":566,"column":4,"offset":19539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Erasing a node follows a similar approach to node_last, except the while(n) statement will also test to see if n matches the node to erase.","position":{"start":{"line":568,"column":1,"offset":19541},"end":{"line":568,"column":140,"offset":19680}}}],"position":{"start":{"line":568,"column":1,"offset":19541},"end":{"line":568,"column":140,"offset":19680}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_erase<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;&amp;</span> n <span class=\"token operator\">!=</span> node_to_erase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":569,"column":1,"offset":19681},"end":{"line":576,"column":4,"offset":19838}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once the while loop has finished, if n is not NULL, then it must match the node","position":{"start":{"line":578,"column":1,"offset":19840},"end":{"line":578,"column":80,"offset":19919}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":578,"column":81,"offset":19920},"end":{"line":578,"column":83,"offset":19922}}}],"position":{"start":{"line":578,"column":80,"offset":19919},"end":{"line":578,"column":84,"offset":19923}}},{"type":"text","value":"erase.  There are two conditions in the case that remain.  If prev is NULL, then the node to erase is at the head or root of the list.  In this case, link the root to the node that the current node to erase links to.  Otherwise, link the prev->next pointer to n's next pointer.  Finally, return true.  If n was NULL, then return false.  It is most likely that n will not be NULL (otherwise, we wouldn't have the node to erase in the first place).  Because of this, I choose to have this condition first.","position":{"start":{"line":578,"column":84,"offset":19923},"end":{"line":578,"column":587,"offset":20426}}}],"position":{"start":{"line":578,"column":1,"offset":19840},"end":{"line":578,"column":587,"offset":20426}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n      prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this should never happen!</span>\n  <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":579,"column":1,"offset":20427},"end":{"line":590,"column":4,"offset":20597}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A slightly less performant approach where we test for n being NULL first reduces nesting.  I use both approaches in practice (and sometimes don't test for n at all).","position":{"start":{"line":592,"column":1,"offset":20599},"end":{"line":592,"column":166,"offset":20764}}}],"position":{"start":{"line":592,"column":1,"offset":20599},"end":{"line":592,"column":166,"offset":20764}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n    prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":593,"column":1,"offset":20765},"end":{"line":601,"column":4,"offset":20873}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We could even consider implementing the code, assuming that node","position":{"start":{"line":603,"column":1,"offset":20875},"end":{"line":603,"column":65,"offset":20939}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":603,"column":66,"offset":20940},"end":{"line":603,"column":68,"offset":20942}}}],"position":{"start":{"line":603,"column":65,"offset":20939},"end":{"line":603,"column":69,"offset":20943}}},{"type":"text","value":"erase must exist like the following.  Because I'm choosing to abort if n is NULL due to incorrect usage, the version below is what ultimately ended up in our code.  This code would abort if n was NULL anyways in the while loop if the node","position":{"start":{"line":603,"column":69,"offset":20943},"end":{"line":603,"column":307,"offset":21181}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":603,"column":308,"offset":21182},"end":{"line":603,"column":310,"offset":21184}}}],"position":{"start":{"line":603,"column":307,"offset":21181},"end":{"line":603,"column":311,"offset":21185}}},{"type":"text","value":"erase didn't exist.","position":{"start":{"line":603,"column":311,"offset":21185},"end":{"line":603,"column":330,"offset":21204}}}],"position":{"start":{"line":603,"column":1,"offset":20875},"end":{"line":603,"column":330,"offset":21204}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_erase<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> node_to_erase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// no end of list check</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will cause the program to crash if n is NULL (which is what we are doing anyways)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n    prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will cause a crash if n is not found</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will cause a crash if n is not found</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":604,"column":1,"offset":21205},"end":{"line":617,"column":4,"offset":21643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Finally, it is fine for linked lists to use the first to last order for destroying the list.  node","position":{"start":{"line":619,"column":1,"offset":21645},"end":{"line":619,"column":99,"offset":21743}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"first","position":{"start":{"line":619,"column":100,"offset":21744},"end":{"line":619,"column":105,"offset":21749}}}],"position":{"start":{"line":619,"column":99,"offset":21743},"end":{"line":619,"column":106,"offset":21750}}},{"type":"text","value":"to","position":{"start":{"line":619,"column":106,"offset":21750},"end":{"line":619,"column":108,"offset":21752}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"erase and node","position":{"start":{"line":619,"column":109,"offset":21753},"end":{"line":619,"column":123,"offset":21767}}}],"position":{"start":{"line":619,"column":108,"offset":21752},"end":{"line":619,"column":124,"offset":21768}}},{"type":"text","value":"next","position":{"start":{"line":619,"column":124,"offset":21768},"end":{"line":619,"column":128,"offset":21772}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":619,"column":129,"offset":21773},"end":{"line":619,"column":131,"offset":21775}}}],"position":{"start":{"line":619,"column":128,"offset":21772},"end":{"line":619,"column":132,"offset":21776}}},{"type":"text","value":"erase are similar to node","position":{"start":{"line":619,"column":132,"offset":21776},"end":{"line":619,"column":157,"offset":21801}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"first and node","position":{"start":{"line":619,"column":158,"offset":21802},"end":{"line":619,"column":172,"offset":21816}}}],"position":{"start":{"line":619,"column":157,"offset":21801},"end":{"line":619,"column":173,"offset":21817}}},{"type":"text","value":"next respectively.","position":{"start":{"line":619,"column":173,"offset":21817},"end":{"line":619,"column":191,"offset":21835}}}],"position":{"start":{"line":619,"column":1,"offset":21645},"end":{"line":619,"column":191,"offset":21835}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_first_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_next_to_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":620,"column":1,"offset":21836},"end":{"line":624,"column":4,"offset":21956}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now that we are through the code, if you haven't done it, you can run ","position":{"start":{"line":626,"column":1,"offset":21958},"end":{"line":626,"column":71,"offset":22028}}},{"type":"raw","value":"<b>","position":{"start":{"line":626,"column":71,"offset":22028},"end":{"line":626,"column":74,"offset":22031}}},{"type":"text","value":"make","position":{"start":{"line":626,"column":74,"offset":22031},"end":{"line":626,"column":78,"offset":22035}}},{"type":"raw","value":"</b>","position":{"start":{"line":626,"column":78,"offset":22035},"end":{"line":626,"column":82,"offset":22039}}},{"type":"text","value":" in illustrations/linked","position":{"start":{"line":626,"column":82,"offset":22039},"end":{"line":626,"column":106,"offset":22063}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structures/1","position":{"start":{"line":626,"column":107,"offset":22064},"end":{"line":626,"column":119,"offset":22076}}}],"position":{"start":{"line":626,"column":106,"offset":22063},"end":{"line":626,"column":120,"offset":22077}}},{"type":"text","value":"singly","position":{"start":{"line":626,"column":120,"offset":22077},"end":{"line":626,"column":126,"offset":22083}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":626,"column":127,"offset":22084},"end":{"line":626,"column":133,"offset":22090}}}],"position":{"start":{"line":626,"column":126,"offset":22083},"end":{"line":626,"column":134,"offset":22091}}},{"type":"text","value":"list.  The output should look like the following.","position":{"start":{"line":626,"column":134,"offset":22091},"end":{"line":626,"column":183,"offset":22140}}}],"position":{"start":{"line":626,"column":1,"offset":21958},"end":{"line":626,"column":183,"offset":22140}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make\ngcc test_data_structure.c singly_linked_list.c -o test_data_structure -DDATA_STRUCTURE=\\&quot;singly_linked_list\\&quot;\nCreating singly_linked_list for AB\nroot -&gt; B -&gt; A -&gt; NULL\nprint_using_iteration: BA\n\nCreating singly_linked_list for CAB\nroot -&gt; B -&gt; A -&gt; C -&gt; NULL\nprint_using_iteration: BAC\n\nCreating singly_linked_list for ABCDEF\nroot -&gt; F -&gt; E -&gt; D -&gt; C -&gt; B -&gt; A -&gt; NULL\nprint_using_iteration: FEDCBA\n\nCreating singly_linked_list for AFCEDB\nroot -&gt; B -&gt; D -&gt; E -&gt; C -&gt; F -&gt; A -&gt; NULL\nprint_using_iteration: BDECFA</code></pre></div>","position":{"start":{"line":628,"column":1,"offset":22142},"end":{"line":646,"column":4,"offset":22668}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might notice that the linked lists are reversed.  This is because we are using the two-line insert technique and putting items at the front of the list.  When using singly-linked lists, it is common to maintain a head (or root) and a tail pointer.  The tail refers to the last node or NULL if the list is empty.  By maintaining a tail, one can efficiently insert items at the end of the list.  If you don't maintain a tail and still wish to insert items at the end of the list, you can do that by skipping to the last node and then linking it to your new node from the last node.","position":{"start":{"line":648,"column":1,"offset":22670},"end":{"line":648,"column":584,"offset":23253}}}],"position":{"start":{"line":648,"column":1,"offset":22670},"end":{"line":648,"column":584,"offset":23253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"the-doubly-linked-list"},"children":[{"type":"element","tagName":"a","properties":{"href":"#the-doubly-linked-list","aria-label":"the doubly linked list permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"text","value":"The doubly linked list","position":{"start":{"line":650,"column":4,"offset":23258},"end":{"line":650,"column":26,"offset":23280}}}],"position":{"start":{"line":650,"column":1,"offset":23255},"end":{"line":650,"column":26,"offset":23280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Doubly linked lists introduce link nodes in both directions.  A doubly linked list will have a next and a previous pointer (the naming is up to you).  For example, in the case of a doubly-linked list for B -> A -> C, the following would hold.  We will denote a link starting from a node with a - and the direction being > next or < previous.  You can think of the linkage like the following illustrations.","position":{"start":{"line":652,"column":1,"offset":23282},"end":{"line":652,"column":406,"offset":23687}}}],"position":{"start":{"line":652,"column":1,"offset":23282},"end":{"line":652,"column":406,"offset":23687}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">B -&gt; A, B -&lt; NULL (B links to A for next pointer and NULL for the previous pointer)\nA -&gt; C, A -&lt; B (A links to C for next pointer and B for the previous pointer)\nC -&gt; NULL, C -&lt; A (C links to NULL for next pointer and A for the previous pointer)</code></pre></div>","position":{"start":{"line":654,"column":1,"offset":23689},"end":{"line":658,"column":4,"offset":23942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next pointers are the same as singly linked list.","position":{"start":{"line":660,"column":1,"offset":23944},"end":{"line":660,"column":50,"offset":23993}}}],"position":{"start":{"line":660,"column":1,"offset":23944},"end":{"line":660,"column":50,"offset":23993}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root -&gt; B -&gt; A -&gt; C -&gt; NULL</code></pre></div>","position":{"start":{"line":661,"column":1,"offset":23994},"end":{"line":663,"column":4,"offset":24029}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Previous pointers are new.  Note that B (the root or head node) doesn't point back to the root pointer.  The root pointer is not a node.  It is just a way of remembering where the data structure lives in memory (as its a pointer to the first node).","position":{"start":{"line":665,"column":1,"offset":24031},"end":{"line":665,"column":249,"offset":24279}}}],"position":{"start":{"line":665,"column":1,"offset":24031},"end":{"line":665,"column":249,"offset":24279}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">NULL &lt;- B &lt;- A &lt;- C</code></pre></div>","position":{"start":{"line":666,"column":1,"offset":24280},"end":{"line":668,"column":4,"offset":24307}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The full code for the doubly linked list is found in illustrations/linked","position":{"start":{"line":670,"column":1,"offset":24309},"end":{"line":670,"column":74,"offset":24382}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"structures/2","position":{"start":{"line":670,"column":75,"offset":24383},"end":{"line":670,"column":87,"offset":24395}}}],"position":{"start":{"line":670,"column":74,"offset":24382},"end":{"line":670,"column":88,"offset":24396}}},{"type":"text","value":"doubly","position":{"start":{"line":670,"column":88,"offset":24396},"end":{"line":670,"column":94,"offset":24402}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":670,"column":95,"offset":24403},"end":{"line":670,"column":101,"offset":24409}}}],"position":{"start":{"line":670,"column":94,"offset":24402},"end":{"line":670,"column":102,"offset":24410}}},{"type":"text","value":"list.  The code is identical, with the following exceptions in doubly","position":{"start":{"line":670,"column":102,"offset":24410},"end":{"line":670,"column":171,"offset":24479}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":670,"column":172,"offset":24480},"end":{"line":670,"column":178,"offset":24486}}}],"position":{"start":{"line":670,"column":171,"offset":24479},"end":{"line":670,"column":179,"offset":24487}}},{"type":"text","value":"list.c (name changed from singly","position":{"start":{"line":670,"column":179,"offset":24487},"end":{"line":670,"column":211,"offset":24519}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"linked","position":{"start":{"line":670,"column":212,"offset":24520},"end":{"line":670,"column":218,"offset":24526}}}],"position":{"start":{"line":670,"column":211,"offset":24519},"end":{"line":670,"column":219,"offset":24527}}},{"type":"text","value":"list.c) and the Makefile where the DATA","position":{"start":{"line":670,"column":219,"offset":24527},"end":{"line":670,"column":258,"offset":24566}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"STRUCTURE constant changed to doubly","position":{"start":{"line":670,"column":259,"offset":24567},"end":{"line":670,"column":295,"offset":24603}}}],"position":{"start":{"line":670,"column":258,"offset":24566},"end":{"line":670,"column":296,"offset":24604}}},{"type":"text","value":"linked_list.","position":{"start":{"line":670,"column":296,"offset":24604},"end":{"line":670,"column":308,"offset":24616}}}],"position":{"start":{"line":670,"column":1,"offset":24309},"end":{"line":670,"column":308,"offset":24616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The node_s struct changes from","position":{"start":{"line":672,"column":1,"offset":24618},"end":{"line":672,"column":31,"offset":24648}}}],"position":{"start":{"line":672,"column":1,"offset":24618},"end":{"line":672,"column":31,"offset":24648}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":673,"column":1,"offset":24649},"end":{"line":678,"column":4,"offset":24711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To the following to include a previous pointer.","position":{"start":{"line":680,"column":1,"offset":24713},"end":{"line":680,"column":48,"offset":24760}}}],"position":{"start":{"line":680,"column":1,"offset":24713},"end":{"line":680,"column":48,"offset":24760}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">node_s</span> <span class=\"token operator\">*</span>previous<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> key<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":681,"column":1,"offset":24761},"end":{"line":687,"column":4,"offset":24850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The node","position":{"start":{"line":689,"column":1,"offset":24852},"end":{"line":689,"column":9,"offset":24860}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"previous","position":{"start":{"line":689,"column":10,"offset":24861},"end":{"line":689,"column":18,"offset":24869}}}],"position":{"start":{"line":689,"column":9,"offset":24860},"end":{"line":689,"column":19,"offset":24870}}},{"type":"text","value":"supported and node_previous are changed from","position":{"start":{"line":689,"column":19,"offset":24870},"end":{"line":689,"column":63,"offset":24914}}}],"position":{"start":{"line":689,"column":1,"offset":24852},"end":{"line":689,"column":63,"offset":24914}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":690,"column":1,"offset":24915},"end":{"line":694,"column":4,"offset":25023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To the following, because there is now a method for iterating through previous elements.","position":{"start":{"line":696,"column":1,"offset":25025},"end":{"line":696,"column":89,"offset":25113}}}],"position":{"start":{"line":696,"column":1,"offset":25025},"end":{"line":696,"column":89,"offset":25113}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_previous_supported</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\nnode_t <span class=\"token operator\">*</span><span class=\"token function\">node_previous</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> n<span class=\"token operator\">-></span>previous<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":697,"column":1,"offset":25114},"end":{"line":701,"column":4,"offset":25228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The node_init method needs to change from","position":{"start":{"line":703,"column":1,"offset":25230},"end":{"line":703,"column":42,"offset":25271}}}],"position":{"start":{"line":703,"column":1,"offset":25230},"end":{"line":703,"column":42,"offset":25271}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":704,"column":1,"offset":25272},"end":{"line":711,"column":4,"offset":25406}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To the following to initialize the previous member.  It is possibly more efficient to assign multiple variables of the same type to a single value when you are able as I do in the ","position":{"start":{"line":713,"column":1,"offset":25408},"end":{"line":713,"column":181,"offset":25588}}},{"type":"raw","value":"<code class=\"language-text\">n-&gt;next = n-&gt;previous = NULL;</code>","position":{"start":{"line":713,"column":181,"offset":25588},"end":{"line":713,"column":212,"offset":25619}}},{"type":"text","value":" line demonstrated below.","position":{"start":{"line":713,"column":212,"offset":25619},"end":{"line":713,"column":237,"offset":25644}}}],"position":{"start":{"line":713,"column":1,"offset":25408},"end":{"line":713,"column":237,"offset":25644}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">node_t <span class=\"token operator\">*</span><span class=\"token function\">node_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>node_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>previous <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  n<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":714,"column":1,"offset":25645},"end":{"line":721,"column":4,"offset":25793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The insert method will change from","position":{"start":{"line":723,"column":1,"offset":25795},"end":{"line":723,"column":35,"offset":25829}}}],"position":{"start":{"line":723,"column":1,"offset":25795},"end":{"line":723,"column":35,"offset":25829}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_to_insert<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":724,"column":1,"offset":25830},"end":{"line":730,"column":4,"offset":25971}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To the following to initialize the previous pointer properly.  After the node","position":{"start":{"line":732,"column":1,"offset":25973},"end":{"line":732,"column":78,"offset":26050}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":732,"column":79,"offset":26051},"end":{"line":732,"column":81,"offset":26053}}}],"position":{"start":{"line":732,"column":78,"offset":26050},"end":{"line":732,"column":82,"offset":26054}}},{"type":"text","value":"insert is added to the root or head, if there was a previous node at the root, then link that node's previous pointer to the node","position":{"start":{"line":732,"column":82,"offset":26054},"end":{"line":732,"column":211,"offset":26183}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"to","position":{"start":{"line":732,"column":212,"offset":26184},"end":{"line":732,"column":214,"offset":26186}}}],"position":{"start":{"line":732,"column":211,"offset":26183},"end":{"line":732,"column":215,"offset":26187}}},{"type":"text","value":"insert.","position":{"start":{"line":732,"column":215,"offset":26187},"end":{"line":732,"column":222,"offset":26194}}}],"position":{"start":{"line":732,"column":1,"offset":25973},"end":{"line":732,"column":222,"offset":26194}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_insert</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_insert<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_to_insert<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node_to_insert<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span>\n    node_to_insert<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>previous <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> node_to_insert<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":733,"column":1,"offset":26195},"end":{"line":741,"column":4,"offset":26417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The erase method will change from","position":{"start":{"line":743,"column":1,"offset":26419},"end":{"line":743,"column":34,"offset":26452}}}],"position":{"start":{"line":743,"column":1,"offset":26419},"end":{"line":743,"column":34,"offset":26452}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>node_to_erase<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>prev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> node_to_erase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// no end of list check</span>\n    prev <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this will cause the program to crash if n is NULL (which is</span>\n                 <span class=\"token comment\">// what we are doing anyways)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span>\n    prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":744,"column":1,"offset":26453},"end":{"line":758,"column":4,"offset":26823}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To the following because we don't need to find the node before the given node to erase the node.  The previous pointer already exists on the node, so we can unlink or erase the node from the data structure simply by relinking the nodes that are before (previous) and after (next) to the given node.  ","position":{"start":{"line":760,"column":1,"offset":26825},"end":{"line":760,"column":301,"offset":27125}}}],"position":{"start":{"line":760,"column":1,"offset":26825},"end":{"line":760,"column":301,"offset":27125}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If there is a previous node to the node to erase (n), then link the previous node's next pointer to the same value as n's next pointer.  If n's next pointer is not NULL, then link the next node's previous pointer to n's previous pointer.","position":{"start":{"line":762,"column":1,"offset":27127},"end":{"line":762,"column":238,"offset":27364}}}],"position":{"start":{"line":762,"column":1,"offset":27127},"end":{"line":762,"column":238,"offset":27364}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If there is not a previous node to the node to erase (n), then the node that is being erased is the first node in the list.  Reset the root pointer to point the same value as n's next pointer.  If n has a non NULL next pointer (it isn't the only node in the list), then link the node that is pointed to by n's next pointer to NULL as the node that is pointed to by n's next pointer has become the new root or head of the list.","position":{"start":{"line":764,"column":1,"offset":27366},"end":{"line":764,"column":427,"offset":27792}}}],"position":{"start":{"line":764,"column":1,"offset":27366},"end":{"line":764,"column":427,"offset":27792}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">bool <span class=\"token function\">node_erase</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> node_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>previous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    n<span class=\"token operator\">-></span>previous<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span>\n      n<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>previous <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>previous<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span>\n      n<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>previous <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":765,"column":1,"offset":27793},"end":{"line":778,"column":4,"offset":28057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The last function that changed is the node","position":{"start":{"line":780,"column":1,"offset":28059},"end":{"line":780,"column":43,"offset":28101}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"print method.  node","position":{"start":{"line":780,"column":44,"offset":28102},"end":{"line":780,"column":63,"offset":28121}}}],"position":{"start":{"line":780,"column":43,"offset":28101},"end":{"line":780,"column":64,"offset":28122}}},{"type":"text","value":"print is changed to print two lines.  The first line is the same as the singly linked list in that it shows the next pointers.  The second line shows the previous pointers.  The second line prints only if the list is not empty.","position":{"start":{"line":780,"column":64,"offset":28122},"end":{"line":780,"column":291,"offset":28349}}}],"position":{"start":{"line":780,"column":1,"offset":28059},"end":{"line":780,"column":291,"offset":28349}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">node_print</span><span class=\"token punctuation\">(</span>node_t <span class=\"token operator\">*</span>np<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  node_t <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> %c\"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" -> NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    n <span class=\"token operator\">=</span> np<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" &lt;- %c\"</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      n <span class=\"token operator\">=</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":781,"column":1,"offset":28350},"end":{"line":801,"column":4,"offset":28668}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Next up is a brief explanation of threads, and then we will use what we've learned to create a very useful allocation object.  In this chapter, I began relaxing how much I'm explaining.  A very important skill is to learn to read code (regardless of how hard it is to read).  As this book progresses, there will be less in the way of explanations.","position":{"start":{"line":803,"column":1,"offset":28670},"end":{"line":803,"column":348,"offset":29017}}}],"position":{"start":{"line":803,"column":1,"offset":28670},"end":{"line":803,"column":348,"offset":29017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"threads"},"children":[{"type":"element","tagName":"a","properties":{"href":"#threads","aria-label":"threads permalink","class":"anchor"},"children":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]},{"type":"element","tagName":"a","properties":{"href":"5_threads.md"},"children":[{"type":"text","value":"Threads","position":{"start":{"line":805,"column":4,"offset":29022},"end":{"line":805,"column":11,"offset":29029}}}],"position":{"start":{"line":805,"column":3,"offset":29021},"end":{"line":805,"column":26,"offset":29044}}}],"position":{"start":{"line":805,"column":1,"offset":29019},"end":{"line":805,"column":26,"offset":29044}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"../README.md"},"children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":807,"column":2,"offset":29047},"end":{"line":807,"column":19,"offset":29064}}}],"position":{"start":{"line":807,"column":1,"offset":29046},"end":{"line":807,"column":34,"offset":29079}}},{"type":"text","value":"  - Copyright 2019 Andy Curtis","position":{"start":{"line":807,"column":34,"offset":29079},"end":{"line":807,"column":64,"offset":29109}}}],"position":{"start":{"line":807,"column":1,"offset":29046},"end":{"line":807,"column":64,"offset":29109}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":808,"column":1,"offset":29110}}}}