{"expireTime":9007200828330796000,"key":"transformer-remark-markdown-ast-40d123879d731d5e4e1457903ad8ba6e-gatsby-remark-prismjsgatsby-remark-autolink-headers-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Copyright 2019 Andy Curtis & Daniel Curtis","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":43,"offset":43},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#timing-your-code-the-first-project","title":null,"children":[],"data":{"hProperties":{"aria-label":"timing your code the first project permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Timing Your Code (the first project)","position":{"start":{"line":4,"column":3,"offset":47},"end":{"line":4,"column":39,"offset":83},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":45},"end":{"line":4,"column":39,"offset":83},"indent":[]},"data":{"id":"timing-your-code-the-first-project","htmlAttributes":{"id":"timing-your-code-the-first-project"},"hProperties":{"id":"timing-your-code-the-first-project"}}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#a-brief-introduction-to-c","title":null,"children":[],"data":{"hProperties":{"aria-label":"a brief introduction to c permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"A brief introduction to C","position":{"start":{"line":6,"column":4,"offset":88},"end":{"line":6,"column":29,"offset":113},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":85},"end":{"line":6,"column":29,"offset":113},"indent":[]},"data":{"id":"a-brief-introduction-to-c","htmlAttributes":{"id":"a-brief-introduction-to-c"},"hProperties":{"id":"a-brief-introduction-to-c"}}},{"type":"paragraph","children":[{"type":"text","value":"In the project, there is an illustrations folder that contains most of the code.  There is also a src directory where the final code exists.  Normally, one would start with a hello world project. That exists later in a section called Hello Buffer.  If you are lost, hopefully, it will make more sense once you get to the Hello Buffer section. I would recommend reading and working through the examples in this chapter and then coming back after working through Hello Buffer.  The code for this chapter is located in ","position":{"start":{"line":8,"column":1,"offset":115},"end":{"line":8,"column":517,"offset":631},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":8,"column":517,"offset":631},"end":{"line":8,"column":520,"offset":634},"indent":[]}},{"type":"text","value":"illustrations/2_timing","position":{"start":{"line":8,"column":520,"offset":634},"end":{"line":8,"column":542,"offset":656},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":8,"column":542,"offset":656},"end":{"line":8,"column":546,"offset":660},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":115},"end":{"line":8,"column":546,"offset":660},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"At various points in this project, we will be timing code in an attempt to optimize it.  Our first object is going to be simple but will illustrate how I plan to maintain separation between interfaces and their respective implementation.","position":{"start":{"line":10,"column":1,"offset":662},"end":{"line":10,"column":238,"offset":899},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":662},"end":{"line":10,"column":238,"offset":899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":12,"column":1,"offset":901},"end":{"line":12,"column":32,"offset":932},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":12,"column":32,"offset":932},"end":{"line":12,"column":35,"offset":935},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":12,"column":35,"offset":935},"end":{"line":12,"column":50,"offset":950},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/1","position":{"start":{"line":12,"column":51,"offset":951},"end":{"line":12,"column":59,"offset":959},"indent":[]}}],"position":{"start":{"line":12,"column":50,"offset":950},"end":{"line":12,"column":60,"offset":960},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":12,"column":60,"offset":960},"end":{"line":12,"column":65,"offset":965},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":12,"column":65,"offset":965},"end":{"line":12,"column":69,"offset":969},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":901},"end":{"line":12,"column":69,"offset":969},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/2_timing/1_timer</code></pre></div>","position":{"start":{"line":13,"column":1,"offset":970},"end":{"line":15,"column":4,"offset":1019},"indent":[1,1]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">49</span>.0980ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">23</span>.1360ns\noverall time_spent: <span class=\"token number\">72</span>.2340ns</code></pre></div>","position":{"start":{"line":17,"column":1,"offset":1021},"end":{"line":26,"column":4,"offset":1268},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"test_timer.c","position":{"start":{"line":28,"column":1,"offset":1270},"end":{"line":28,"column":13,"offset":1282},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1270},"end":{"line":28,"column":13,"offset":1282},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> repeat_test <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> overall_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> test_t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">long</span> test_t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    overall_time <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token operator\">*</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"overall time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> overall_time<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token operator\">*</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":29,"column":1,"offset":1283},"end":{"line":75,"column":4,"offset":2279},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Every C program that is capable of being executed has a main function.  The main function typically has the following two parameters to pass in command-line arguments to the program. ","position":{"start":{"line":77,"column":1,"offset":2281},"end":{"line":77,"column":184,"offset":2464},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argc</code>","position":{"start":{"line":77,"column":184,"offset":2464},"end":{"line":77,"column":190,"offset":2470},"indent":[]}},{"type":"text","value":" represents the number of arguments. The name of the program is the 1st argument. ","position":{"start":{"line":77,"column":190,"offset":2470},"end":{"line":77,"column":272,"offset":2552},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":77,"column":272,"offset":2552},"end":{"line":77,"column":278,"offset":2558},"indent":[]}},{"type":"text","value":" represents the arguments. ","position":{"start":{"line":77,"column":278,"offset":2558},"end":{"line":77,"column":305,"offset":2585},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv[0]</code>","position":{"start":{"line":77,"column":305,"offset":2585},"end":{"line":77,"column":314,"offset":2594},"indent":[]}},{"type":"text","value":" references the name of the program as called from the command line. The main function returns an integer. Successful execution should return 0, which lets the command shell know that the program finished normally.","position":{"start":{"line":77,"column":314,"offset":2594},"end":{"line":77,"column":528,"offset":2808},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":2281},"end":{"line":77,"column":528,"offset":2808},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":79,"column":1,"offset":2810},"end":{"line":84,"column":4,"offset":2875},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"C has a few built-in data types:","position":{"start":{"line":86,"column":1,"offset":2877},"end":{"line":86,"column":33,"offset":2909},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2877},"end":{"line":86,"column":33,"offset":2909},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Data Type","position":{"start":{"line":88,"column":3,"offset":2913},"end":{"line":88,"column":12,"offset":2922},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":2913},"end":{"line":88,"column":12,"offset":2922},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Description","position":{"start":{"line":88,"column":15,"offset":2925},"end":{"line":88,"column":26,"offset":2936},"indent":[]}}],"position":{"start":{"line":88,"column":15,"offset":2925},"end":{"line":88,"column":26,"offset":2936},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2911},"end":{"line":88,"column":28,"offset":2938},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"char","position":{"start":{"line":90,"column":3,"offset":2951},"end":{"line":90,"column":7,"offset":2955},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":2951},"end":{"line":90,"column":7,"offset":2955},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"a single byte","position":{"start":{"line":90,"column":10,"offset":2958},"end":{"line":90,"column":23,"offset":2971},"indent":[]}}],"position":{"start":{"line":90,"column":10,"offset":2958},"end":{"line":90,"column":23,"offset":2971},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2949},"end":{"line":90,"column":25,"offset":2973},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"short","position":{"start":{"line":91,"column":3,"offset":2976},"end":{"line":91,"column":8,"offset":2981},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":2976},"end":{"line":91,"column":8,"offset":2981},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"two bytes","position":{"start":{"line":91,"column":11,"offset":2984},"end":{"line":91,"column":20,"offset":2993},"indent":[]}}],"position":{"start":{"line":91,"column":11,"offset":2984},"end":{"line":91,"column":20,"offset":2993},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2974},"end":{"line":91,"column":22,"offset":2995},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"int","position":{"start":{"line":92,"column":3,"offset":2998},"end":{"line":92,"column":6,"offset":3001},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":2998},"end":{"line":92,"column":6,"offset":3001},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"four bytes","position":{"start":{"line":92,"column":9,"offset":3004},"end":{"line":92,"column":19,"offset":3014},"indent":[]}}],"position":{"start":{"line":92,"column":9,"offset":3004},"end":{"line":92,"column":19,"offset":3014},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2996},"end":{"line":92,"column":21,"offset":3016},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"long","position":{"start":{"line":93,"column":3,"offset":3019},"end":{"line":93,"column":7,"offset":3023},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":3019},"end":{"line":93,"column":7,"offset":3023},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"typically eight bytes","position":{"start":{"line":93,"column":10,"offset":3026},"end":{"line":93,"column":31,"offset":3047},"indent":[]}}],"position":{"start":{"line":93,"column":10,"offset":3026},"end":{"line":93,"column":31,"offset":3047},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":3017},"end":{"line":93,"column":33,"offset":3049},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"size_t","position":{"start":{"line":94,"column":3,"offset":3052},"end":{"line":94,"column":9,"offset":3058},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":3052},"end":{"line":94,"column":9,"offset":3058},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"on a 64-bit system, 8 bytes (or 64 bits), on a 32-bit system, 4 bytes (or 32 bits)","position":{"start":{"line":94,"column":12,"offset":3061},"end":{"line":94,"column":94,"offset":3143},"indent":[]}}],"position":{"start":{"line":94,"column":12,"offset":3061},"end":{"line":94,"column":94,"offset":3143},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":3050},"end":{"line":94,"column":96,"offset":3145},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"ssize_t","position":{"start":{"line":95,"column":3,"offset":3148},"end":{"line":95,"column":10,"offset":3155},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":3148},"end":{"line":95,"column":10,"offset":3155},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"signed size_t","position":{"start":{"line":95,"column":13,"offset":3158},"end":{"line":95,"column":26,"offset":3171},"indent":[]}}],"position":{"start":{"line":95,"column":13,"offset":3158},"end":{"line":95,"column":26,"offset":3171},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":3146},"end":{"line":95,"column":28,"offset":3173},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"bool","position":{"start":{"line":96,"column":3,"offset":3176},"end":{"line":96,"column":7,"offset":3180},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":3176},"end":{"line":96,"column":7,"offset":3180},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"can be different sizes, but only has two states (true and false)","position":{"start":{"line":96,"column":10,"offset":3183},"end":{"line":96,"column":74,"offset":3247},"indent":[]}}],"position":{"start":{"line":96,"column":10,"offset":3183},"end":{"line":96,"column":74,"offset":3247},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":3174},"end":{"line":96,"column":76,"offset":3249},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"float","position":{"start":{"line":97,"column":3,"offset":3252},"end":{"line":97,"column":8,"offset":3257},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":3252},"end":{"line":97,"column":8,"offset":3257},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"four-byte decimal (I try to avoid this type as it quickly loses precision)","position":{"start":{"line":97,"column":11,"offset":3260},"end":{"line":97,"column":85,"offset":3334},"indent":[]}}],"position":{"start":{"line":97,"column":11,"offset":3260},"end":{"line":97,"column":85,"offset":3334},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":3250},"end":{"line":97,"column":87,"offset":3336},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"double","position":{"start":{"line":98,"column":3,"offset":3339},"end":{"line":98,"column":9,"offset":3345},"indent":[]}}],"position":{"start":{"line":98,"column":3,"offset":3339},"end":{"line":98,"column":9,"offset":3345},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"eight-byte decimal","position":{"start":{"line":98,"column":12,"offset":3348},"end":{"line":98,"column":30,"offset":3366},"indent":[]}}],"position":{"start":{"line":98,"column":12,"offset":3348},"end":{"line":98,"column":30,"offset":3366},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":3337},"end":{"line":98,"column":32,"offset":3368},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"void","position":{"start":{"line":99,"column":3,"offset":3371},"end":{"line":99,"column":7,"offset":3375},"indent":[]}}],"position":{"start":{"line":99,"column":3,"offset":3371},"end":{"line":99,"column":7,"offset":3375},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"this does not have a size and is a special type","position":{"start":{"line":99,"column":10,"offset":3378},"end":{"line":99,"column":57,"offset":3425},"indent":[]}}],"position":{"start":{"line":99,"column":10,"offset":3378},"end":{"line":99,"column":57,"offset":3425},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":3369},"end":{"line":99,"column":59,"offset":3427},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2911},"end":{"line":99,"column":59,"offset":3427},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A byte represents 8 bits.  The range of 1 bit would be 0-1, two bits 0-3, etc. For 8 bits, the range is 0-255.  The short has a range of 0-((256*256)-1) or 0-65535.  C counts from 0 (all bits off) instead of 1.  Types can be signed (the default) or unsigned.  If the data type is unsigned, the number range will start with zero.  Otherwise, the number range will be between -(2^(number of bits-1)) and (2^(number of bits-1))-1.  A signed char will range from -128 to 127.  A signed char and a char are the same things.","position":{"start":{"line":101,"column":1,"offset":3429},"end":{"line":101,"column":519,"offset":3947},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3429},"end":{"line":101,"column":519,"offset":3947},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">size_t</code>","position":{"start":{"line":103,"column":1,"offset":3949},"end":{"line":103,"column":9,"offset":3957},"indent":[]}},{"type":"text","value":" is a type that is defined in C to represent the number of bits that the CPU is and is unsigned (meaning it cannot be negative). ","position":{"start":{"line":103,"column":9,"offset":3957},"end":{"line":103,"column":138,"offset":4086},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ssize_t</code>","position":{"start":{"line":103,"column":138,"offset":4086},"end":{"line":103,"column":147,"offset":4095},"indent":[]}},{"type":"text","value":" is a signed alternative.  On a 64-bit system, a long and ","position":{"start":{"line":103,"column":147,"offset":4095},"end":{"line":103,"column":205,"offset":4153},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ssize_t</code>","position":{"start":{"line":103,"column":205,"offset":4153},"end":{"line":103,"column":214,"offset":4162},"indent":[]}},{"type":"text","value":" are equivalent.","position":{"start":{"line":103,"column":214,"offset":4162},"end":{"line":103,"column":230,"offset":4178},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3949},"end":{"line":103,"column":230,"offset":4178},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can overflow a type.","position":{"start":{"line":105,"column":1,"offset":4180},"end":{"line":105,"column":25,"offset":4204},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4180},"end":{"line":105,"column":25,"offset":4204},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// a will become zero</span>\na <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// a will become 255 again</span>\n<span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will become -128</span>\nb <span class=\"token operator\">=</span> b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will become 127 again</span></code></pre></div>","position":{"start":{"line":107,"column":1,"offset":4206},"end":{"line":114,"column":4,"offset":4395},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">bool</code>","position":{"start":{"line":116,"column":1,"offset":4397},"end":{"line":116,"column":7,"offset":4403},"indent":[]}},{"type":"text","value":" is another type defined in C (you must include ","position":{"start":{"line":116,"column":7,"offset":4403},"end":{"line":116,"column":55,"offset":4451},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">stdbool.h</code>","position":{"start":{"line":116,"column":55,"offset":4451},"end":{"line":116,"column":66,"offset":4462},"indent":[]}},{"type":"text","value":" to get it). ","position":{"start":{"line":116,"column":66,"offset":4462},"end":{"line":116,"column":79,"offset":4475},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bool</code>","position":{"start":{"line":116,"column":79,"offset":4475},"end":{"line":116,"column":85,"offset":4481},"indent":[]}},{"type":"text","value":" is defined as having the value true or false. This type can make code more readable in that it makes it clear to the reader that there are only two possible states.","position":{"start":{"line":116,"column":85,"offset":4481},"end":{"line":116,"column":250,"offset":4646},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":4397},"end":{"line":116,"column":250,"offset":4646},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">double</code>","position":{"start":{"line":118,"column":1,"offset":4648},"end":{"line":118,"column":9,"offset":4656},"indent":[]}},{"type":"text","value":" (and ","position":{"start":{"line":118,"column":9,"offset":4656},"end":{"line":118,"column":15,"offset":4662},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">float</code>","position":{"start":{"line":118,"column":15,"offset":4662},"end":{"line":118,"column":22,"offset":4669},"indent":[]}},{"type":"text","value":") are used for decimals.  Because ","position":{"start":{"line":118,"column":22,"offset":4669},"end":{"line":118,"column":56,"offset":4703},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">float</code>","position":{"start":{"line":118,"column":56,"offset":4703},"end":{"line":118,"column":63,"offset":4710},"indent":[]}},{"type":"text","value":" only uses 32 bits, it loses precision quickly.  I do not tend to use it for anything.  Instead, I opt to use ","position":{"start":{"line":118,"column":63,"offset":4710},"end":{"line":118,"column":173,"offset":4820},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">double</code>","position":{"start":{"line":118,"column":173,"offset":4820},"end":{"line":118,"column":181,"offset":4828},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":118,"column":181,"offset":4828},"end":{"line":118,"column":182,"offset":4829},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":4648},"end":{"line":118,"column":182,"offset":4829},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">typedef</code>","position":{"start":{"line":120,"column":1,"offset":4831},"end":{"line":120,"column":10,"offset":4840},"indent":[]}},{"type":"text","value":" can be utilized to define your own type using the following syntax:","position":{"start":{"line":120,"column":10,"offset":4840},"end":{"line":120,"column":78,"offset":4908},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":4831},"end":{"line":120,"column":78,"offset":4908},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">typedef &lt;existing type&gt; &lt;new type name&gt;;</code></pre></div>","position":{"start":{"line":122,"column":1,"offset":4910},"end":{"line":124,"column":4,"offset":4958},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"For example, the following would define a new type called number_t, which has an underlying type of unsigned int.","position":{"start":{"line":126,"column":1,"offset":4960},"end":{"line":126,"column":114,"offset":5073},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4960},"end":{"line":126,"column":114,"offset":5073},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> number_t<span class=\"token punctuation\">;</span>\n\nnumber_t a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":127,"column":1,"offset":5074},"end":{"line":131,"column":4,"offset":5132},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Every data type in C has a size.  The size of a pointer is always the same (it is the same as the size","position":{"start":{"line":133,"column":1,"offset":5134},"end":{"line":133,"column":103,"offset":5236},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t type). The ","position":{"start":{"line":133,"column":104,"offset":5237},"end":{"line":133,"column":117,"offset":5250},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sizeof()</code>","position":{"start":{"line":133,"column":117,"offset":5250},"end":{"line":133,"column":127,"offset":5260},"indent":[]}},{"type":"text","value":" operator determines the size of a type or variable. `sizeof(number","position":{"start":{"line":133,"column":127,"offset":5260},"end":{"line":133,"column":194,"offset":5327},"indent":[]}}],"position":{"start":{"line":133,"column":103,"offset":5236},"end":{"line":133,"column":195,"offset":5328},"indent":[]}},{"type":"text","value":"t)","position":{"start":{"line":133,"column":195,"offset":5328},"end":{"line":133,"column":197,"offset":5330},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">finds the size of the</code>","position":{"start":{"line":133,"column":197,"offset":5330},"end":{"line":133,"column":222,"offset":5355},"indent":[]}},{"type":"text","value":"number_t","position":{"start":{"line":133,"column":222,"offset":5355},"end":{"line":133,"column":230,"offset":5363},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">type (and return four since unsigned int is four bytes).</code>","position":{"start":{"line":133,"column":230,"offset":5363},"end":{"line":133,"column":290,"offset":5423},"indent":[]}},{"type":"text","value":"sizeof(void)` is not allowed as that does not make sense.","position":{"start":{"line":133,"column":290,"offset":5423},"end":{"line":133,"column":347,"offset":5480},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":5134},"end":{"line":133,"column":347,"offset":5480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A variable can be cast from one type to another, either implicitly or explicitly.  Imagine you want to convert an int to a double or vice versa.","position":{"start":{"line":135,"column":1,"offset":5482},"end":{"line":135,"column":145,"offset":5626},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":5482},"end":{"line":135,"column":145,"offset":5626},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// would print 100</span></code></pre></div>","position":{"start":{"line":137,"column":1,"offset":5628},"end":{"line":143,"column":4,"offset":5724},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When the casting happens, precision is lost if the new type cannot accommodate for the value.  The above example shows casting happening implicitly.  Below is an example of casting happening explicitly.","position":{"start":{"line":145,"column":1,"offset":5726},"end":{"line":145,"column":203,"offset":5928},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":5726},"end":{"line":145,"column":203,"offset":5928},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// explicit cast</span>\ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">;</span>\nx <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// would print 100</span></code></pre></div>","position":{"start":{"line":147,"column":1,"offset":5930},"end":{"line":153,"column":4,"offset":6051},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Variables are typically declared as","position":{"start":{"line":155,"column":1,"offset":6053},"end":{"line":155,"column":36,"offset":6088},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":6053},"end":{"line":155,"column":36,"offset":6088},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">datatype variable_name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":156,"column":1,"offset":6089},"end":{"line":158,"column":4,"offset":6129},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":160,"column":1,"offset":6131},"end":{"line":160,"column":3,"offset":6133},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":6131},"end":{"line":160,"column":3,"offset":6133},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">datatype variable_name<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":161,"column":1,"offset":6134},"end":{"line":163,"column":4,"offset":6166},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the main function declaration, ","position":{"start":{"line":165,"column":1,"offset":6168},"end":{"line":165,"column":35,"offset":6202},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":165,"column":35,"offset":6202},"end":{"line":165,"column":41,"offset":6208},"indent":[]}},{"type":"text","value":" is declared uniquely.","position":{"start":{"line":165,"column":41,"offset":6208},"end":{"line":165,"column":63,"offset":6230},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":6168},"end":{"line":165,"column":63,"offset":6230},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":167,"column":1,"offset":6232},"end":{"line":169,"column":4,"offset":6254},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The asterisk means that the variable named ","position":{"start":{"line":171,"column":1,"offset":6256},"end":{"line":171,"column":44,"offset":6299},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":171,"column":44,"offset":6299},"end":{"line":171,"column":50,"offset":6305},"indent":[]}},{"type":"text","value":" is a pointer to the type ","position":{"start":{"line":171,"column":50,"offset":6305},"end":{"line":171,"column":76,"offset":6331},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">char</code>","position":{"start":{"line":171,"column":76,"offset":6331},"end":{"line":171,"column":82,"offset":6337},"indent":[]}},{"type":"text","value":", which is a single byte and is signed (signed is the default datatype prefix).  The ","position":{"start":{"line":171,"column":82,"offset":6337},"end":{"line":171,"column":167,"offset":6422},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":171,"column":167,"offset":6422},"end":{"line":171,"column":171,"offset":6426},"indent":[]}},{"type":"text","value":" after the ","position":{"start":{"line":171,"column":171,"offset":6426},"end":{"line":171,"column":182,"offset":6437},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":171,"column":182,"offset":6437},"end":{"line":171,"column":188,"offset":6443},"indent":[]}},{"type":"text","value":" indicates that ","position":{"start":{"line":171,"column":188,"offset":6443},"end":{"line":171,"column":204,"offset":6459},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":171,"column":204,"offset":6459},"end":{"line":171,"column":210,"offset":6465},"indent":[]}},{"type":"text","value":" is referencing an array of pointers.","position":{"start":{"line":171,"column":210,"offset":6465},"end":{"line":171,"column":247,"offset":6502},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":6256},"end":{"line":171,"column":247,"offset":6502},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In the following array","position":{"start":{"line":173,"column":1,"offset":6504},"end":{"line":173,"column":23,"offset":6526},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":6504},"end":{"line":173,"column":23,"offset":6526},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0123456789012345678901234567\n./test_timer This is a test</code></pre></div>","position":{"start":{"line":174,"column":1,"offset":6527},"end":{"line":177,"column":4,"offset":6591},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":179,"column":1,"offset":6593},"end":{"line":179,"column":7,"offset":6599},"indent":[]}},{"type":"text","value":" would be an array of pointers","position":{"start":{"line":179,"column":7,"offset":6599},"end":{"line":179,"column":37,"offset":6629},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":179,"column":37,"offset":6629},"end":{"line":179,"column":42,"offset":6634},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":179,"column":42,"offset":6634},"end":{"line":180,"column":1,"offset":6635},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[0] =&gt; .</code>","position":{"start":{"line":180,"column":1,"offset":6635},"end":{"line":180,"column":15,"offset":6649},"indent":[]}},{"type":"text","value":" (at byte 0)","position":{"start":{"line":180,"column":15,"offset":6649},"end":{"line":180,"column":27,"offset":6661},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":180,"column":27,"offset":6661},"end":{"line":180,"column":32,"offset":6666},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":180,"column":32,"offset":6666},"end":{"line":181,"column":1,"offset":6667},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[1] =&gt; T</code>","position":{"start":{"line":181,"column":1,"offset":6667},"end":{"line":181,"column":15,"offset":6681},"indent":[]}},{"type":"text","value":" (at byte 13)","position":{"start":{"line":181,"column":15,"offset":6681},"end":{"line":181,"column":28,"offset":6694},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":181,"column":28,"offset":6694},"end":{"line":181,"column":33,"offset":6699},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":181,"column":33,"offset":6699},"end":{"line":182,"column":1,"offset":6700},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[2] =&gt; i</code>","position":{"start":{"line":182,"column":1,"offset":6700},"end":{"line":182,"column":15,"offset":6714},"indent":[]}},{"type":"text","value":" (at byte 18)","position":{"start":{"line":182,"column":15,"offset":6714},"end":{"line":182,"column":28,"offset":6727},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":182,"column":28,"offset":6727},"end":{"line":182,"column":33,"offset":6732},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":182,"column":33,"offset":6732},"end":{"line":183,"column":1,"offset":6733},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[3] =&gt; a</code>","position":{"start":{"line":183,"column":1,"offset":6733},"end":{"line":183,"column":15,"offset":6747},"indent":[]}},{"type":"text","value":" (at byte 21)","position":{"start":{"line":183,"column":15,"offset":6747},"end":{"line":183,"column":28,"offset":6760},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":183,"column":28,"offset":6760},"end":{"line":183,"column":33,"offset":6765},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":183,"column":33,"offset":6765},"end":{"line":184,"column":1,"offset":6766},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[4] =&gt; t</code>","position":{"start":{"line":184,"column":1,"offset":6766},"end":{"line":184,"column":15,"offset":6780},"indent":[]}},{"type":"text","value":" (at byte 23)","position":{"start":{"line":184,"column":15,"offset":6780},"end":{"line":184,"column":28,"offset":6793},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":184,"column":28,"offset":6793},"end":{"line":184,"column":33,"offset":6798},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":184,"column":33,"offset":6798},"end":{"line":185,"column":1,"offset":6799},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[5] =&gt; NULL</code>","position":{"start":{"line":185,"column":1,"offset":6799},"end":{"line":185,"column":18,"offset":6816},"indent":[]}},{"type":"text","value":" (pointing to NULL means that the pointer is not pointing at anything)","position":{"start":{"line":185,"column":18,"offset":6816},"end":{"line":185,"column":88,"offset":6886},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":185,"column":88,"offset":6886},"end":{"line":185,"column":93,"offset":6891},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":6593},"end":{"line":185,"column":93,"offset":6891},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice that the pointers refer to individual bytes.  In C (and any language), a pointer refers to a location in memory (typically RAM or random access memory).  Strings or sequences of characters are defined by looking for a terminating character (a non-printable 0).  The above example is not technically correct in that what would happen is before the arguments getting to the main function; they would split into five strings.","position":{"start":{"line":187,"column":1,"offset":6893},"end":{"line":187,"column":430,"offset":7322},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":6893},"end":{"line":187,"column":430,"offset":7322},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">argv</code>","position":{"start":{"line":189,"column":1,"offset":7324},"end":{"line":189,"column":7,"offset":7330},"indent":[]}},{"type":"text","value":" would be an array of pointers","position":{"start":{"line":189,"column":7,"offset":7330},"end":{"line":189,"column":37,"offset":7360},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":189,"column":37,"offset":7360},"end":{"line":189,"column":42,"offset":7365},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":189,"column":42,"offset":7365},"end":{"line":190,"column":1,"offset":7366},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[0] =&gt; &quot;./test_timer&quot;</code>","position":{"start":{"line":190,"column":1,"offset":7366},"end":{"line":190,"column":28,"offset":7393},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":190,"column":28,"offset":7393},"end":{"line":190,"column":33,"offset":7398},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":190,"column":33,"offset":7398},"end":{"line":191,"column":1,"offset":7399},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[1] =&gt; &quot;This&quot;</code>","position":{"start":{"line":191,"column":1,"offset":7399},"end":{"line":191,"column":20,"offset":7418},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":191,"column":20,"offset":7418},"end":{"line":191,"column":25,"offset":7423},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":191,"column":25,"offset":7423},"end":{"line":192,"column":1,"offset":7424},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[2] =&gt; &quot;is&quot;</code>","position":{"start":{"line":192,"column":1,"offset":7424},"end":{"line":192,"column":18,"offset":7441},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":192,"column":18,"offset":7441},"end":{"line":192,"column":23,"offset":7446},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":192,"column":23,"offset":7446},"end":{"line":193,"column":1,"offset":7447},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[3] =&gt; &quot;a&quot;</code>","position":{"start":{"line":193,"column":1,"offset":7447},"end":{"line":193,"column":17,"offset":7463},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":193,"column":17,"offset":7463},"end":{"line":193,"column":22,"offset":7468},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":193,"column":22,"offset":7468},"end":{"line":194,"column":1,"offset":7469},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[4] =&gt; &quot;test&quot;</code>","position":{"start":{"line":194,"column":1,"offset":7469},"end":{"line":194,"column":20,"offset":7488},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":194,"column":20,"offset":7488},"end":{"line":194,"column":25,"offset":7493},"indent":[]}},{"type":"text","value":"\n","position":{"start":{"line":194,"column":25,"offset":7493},"end":{"line":195,"column":1,"offset":7494},"indent":[1]}},{"type":"html","value":"<code class=\"language-text\">argv[5] =&gt; NULL</code>","position":{"start":{"line":195,"column":1,"offset":7494},"end":{"line":195,"column":18,"offset":7511},"indent":[]}},{"type":"text","value":" (pointing to NULL means that the pointer is not pointing at anything)","position":{"start":{"line":195,"column":18,"offset":7511},"end":{"line":195,"column":88,"offset":7581},"indent":[]}},{"type":"html","value":"<br/>","position":{"start":{"line":195,"column":88,"offset":7581},"end":{"line":195,"column":93,"offset":7586},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":7324},"end":{"line":195,"column":93,"offset":7586},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The string \"This\" above is 4 bytes long but requires 5 bytes to be represented.  To determine the length of a string in C, you would advance a pointer until the zero is referenced.  Simple implementation to find the length of a string might look like:","position":{"start":{"line":197,"column":1,"offset":7588},"end":{"line":197,"column":252,"offset":7839},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":7588},"end":{"line":197,"column":252,"offset":7839},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":199,"column":1,"offset":7841},"end":{"line":206,"column":4,"offset":7928},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This function returns an integer (so it will only support finding the length of strings that are 2,147,483,647 or fewer bytes).  The function's name is ","position":{"start":{"line":208,"column":1,"offset":7930},"end":{"line":208,"column":153,"offset":8082},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strlen</code>","position":{"start":{"line":208,"column":153,"offset":8082},"end":{"line":208,"column":161,"offset":8090},"indent":[]}},{"type":"text","value":".  It takes as an input a single pointer to a byte in RAM.  The pointer is of type char.  Imagine that s pointed to the first character in the string \"This\" (or the letter T).  This function seeks to find a pointer to the byte that is just past the end of the string (or just after the letter s) and then subtracts the two pointers.","position":{"start":{"line":208,"column":161,"offset":8090},"end":{"line":208,"column":493,"offset":8422},"indent":[]}}],"position":{"start":{"line":208,"column":1,"offset":7930},"end":{"line":208,"column":493,"offset":8422},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">This\n^   ^\n|   |\ns   p</code></pre></div>","position":{"start":{"line":210,"column":1,"offset":8424},"end":{"line":215,"column":4,"offset":8454},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The value of subtracting s from p is 4.  ","position":{"start":{"line":217,"column":1,"offset":8456},"end":{"line":217,"column":42,"offset":8497},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":8456},"end":{"line":217,"column":42,"offset":8497},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The steps to finding the length of a string in C are","position":{"start":{"line":219,"column":1,"offset":8499},"end":{"line":219,"column":53,"offset":8551},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":8499},"end":{"line":219,"column":53,"offset":8551},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. given a pointer to a character, make a copy of the pointer.\n2. while the pointer does not point to the non-printable zero, increment the pointer by 1.\n3. return the difference between p and s.</code></pre></div>","position":{"start":{"line":220,"column":1,"offset":8552},"end":{"line":224,"column":4,"offset":8755},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Pointers always reference specific bytes in RAM.  In most languages, the pointer is defined to reference a type.  The appropriate number of bytes would be advanced depending on whether the pointer is incremented, subtracted, added, etc. A ","position":{"start":{"line":226,"column":1,"offset":8757},"end":{"line":226,"column":240,"offset":8996},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">char *</code>","position":{"start":{"line":226,"column":240,"offset":8996},"end":{"line":226,"column":248,"offset":9004},"indent":[]}},{"type":"text","value":" is a pointer that references a sequence of bytes that are of type ","position":{"start":{"line":226,"column":248,"offset":9004},"end":{"line":226,"column":315,"offset":9071},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">char</code>","position":{"start":{"line":226,"column":315,"offset":9071},"end":{"line":226,"column":321,"offset":9077},"indent":[]}},{"type":"text","value":".  The ","position":{"start":{"line":226,"column":321,"offset":9077},"end":{"line":226,"column":328,"offset":9084},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">char</code>","position":{"start":{"line":226,"column":328,"offset":9084},"end":{"line":226,"column":334,"offset":9090},"indent":[]}},{"type":"text","value":" is a single byte, so advancing a pointer to a char by one is the same as incrementing the pointer by 1 byte.","position":{"start":{"line":226,"column":334,"offset":9090},"end":{"line":226,"column":443,"offset":9199},"indent":[]}}],"position":{"start":{"line":226,"column":1,"offset":8757},"end":{"line":226,"column":443,"offset":9199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Make a copy of the pointer s and call it p.","position":{"start":{"line":228,"column":1,"offset":9201},"end":{"line":228,"column":44,"offset":9244},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":9201},"end":{"line":228,"column":44,"offset":9244},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":229,"column":1,"offset":9245},"end":{"line":231,"column":4,"offset":9266},"indent":[1,1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":234,"column":1,"offset":9269},"end":{"line":237,"column":4,"offset":9299},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"C allows for repeated logic until a given condition evaluates true.  For example, a while loop is technically defined as","position":{"start":{"line":239,"column":1,"offset":9301},"end":{"line":239,"column":121,"offset":9421},"indent":[]}}],"position":{"start":{"line":239,"column":1,"offset":9301},"end":{"line":239,"column":121,"offset":9421},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>condition<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n  do_something<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":241,"column":1,"offset":9423},"end":{"line":244,"column":4,"offset":9466},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, if there are multiple lines of code which need to be executed within the loop:","position":{"start":{"line":246,"column":1,"offset":9468},"end":{"line":246,"column":94,"offset":9561},"indent":[]}}],"position":{"start":{"line":246,"column":1,"offset":9468},"end":{"line":246,"column":94,"offset":9561},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>condition<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  do_something1<span class=\"token punctuation\">;</span>\n  do_something2<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  do_somethingN<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":248,"column":1,"offset":9563},"end":{"line":255,"column":4,"offset":9651},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It is essential to recognize the difference between comparisons and conditions.  A condition can be true or false.  Comparisons require two objects and can evaluate to true or false.  In most (every?) computer language, loops, and if logic will use conditions as opposed to comparisons.  Comparisons are a subset of conditions.  In C, true is non-zero, and false is zero.","position":{"start":{"line":257,"column":1,"offset":9653},"end":{"line":257,"column":372,"offset":10024},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":9653},"end":{"line":257,"column":372,"offset":10024},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following would never do_something:","position":{"start":{"line":259,"column":1,"offset":10026},"end":{"line":259,"column":40,"offset":10065},"indent":[]}}],"position":{"start":{"line":259,"column":1,"offset":10026},"end":{"line":259,"column":40,"offset":10065},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  do_something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":261,"column":1,"offset":10067},"end":{"line":265,"column":4,"offset":10104},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The following would never stop executing do_something:","position":{"start":{"line":267,"column":1,"offset":10106},"end":{"line":267,"column":55,"offset":10160},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":10106},"end":{"line":267,"column":55,"offset":10160},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  do_something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":269,"column":1,"offset":10162},"end":{"line":273,"column":4,"offset":10199},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Back to the original example,","position":{"start":{"line":275,"column":1,"offset":10201},"end":{"line":275,"column":30,"offset":10230},"indent":[]}}],"position":{"start":{"line":275,"column":1,"offset":10201},"end":{"line":275,"column":30,"offset":10230},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":276,"column":1,"offset":10231},"end":{"line":279,"column":4,"offset":10261},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Pointers are declared using an asterisk. Pointers point at values obtained through a process called dereferencing. Dereferencing occurs when an asterisk precedes the pointer. The first time through this loop, assuming that s pointed to \"Test\", p would be pointing at a value T.  *p would result in the single character 'T'.  In C, single quotes define single characters.  Double-quotes define longer strings.","position":{"start":{"line":281,"column":1,"offset":10263},"end":{"line":281,"column":409,"offset":10671},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":10263},"end":{"line":281,"column":409,"offset":10671},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* first time *p == 'T', condition is true ('T' != 0) */</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* advance p to point to the next character 'h' */</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* second time *p == 'h', condition is true ('h' != 0) */</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* advance p to point to the next character 'i' */</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* third time *p == 'i', condition is true ('i' != 0) */</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* advance p to point to the next character 's' */</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* fourth time *p == 's', condition is true ('s' != 0) */</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* advance p to point to the next character (non printable zero) */</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* fifth time *p == 0, so condition is no longer true */</span></code></pre></div>","position":{"start":{"line":283,"column":1,"offset":10673},"end":{"line":297,"column":4,"offset":11296},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At this point, p points to just passed the letter s and advanced four times, so the length is four.","position":{"start":{"line":299,"column":1,"offset":11298},"end":{"line":299,"column":100,"offset":11397},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":11298},"end":{"line":299,"column":100,"offset":11397},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is common for developers to use ","position":{"start":{"line":301,"column":1,"offset":11399},"end":{"line":301,"column":36,"offset":11434},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int</code>","position":{"start":{"line":301,"column":36,"offset":11434},"end":{"line":301,"column":41,"offset":11439},"indent":[]}},{"type":"text","value":" as a return type. However, it is generally more efficient and less bug-prone to use ","position":{"start":{"line":301,"column":41,"offset":11439},"end":{"line":301,"column":126,"offset":11524},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">size_t</code>","position":{"start":{"line":301,"column":126,"offset":11524},"end":{"line":301,"column":134,"offset":11532},"indent":[]}},{"type":"text","value":".  For a 64 bit CPU to work with an ","position":{"start":{"line":301,"column":134,"offset":11532},"end":{"line":301,"column":170,"offset":11568},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int</code>","position":{"start":{"line":301,"column":170,"offset":11568},"end":{"line":301,"column":175,"offset":11573},"indent":[]}},{"type":"text","value":", it must split a register since the CPU is meant to work with 64-bit integers.  This split is not cheap.  Additionally, if you use ","position":{"start":{"line":301,"column":175,"offset":11573},"end":{"line":301,"column":307,"offset":11705},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">size_t</code>","position":{"start":{"line":301,"column":307,"offset":11705},"end":{"line":301,"column":315,"offset":11713},"indent":[]}},{"type":"text","value":" or (","position":{"start":{"line":301,"column":315,"offset":11713},"end":{"line":301,"column":320,"offset":11718},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ssize_t</code>","position":{"start":{"line":301,"column":320,"offset":11718},"end":{"line":301,"column":329,"offset":11727},"indent":[]}},{"type":"text","value":" for signed numbers), the program will be more portable to 64-bit systems where a string might be longer than 2 billion bytes.  A better implementation of ","position":{"start":{"line":301,"column":329,"offset":11727},"end":{"line":301,"column":484,"offset":11882},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strlen</code>","position":{"start":{"line":301,"column":484,"offset":11882},"end":{"line":301,"column":492,"offset":11890},"indent":[]}},{"type":"text","value":" might look like the following.  The only difference is that the ","position":{"start":{"line":301,"column":492,"offset":11890},"end":{"line":301,"column":557,"offset":11955},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strlen</code>","position":{"start":{"line":301,"column":557,"offset":11955},"end":{"line":301,"column":565,"offset":11963},"indent":[]}},{"type":"text","value":" returns a type ","position":{"start":{"line":301,"column":565,"offset":11963},"end":{"line":301,"column":581,"offset":11979},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">size_t</code>","position":{"start":{"line":301,"column":581,"offset":11979},"end":{"line":301,"column":589,"offset":11987},"indent":[]}},{"type":"text","value":".  Strings cannot be negative in length, so returning an unsigned number also helps people using the function to understand that.","position":{"start":{"line":301,"column":589,"offset":11987},"end":{"line":301,"column":718,"offset":12116},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":11399},"end":{"line":301,"column":718,"offset":12116},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":303,"column":1,"offset":12118},"end":{"line":310,"column":4,"offset":12208},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"C allows for variables to be declared as constant, meaning that they cannot change.  Constants are particularly useful in functions because the function can indicate that the input will not change.  Above, the string remains unmodified while determining the length.  Adding ","position":{"start":{"line":312,"column":1,"offset":12210},"end":{"line":312,"column":275,"offset":12484},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">const</code>","position":{"start":{"line":312,"column":275,"offset":12484},"end":{"line":312,"column":282,"offset":12491},"indent":[]}},{"type":"text","value":" will indicate to the user (and compiler) that what s points to will not be changed.","position":{"start":{"line":312,"column":282,"offset":12491},"end":{"line":312,"column":366,"offset":12575},"indent":[]}}],"position":{"start":{"line":312,"column":1,"offset":12210},"end":{"line":312,"column":366,"offset":12575},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p must also be declared with const</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":314,"column":1,"offset":12577},"end":{"line":321,"column":4,"offset":12717},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Another minor optimization to the function above is to look at the while loop. The while loop expects a condition.","position":{"start":{"line":323,"column":1,"offset":12719},"end":{"line":323,"column":115,"offset":12833},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":12719},"end":{"line":323,"column":115,"offset":12833},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":325,"column":1,"offset":12835},"end":{"line":327,"column":4,"offset":12858},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"can be changed to:","position":{"start":{"line":329,"column":1,"offset":12860},"end":{"line":329,"column":19,"offset":12878},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":12860},"end":{"line":329,"column":19,"offset":12878},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":331,"column":1,"offset":12880},"end":{"line":333,"column":4,"offset":12898},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"because the check for 0 is redundant.  It doesn't hurt anything to add the != 0, and sometimes it makes code easier to read.","position":{"start":{"line":335,"column":1,"offset":12900},"end":{"line":335,"column":125,"offset":13024},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":12900},"end":{"line":335,"column":125,"offset":13024},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#the-void-type","title":null,"children":[],"data":{"hProperties":{"aria-label":"the void type permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"The void type","position":{"start":{"line":337,"column":4,"offset":13029},"end":{"line":337,"column":17,"offset":13042},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":13026},"end":{"line":337,"column":17,"offset":13042},"indent":[]},"data":{"id":"the-void-type","htmlAttributes":{"id":"the-void-type"},"hProperties":{"id":"the-void-type"}}},{"type":"paragraph","children":[{"type":"text","value":"A function with a return type of void means that the function does not expect to return anything. An example might be:","position":{"start":{"line":339,"column":1,"offset":13044},"end":{"line":339,"column":119,"offset":13162},"indent":[]}}],"position":{"start":{"line":339,"column":1,"offset":13044},"end":{"line":339,"column":119,"offset":13162},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print_hello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello %s\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":341,"column":1,"offset":13164},"end":{"line":345,"column":4,"offset":13241},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This function prints something to the screen and does not return anything.","position":{"start":{"line":347,"column":1,"offset":13243},"end":{"line":347,"column":75,"offset":13317},"indent":[]}}],"position":{"start":{"line":347,"column":1,"offset":13243},"end":{"line":347,"column":75,"offset":13317},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A void pointer: ","position":{"start":{"line":349,"column":1,"offset":13319},"end":{"line":349,"column":17,"offset":13335},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">void *</code>","position":{"start":{"line":349,"column":17,"offset":13335},"end":{"line":349,"column":25,"offset":13343},"indent":[]}},{"type":"text","value":", is a special type of pointer that must cast to another type before implementation.","position":{"start":{"line":349,"column":25,"offset":13343},"end":{"line":349,"column":109,"offset":13427},"indent":[]}}],"position":{"start":{"line":349,"column":1,"offset":13319},"end":{"line":349,"column":109,"offset":13427},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before describing the void pointer, I want to show an example of casting pointers.","position":{"start":{"line":351,"column":1,"offset":13429},"end":{"line":351,"column":83,"offset":13511},"indent":[]}}],"position":{"start":{"line":351,"column":1,"offset":13429},"end":{"line":351,"column":83,"offset":13511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following would produce a warning:","position":{"start":{"line":353,"column":1,"offset":13513},"end":{"line":353,"column":39,"offset":13551},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":13513},"end":{"line":353,"column":39,"offset":13551},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":355,"column":1,"offset":13553},"end":{"line":359,"column":4,"offset":13613},"indent":[1,1,1,1]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">warning: initializing <span class=\"token string\">'char *'</span> with an expression of <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'const char *'</span> discards qualifiers</code></pre></div>","position":{"start":{"line":361,"column":1,"offset":13615},"end":{"line":363,"column":4,"offset":13719},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To avoid such a warning, either change the type of p to ","position":{"start":{"line":365,"column":1,"offset":13721},"end":{"line":365,"column":57,"offset":13777},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">const char *</code>","position":{"start":{"line":365,"column":57,"offset":13777},"end":{"line":365,"column":71,"offset":13791},"indent":[]}},{"type":"text","value":" or cast s to ","position":{"start":{"line":365,"column":71,"offset":13791},"end":{"line":365,"column":85,"offset":13805},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">char *</code>","position":{"start":{"line":365,"column":85,"offset":13805},"end":{"line":365,"column":93,"offset":13813},"indent":[]}}],"position":{"start":{"line":365,"column":1,"offset":13721},"end":{"line":365,"column":93,"offset":13813},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":366,"column":1,"offset":13814},"end":{"line":368,"column":4,"offset":13843},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Imagine you have a function that will print the value of variables of different types, such as the following.","position":{"start":{"line":370,"column":1,"offset":13845},"end":{"line":370,"column":110,"offset":13954},"indent":[]}}],"position":{"start":{"line":370,"column":1,"offset":13845},"end":{"line":370,"column":110,"offset":13954},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Code found in ","position":{"start":{"line":372,"column":1,"offset":13956},"end":{"line":372,"column":15,"offset":13970},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":372,"column":15,"offset":13970},"end":{"line":372,"column":18,"offset":13973},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":372,"column":18,"offset":13973},"end":{"line":372,"column":33,"offset":13988},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/1","position":{"start":{"line":372,"column":34,"offset":13989},"end":{"line":372,"column":42,"offset":13997},"indent":[]}}],"position":{"start":{"line":372,"column":33,"offset":13988},"end":{"line":372,"column":43,"offset":13998},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":372,"column":43,"offset":13998},"end":{"line":372,"column":48,"offset":14003},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":372,"column":48,"offset":14003},"end":{"line":372,"column":52,"offset":14007},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":13956},"end":{"line":372,"column":52,"offset":14007},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"void_pointers.c:","position":{"start":{"line":374,"column":1,"offset":14009},"end":{"line":374,"column":17,"offset":14025},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":14009},"end":{"line":374,"column":17,"offset":14025},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"char type: %d (%c)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned char type: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"short type: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned short type: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"int type: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned int type: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"long type: %ld\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned long type: %lu\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"double type (with 4 decimal places): %0.4f\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// notice that printable 0 is actually 48</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">short</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> d <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> e <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> f <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> g <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> h <span class=\"token operator\">=</span> <span class=\"token number\">500000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_value_of_pointer</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":375,"column":1,"offset":14026},"end":{"line":438,"column":4,"offset":15696},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you build the program using","position":{"start":{"line":440,"column":1,"offset":15698},"end":{"line":440,"column":31,"offset":15728},"indent":[]}}],"position":{"start":{"line":440,"column":1,"offset":15698},"end":{"line":440,"column":31,"offset":15728},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc void_pointers.c -o void_pointers -Wall</code></pre></div>","position":{"start":{"line":441,"column":1,"offset":15729},"end":{"line":443,"column":4,"offset":15783},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and run it","position":{"start":{"line":445,"column":1,"offset":15785},"end":{"line":445,"column":11,"offset":15795},"indent":[]}}],"position":{"start":{"line":445,"column":1,"offset":15785},"end":{"line":445,"column":11,"offset":15795},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./void_pointers</code></pre></div>","position":{"start":{"line":446,"column":1,"offset":15796},"end":{"line":448,"column":4,"offset":15823},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You should see the following output.","position":{"start":{"line":450,"column":1,"offset":15825},"end":{"line":450,"column":37,"offset":15861},"indent":[]}}],"position":{"start":{"line":450,"column":1,"offset":15825},"end":{"line":450,"column":37,"offset":15861},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">char type: 48 (0)\nunsigned char type: 150\nshort type: -5000\nunsigned short type: 5000\nint type: -500000\nunsigned int type: 500000\nlong type: -500000\nunsigned long type: 500000\ndouble type (with four decimal places): 1.5000</code></pre></div>","position":{"start":{"line":451,"column":1,"offset":15862},"end":{"line":461,"column":4,"offset":16092},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the program above, the void pointer cannot be used directly.  It must be converted to a different pointer type before the value that the pointer is pointing at can be referenced.  ","position":{"start":{"line":463,"column":1,"offset":16094},"end":{"line":463,"column":184,"offset":16277},"indent":[]}}],"position":{"start":{"line":463,"column":1,"offset":16094},"end":{"line":463,"column":184,"offset":16277},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The program above introduced ","position":{"start":{"line":465,"column":1,"offset":16279},"end":{"line":465,"column":30,"offset":16308},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":465,"column":30,"offset":16308},"end":{"line":465,"column":34,"offset":16312},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":465,"column":34,"offset":16312},"end":{"line":465,"column":36,"offset":16314},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">else if</code>","position":{"start":{"line":465,"column":36,"offset":16314},"end":{"line":465,"column":45,"offset":16323},"indent":[]}},{"type":"text","value":", and the ","position":{"start":{"line":465,"column":45,"offset":16323},"end":{"line":465,"column":55,"offset":16333},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&amp;</code>","position":{"start":{"line":465,"column":55,"offset":16333},"end":{"line":465,"column":58,"offset":16336},"indent":[]}},{"type":"text","value":" operator.  If statements have similar syntax as while statements.  ","position":{"start":{"line":465,"column":58,"offset":16336},"end":{"line":465,"column":126,"offset":16404},"indent":[]}}],"position":{"start":{"line":465,"column":1,"offset":16279},"end":{"line":465,"column":126,"offset":16404},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(&lt;condition&gt;) {\n  zero or more statements;\n}\nelse if(&lt;condition&gt;) {\n  zero or more statements;  \n}\nelse {\n  zero or more statements;\n}</code></pre></div>","position":{"start":{"line":467,"column":1,"offset":16406},"end":{"line":477,"column":4,"offset":16550},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The curly braces are not needed if there is exactly one statement.","position":{"start":{"line":479,"column":1,"offset":16552},"end":{"line":479,"column":67,"offset":16618},"indent":[]}}],"position":{"start":{"line":479,"column":1,"offset":16552},"end":{"line":479,"column":67,"offset":16618},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">else if</code>","position":{"start":{"line":482,"column":1,"offset":16621},"end":{"line":482,"column":10,"offset":16630},"indent":[]}},{"type":"text","value":" works in connection with ","position":{"start":{"line":482,"column":10,"offset":16630},"end":{"line":482,"column":36,"offset":16656},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">if</code>","position":{"start":{"line":482,"column":36,"offset":16656},"end":{"line":482,"column":40,"offset":16660},"indent":[]}},{"type":"text","value":".  ","position":{"start":{"line":482,"column":40,"offset":16660},"end":{"line":482,"column":43,"offset":16663},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">else if</code>","position":{"start":{"line":482,"column":43,"offset":16663},"end":{"line":482,"column":52,"offset":16672},"indent":[]}},{"type":"text","value":" only happens if the if (or else if statements above it) have not been evaluated to equal a true condition.  Finally, else does not expect a condition and essentially becomes the default block to run if all other conditions were evaluated to be false.  It is also essential to realize the difference between = and ==.  A single equal statement is used for assignment.  A double equal statement indicates an equality test.","position":{"start":{"line":482,"column":52,"offset":16672},"end":{"line":482,"column":473,"offset":17093},"indent":[]}}],"position":{"start":{"line":482,"column":1,"offset":16621},"end":{"line":482,"column":473,"offset":17093},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In code below, p was of type ","position":{"start":{"line":484,"column":1,"offset":17095},"end":{"line":484,"column":30,"offset":17124},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">void *</code>","position":{"start":{"line":484,"column":30,"offset":17124},"end":{"line":484,"column":38,"offset":17132},"indent":[]}},{"type":"text","value":".  It must be converted before it can be dereferenced (to get the value of what p is pointing at).","position":{"start":{"line":484,"column":38,"offset":17132},"end":{"line":484,"column":136,"offset":17230},"indent":[]}}],"position":{"start":{"line":484,"column":1,"offset":17095},"end":{"line":484,"column":136,"offset":17230},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>vp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned char type: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>vp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":486,"column":1,"offset":17232},"end":{"line":489,"column":4,"offset":17323},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The code above can be shortened to:","position":{"start":{"line":491,"column":1,"offset":17325},"end":{"line":491,"column":36,"offset":17360},"indent":[]}}],"position":{"start":{"line":491,"column":1,"offset":17325},"end":{"line":491,"column":36,"offset":17360},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"unsigned char type: %u\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":492,"column":1,"offset":17361},"end":{"line":494,"column":4,"offset":17428},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You will find the above shortening often.  I used the two-line version to make what was happening clear.\nPlacing an asterisk before a pointer results in getting the value of what the pointer is pointing at.  Placing an ampersand before a value results in a pointer to the value.  For example:","position":{"start":{"line":496,"column":1,"offset":17430},"end":{"line":497,"column":188,"offset":17722},"indent":[1]}}],"position":{"start":{"line":496,"column":1,"offset":17430},"end":{"line":497,"column":188,"offset":17722},"indent":[1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p points to the value 1.5</span></code></pre></div>","position":{"start":{"line":499,"column":1,"offset":17724},"end":{"line":502,"column":4,"offset":17794},"indent":[1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#what-happens-during-compilation","title":null,"children":[],"data":{"hProperties":{"aria-label":"what happens during compilation permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"What happens during compilation","position":{"start":{"line":504,"column":4,"offset":17799},"end":{"line":504,"column":35,"offset":17830},"indent":[]}}],"position":{"start":{"line":504,"column":1,"offset":17796},"end":{"line":504,"column":35,"offset":17830},"indent":[]},"data":{"id":"what-happens-during-compilation","htmlAttributes":{"id":"what-happens-during-compilation"},"hProperties":{"id":"what-happens-during-compilation"}}},{"type":"paragraph","children":[{"type":"text","value":"In C, code converts to binary (which is generally very hard for humans to read).  C does not use line separation to separate code (except for compiler directives (lines that start with #)).  In C, there are two types of comments.  /* */ can be multiline comments.  // comments run to the end of the line.  The first thing a compiler does is remove comments.","position":{"start":{"line":506,"column":1,"offset":17832},"end":{"line":506,"column":358,"offset":18189},"indent":[]}}],"position":{"start":{"line":506,"column":1,"offset":17832},"end":{"line":506,"column":358,"offset":18189},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token comment\">/* This function returns the length of a string */</span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p must also be declared with const</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":509,"column":1,"offset":18192},"end":{"line":525,"column":4,"offset":18529},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":527,"column":1,"offset":18531},"end":{"line":527,"column":8,"offset":18538},"indent":[]}}],"position":{"start":{"line":527,"column":1,"offset":18531},"end":{"line":527,"column":8,"offset":18538},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":529,"column":1,"offset":18540},"end":{"line":544,"column":4,"offset":18788},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Next, it will look for each individual statement, function declarations, loops, etc.  We can remove all of the spacing of the function above.","position":{"start":{"line":546,"column":1,"offset":18790},"end":{"line":546,"column":142,"offset":18931},"indent":[]}}],"position":{"start":{"line":546,"column":1,"offset":18790},"end":{"line":546,"column":142,"offset":18931},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":547,"column":1,"offset":18932},"end":{"line":551,"column":4,"offset":19148},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you look at the above code, you should be able to see that functions follow the syntax of","position":{"start":{"line":553,"column":1,"offset":19150},"end":{"line":553,"column":93,"offset":19242},"indent":[]}}],"position":{"start":{"line":553,"column":1,"offset":19150},"end":{"line":553,"column":93,"offset":19242},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;return type&gt; &lt;function name&gt;([arguments]){[statements]}</code></pre></div>","position":{"start":{"line":554,"column":1,"offset":19243},"end":{"line":556,"column":4,"offset":19307},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Semicolons form natural breaks.  If the while loop only has one statement, it does not need curly braces.  Lets slowly introduce space back into the code above.","position":{"start":{"line":558,"column":1,"offset":19309},"end":{"line":558,"column":161,"offset":19469},"indent":[]}}],"position":{"start":{"line":558,"column":1,"offset":19309},"end":{"line":558,"column":161,"offset":19469},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":560,"column":1,"offset":19471},"end":{"line":564,"column":4,"offset":19687},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Introduce new lines after the opening and closing braces of functions.","position":{"start":{"line":566,"column":1,"offset":19689},"end":{"line":566,"column":71,"offset":19759},"indent":[]}}],"position":{"start":{"line":566,"column":1,"offset":19689},"end":{"line":566,"column":71,"offset":19759},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":567,"column":1,"offset":19760},"end":{"line":576,"column":4,"offset":19981},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Indent code within the braces by two spaces","position":{"start":{"line":578,"column":1,"offset":19983},"end":{"line":578,"column":44,"offset":20026},"indent":[]}}],"position":{"start":{"line":578,"column":1,"offset":19983},"end":{"line":578,"column":44,"offset":20026},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":579,"column":1,"offset":20027},"end":{"line":588,"column":4,"offset":20252},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Place a new line after each semicolon.","position":{"start":{"line":590,"column":1,"offset":20254},"end":{"line":590,"column":39,"offset":20292},"indent":[]}}],"position":{"start":{"line":590,"column":1,"offset":20254},"end":{"line":590,"column":39,"offset":20292},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":591,"column":1,"offset":20293},"end":{"line":603,"column":4,"offset":20527},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Place a new line after the while statement","position":{"start":{"line":605,"column":1,"offset":20529},"end":{"line":605,"column":43,"offset":20571},"indent":[]}}],"position":{"start":{"line":605,"column":1,"offset":20529},"end":{"line":605,"column":43,"offset":20571},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n  p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":606,"column":1,"offset":20572},"end":{"line":619,"column":4,"offset":20809},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Indent the line following the while statement to make it clear that that line belongs to the loop.","position":{"start":{"line":621,"column":1,"offset":20811},"end":{"line":621,"column":99,"offset":20909},"indent":[]}}],"position":{"start":{"line":621,"column":1,"offset":20811},"end":{"line":621,"column":99,"offset":20909},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":622,"column":1,"offset":20910},"end":{"line":635,"column":4,"offset":21149},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Introduce extra spacing to separate the functions and the include statements.","position":{"start":{"line":637,"column":1,"offset":21151},"end":{"line":637,"column":78,"offset":21228},"indent":[]}}],"position":{"start":{"line":637,"column":1,"offset":21151},"end":{"line":637,"column":78,"offset":21228},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\nsize_t <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token operator\">=</span>s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> p<span class=\"token operator\">-</span>s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World (%ld)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":638,"column":1,"offset":21229},"end":{"line":653,"column":4,"offset":21473},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The syntax is necessary for the C compiler to understand where one statement ends and the next starts.  All of the above examples compile and will work the same.  The last example is easier to read.  C does not force you to make the code easy to read.  It is just an excellent idea to do so!","position":{"start":{"line":655,"column":1,"offset":21475},"end":{"line":655,"column":292,"offset":21766},"indent":[]}}],"position":{"start":{"line":655,"column":1,"offset":21475},"end":{"line":655,"column":292,"offset":21766},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"There are different types of loops in C.  The following defines the ","position":{"start":{"line":658,"column":1,"offset":21769},"end":{"line":658,"column":69,"offset":21837},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">for</code>","position":{"start":{"line":658,"column":69,"offset":21837},"end":{"line":658,"column":74,"offset":21842},"indent":[]}},{"type":"text","value":" loop:","position":{"start":{"line":658,"column":74,"offset":21842},"end":{"line":658,"column":80,"offset":21848},"indent":[]}}],"position":{"start":{"line":658,"column":1,"offset":21769},"end":{"line":658,"column":80,"offset":21848},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>initialization_code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span>condition<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span>post_loop code<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":660,"column":1,"offset":21850},"end":{"line":664,"column":4,"offset":21923},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"There are three components of the ","position":{"start":{"line":666,"column":1,"offset":21925},"end":{"line":666,"column":35,"offset":21959},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">for</code>","position":{"start":{"line":666,"column":35,"offset":21959},"end":{"line":666,"column":40,"offset":21964},"indent":[]}},{"type":"text","value":" loop: the initialization","position":{"start":{"line":666,"column":40,"offset":21964},"end":{"line":666,"column":65,"offset":21989},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"code, condition, and post","position":{"start":{"line":666,"column":66,"offset":21990},"end":{"line":666,"column":91,"offset":22015},"indent":[]}}],"position":{"start":{"line":666,"column":65,"offset":21989},"end":{"line":666,"column":92,"offset":22016},"indent":[]}},{"type":"text","value":"loop code.  Notice the enclosure in square brackets ","position":{"start":{"line":666,"column":92,"offset":22016},"end":{"line":666,"column":144,"offset":22068},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">[]</code>","position":{"start":{"line":666,"column":144,"offset":22068},"end":{"line":666,"column":148,"offset":22072},"indent":[]}},{"type":"text","value":" instead of lesser/greater than signs ","position":{"start":{"line":666,"column":148,"offset":22072},"end":{"line":666,"column":186,"offset":22110},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">&lt;&gt;</code>","position":{"start":{"line":666,"column":186,"offset":22110},"end":{"line":666,"column":190,"offset":22114},"indent":[]}},{"type":"text","value":".  Square brackets indicate the bit of code is optional.","position":{"start":{"line":666,"column":190,"offset":22114},"end":{"line":666,"column":246,"offset":22170},"indent":[]}}],"position":{"start":{"line":666,"column":1,"offset":21925},"end":{"line":666,"column":246,"offset":22170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If there is no initialization","position":{"start":{"line":668,"column":1,"offset":22172},"end":{"line":668,"column":30,"offset":22201},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"code, condition, or post","position":{"start":{"line":668,"column":31,"offset":22202},"end":{"line":668,"column":55,"offset":22226},"indent":[]}}],"position":{"start":{"line":668,"column":30,"offset":22201},"end":{"line":668,"column":56,"offset":22227},"indent":[]}},{"type":"text","value":"loop code, the for loop will continue forever.  The following example would print the string \"Hello World!\" followed by a new line character continuously forever (or until the program was stopped).","position":{"start":{"line":668,"column":56,"offset":22227},"end":{"line":668,"column":253,"offset":22424},"indent":[]}}],"position":{"start":{"line":668,"column":1,"offset":22172},"end":{"line":668,"column":253,"offset":22424},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Hello World!\\n\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":669,"column":1,"offset":22425},"end":{"line":673,"column":4,"offset":22475},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code will loop through the arguments skipping the name of the program (as it is the first argument in the argv array).","position":{"start":{"line":675,"column":1,"offset":22477},"end":{"line":675,"column":124,"offset":22600},"indent":[]}}],"position":{"start":{"line":675,"column":1,"offset":22477},"end":{"line":675,"column":124,"offset":22600},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>","position":{"start":{"line":676,"column":1,"offset":22601},"end":{"line":678,"column":4,"offset":22639},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#how-to-time-code","title":null,"children":[],"data":{"hProperties":{"aria-label":"how to time code permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"How to time code","position":{"start":{"line":680,"column":4,"offset":22644},"end":{"line":680,"column":20,"offset":22660},"indent":[]}}],"position":{"start":{"line":680,"column":1,"offset":22641},"end":{"line":680,"column":20,"offset":22660},"indent":[]},"data":{"id":"how-to-time-code","htmlAttributes":{"id":"how-to-time-code"},"hProperties":{"id":"how-to-time-code"}}},{"type":"paragraph","children":[{"type":"text","value":"The example is going to reverse strings several times while timing the process.  The program should not modify the arguments that are passed into your program.  If you wish to modify an argument, you should first allocate memory for your program to use and then copy the argument into the newly allocated memory.  The ","position":{"start":{"line":682,"column":1,"offset":22662},"end":{"line":682,"column":319,"offset":22980},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">malloc</code>","position":{"start":{"line":682,"column":319,"offset":22980},"end":{"line":682,"column":327,"offset":22988},"indent":[]}},{"type":"text","value":" function will allocate the number of bytes requested for use.  You can read about it by typing ","position":{"start":{"line":682,"column":327,"offset":22988},"end":{"line":682,"column":423,"offset":23084},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">man malloc</code>","position":{"start":{"line":682,"column":423,"offset":23084},"end":{"line":682,"column":435,"offset":23096},"indent":[]}},{"type":"text","value":" from the command line.  Programs that require extra memory to work with must request that memory from the operating system.  ","position":{"start":{"line":682,"column":435,"offset":23096},"end":{"line":682,"column":561,"offset":23222},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">malloc</code>","position":{"start":{"line":682,"column":561,"offset":23222},"end":{"line":682,"column":569,"offset":23230},"indent":[]}},{"type":"text","value":" is one of the core ways to complete this.  Memory requested should later be freed using the ","position":{"start":{"line":682,"column":569,"offset":23230},"end":{"line":682,"column":662,"offset":23323},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">free</code>","position":{"start":{"line":682,"column":662,"offset":23323},"end":{"line":682,"column":668,"offset":23329},"indent":[]}},{"type":"text","value":" call.  The ","position":{"start":{"line":682,"column":668,"offset":23329},"end":{"line":682,"column":680,"offset":23341},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">malloc</code>","position":{"start":{"line":682,"column":680,"offset":23341},"end":{"line":682,"column":688,"offset":23349},"indent":[]}},{"type":"text","value":" function can return ","position":{"start":{"line":682,"column":688,"offset":23349},"end":{"line":682,"column":709,"offset":23370},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NULL</code>","position":{"start":{"line":682,"column":709,"offset":23370},"end":{"line":682,"column":715,"offset":23376},"indent":[]}},{"type":"text","value":", meaning that the memory was not available.  Trying to writing to a pointer that is pointing at NULL will cause your program to crash.  You can check for the error or just allow the program not so gracefully to crash.  In my examples, I am going to allow the program to crash if ","position":{"start":{"line":682,"column":715,"offset":23376},"end":{"line":682,"column":995,"offset":23656},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NULL</code>","position":{"start":{"line":682,"column":995,"offset":23656},"end":{"line":682,"column":1001,"offset":23662},"indent":[]}},{"type":"text","value":" is returned.  The only other reasonable option would be to have the program fail early, which effectively is the same thing.  In the example below, there are a few functions called.  The early writers of C decided to shorten the names of the functions.","position":{"start":{"line":682,"column":1001,"offset":23662},"end":{"line":682,"column":1254,"offset":23915},"indent":[]}}],"position":{"start":{"line":682,"column":1,"offset":22662},"end":{"line":682,"column":1254,"offset":23915},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">malloc - memory allocate\nstrlen - string length\nstrcpy - string copy</code></pre></div>","position":{"start":{"line":683,"column":1,"offset":23916},"end":{"line":687,"column":4,"offset":23992},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Once s is pointing at newly allocated memory which is the string length of ","position":{"start":{"line":689,"column":1,"offset":23994},"end":{"line":689,"column":76,"offset":24069},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">argv[i] + 1</code>","position":{"start":{"line":689,"column":76,"offset":24069},"end":{"line":689,"column":89,"offset":24082},"indent":[]}},{"type":"text","value":" for the zero terminator (the current iteration of the loop), a string copy of the argument is performed, so that s points to a copy of the given argument.","position":{"start":{"line":689,"column":89,"offset":24082},"end":{"line":689,"column":244,"offset":24237},"indent":[]}}],"position":{"start":{"line":689,"column":1,"offset":23994},"end":{"line":689,"column":244,"offset":24237},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":691,"column":1,"offset":24239},"end":{"line":698,"column":4,"offset":24369},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"At the beginning of the program, there were a few ","position":{"start":{"line":700,"column":1,"offset":24371},"end":{"line":700,"column":51,"offset":24421},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">#include</code>","position":{"start":{"line":700,"column":51,"offset":24421},"end":{"line":700,"column":61,"offset":24431},"indent":[]}},{"type":"text","value":" statements.  ","position":{"start":{"line":700,"column":61,"offset":24431},"end":{"line":700,"column":75,"offset":24445},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">#include</code>","position":{"start":{"line":700,"column":75,"offset":24445},"end":{"line":700,"column":85,"offset":24455},"indent":[]}},{"type":"text","value":" effectively copies the contents of the filename into the current program.  To use functions like ","position":{"start":{"line":700,"column":85,"offset":24455},"end":{"line":700,"column":183,"offset":24553},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">malloc</code>","position":{"start":{"line":700,"column":183,"offset":24553},"end":{"line":700,"column":191,"offset":24561},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":700,"column":191,"offset":24561},"end":{"line":700,"column":193,"offset":24563},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strcpy</code>","position":{"start":{"line":700,"column":193,"offset":24563},"end":{"line":700,"column":201,"offset":24571},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":700,"column":201,"offset":24571},"end":{"line":700,"column":207,"offset":24577},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">free</code>","position":{"start":{"line":700,"column":207,"offset":24577},"end":{"line":700,"column":213,"offset":24583},"indent":[]}},{"type":"text","value":", the proper file must be included.  Files with a suffix \".h\" are called header files and typically define how to call a function.  ","position":{"start":{"line":700,"column":213,"offset":24583},"end":{"line":700,"column":345,"offset":24715},"indent":[]}}],"position":{"start":{"line":700,"column":1,"offset":24371},"end":{"line":700,"column":345,"offset":24715},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></code></pre></div>","position":{"start":{"line":702,"column":1,"offset":24717},"end":{"line":708,"column":4,"offset":24824},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I include the include statements above because of the following function calls:","position":{"start":{"line":710,"column":1,"offset":24826},"end":{"line":710,"column":80,"offset":24905},"indent":[]}}],"position":{"start":{"line":710,"column":1,"offset":24826},"end":{"line":710,"column":80,"offset":24905},"indent":[]}},{"type":"table","align":[null,null],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Function","position":{"start":{"line":712,"column":3,"offset":24909},"end":{"line":712,"column":11,"offset":24917},"indent":[]}}],"position":{"start":{"line":712,"column":3,"offset":24909},"end":{"line":712,"column":11,"offset":24917},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Description","position":{"start":{"line":712,"column":14,"offset":24920},"end":{"line":712,"column":25,"offset":24931},"indent":[]}}],"position":{"start":{"line":712,"column":14,"offset":24920},"end":{"line":712,"column":25,"offset":24931},"indent":[]}}],"position":{"start":{"line":712,"column":1,"offset":24907},"end":{"line":712,"column":27,"offset":24933},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"stdio.h","position":{"start":{"line":714,"column":3,"offset":24946},"end":{"line":714,"column":10,"offset":24953},"indent":[]}}],"position":{"start":{"line":714,"column":3,"offset":24946},"end":{"line":714,"column":10,"offset":24953},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"printf, NULL, and many other io related functions","position":{"start":{"line":714,"column":13,"offset":24956},"end":{"line":714,"column":62,"offset":25005},"indent":[]}}],"position":{"start":{"line":714,"column":13,"offset":24956},"end":{"line":714,"column":62,"offset":25005},"indent":[]}}],"position":{"start":{"line":714,"column":1,"offset":24944},"end":{"line":714,"column":64,"offset":25007},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"stdlib.h","position":{"start":{"line":715,"column":3,"offset":25010},"end":{"line":715,"column":11,"offset":25018},"indent":[]}}],"position":{"start":{"line":715,"column":3,"offset":25010},"end":{"line":715,"column":11,"offset":25018},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"malloc, free, and many other standard library-related functions","position":{"start":{"line":715,"column":14,"offset":25021},"end":{"line":715,"column":77,"offset":25084},"indent":[]}}],"position":{"start":{"line":715,"column":14,"offset":25021},"end":{"line":715,"column":77,"offset":25084},"indent":[]}}],"position":{"start":{"line":715,"column":1,"offset":25008},"end":{"line":715,"column":79,"offset":25086},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"string.h","position":{"start":{"line":716,"column":3,"offset":25089},"end":{"line":716,"column":11,"offset":25097},"indent":[]}}],"position":{"start":{"line":716,"column":3,"offset":25089},"end":{"line":716,"column":11,"offset":25097},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"strlen, strcpy, and many other string related functions","position":{"start":{"line":716,"column":14,"offset":25100},"end":{"line":716,"column":69,"offset":25155},"indent":[]}}],"position":{"start":{"line":716,"column":14,"offset":25100},"end":{"line":716,"column":69,"offset":25155},"indent":[]}}],"position":{"start":{"line":716,"column":1,"offset":25087},"end":{"line":716,"column":71,"offset":25157},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"sys/time.h","position":{"start":{"line":717,"column":3,"offset":25160},"end":{"line":717,"column":13,"offset":25170},"indent":[]}}],"position":{"start":{"line":717,"column":3,"offset":25160},"end":{"line":717,"column":13,"offset":25170},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"gettimeofday","position":{"start":{"line":717,"column":16,"offset":25173},"end":{"line":717,"column":28,"offset":25185},"indent":[]}}],"position":{"start":{"line":717,"column":16,"offset":25173},"end":{"line":717,"column":28,"offset":25185},"indent":[]}}],"position":{"start":{"line":717,"column":1,"offset":25158},"end":{"line":717,"column":30,"offset":25187},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"time.h","position":{"start":{"line":718,"column":3,"offset":25190},"end":{"line":718,"column":9,"offset":25196},"indent":[]}}],"position":{"start":{"line":718,"column":3,"offset":25190},"end":{"line":718,"column":9,"offset":25196},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"sometimes an alternate location of gettimeofday","position":{"start":{"line":718,"column":12,"offset":25199},"end":{"line":718,"column":59,"offset":25246},"indent":[]}}],"position":{"start":{"line":718,"column":12,"offset":25199},"end":{"line":718,"column":59,"offset":25246},"indent":[]}}],"position":{"start":{"line":718,"column":1,"offset":25188},"end":{"line":718,"column":61,"offset":25248},"indent":[]}}],"position":{"start":{"line":712,"column":1,"offset":24907},"end":{"line":718,"column":61,"offset":25248},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">This program is going to time how long the reverse string method takes to run.  To get the amount of time that something takes, one might get a start time and an end time and then subtract the start time from the end time.  The following function will get the time in microseconds (millionths of seconds).  Passing NULL to gettimeofday will cause gettimeofday to return the current time.  The timeval structure consists of two members (the number of seconds and the number of microseconds).  \n```c\nlong get_time() {\n  struct timeval tv;\n  gettimeofday(&amp;tv, NULL);\n  return (tv.tv_sec * 1000000) + tv.tv_usec;\n}</code></pre></div>","position":{"start":{"line":719,"column":1,"offset":25249},"end":{"line":728,"column":4,"offset":25868},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A quick note on using parenthesis:  I strongly believe in making code easier to read.  Technically, I could have skipped the parenthesis without harm due to the order of operations, but the code becomes simpler to read by adding the parenthesis.","position":{"start":{"line":730,"column":1,"offset":25870},"end":{"line":730,"column":246,"offset":26115},"indent":[]}}],"position":{"start":{"line":730,"column":1,"offset":25870},"end":{"line":730,"column":246,"offset":26115},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Reversing a string takes a minimal amount of time.  It is so small that to accurately measure it, you need to repeat the test a million times to make a good step.  In each loop, the ","position":{"start":{"line":732,"column":1,"offset":26117},"end":{"line":732,"column":183,"offset":26299},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strcpy</code>","position":{"start":{"line":732,"column":183,"offset":26299},"end":{"line":732,"column":191,"offset":26307},"indent":[]}},{"type":"text","value":" resets s such that it has a copy of the ith argument so that it can be reversed.  The time that the process takes is ","position":{"start":{"line":732,"column":191,"offset":26307},"end":{"line":732,"column":309,"offset":26425},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">test_t2 - test_t1</code>","position":{"start":{"line":732,"column":309,"offset":26425},"end":{"line":732,"column":328,"offset":26444},"indent":[]}},{"type":"text","value":".  ","position":{"start":{"line":732,"column":328,"offset":26444},"end":{"line":732,"column":331,"offset":26447},"indent":[]}}],"position":{"start":{"line":732,"column":1,"offset":26117},"end":{"line":732,"column":331,"offset":26447},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> repeat_test <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">long</span> test_t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">long</span> test_t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> time_spent <span class=\"token operator\">=</span> test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">;</span>\noverall_time <span class=\"token operator\">+=</span> time_spent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":733,"column":1,"offset":26448},"end":{"line":744,"column":4,"offset":26686},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"After timing the reverse","position":{"start":{"line":746,"column":1,"offset":26688},"end":{"line":746,"column":25,"offset":26712},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"string call, printf is used to print the string on the terminal before it was reversed and the new form of the string (s).  Printf allows for format specifiers to match arguments after the first parameter (also known as the format string).  ","position":{"start":{"line":746,"column":26,"offset":26713},"end":{"line":746,"column":267,"offset":26954},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%s</code>","position":{"start":{"line":746,"column":267,"offset":26954},"end":{"line":746,"column":271,"offset":26958},"indent":[]}},{"type":"text","value":" indicates that there must be a string for the given argument.  ","position":{"start":{"line":746,"column":271,"offset":26958},"end":{"line":746,"column":335,"offset":27022},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%0.4f</code>","position":{"start":{"line":746,"column":335,"offset":27022},"end":{"line":746,"column":342,"offset":27029},"indent":[]}},{"type":"text","value":" expects a floating-point number and prints four decimal places.  test","position":{"start":{"line":746,"column":342,"offset":27029},"end":{"line":746,"column":412,"offset":27099},"indent":[]}}],"position":{"start":{"line":746,"column":25,"offset":26712},"end":{"line":746,"column":413,"offset":27100},"indent":[]}},{"type":"text","value":"t2 and test_t1 are both measured in microseconds.  Multiplying the difference by 1000 will change the unit type to nanoseconds.  Since the test was repeated 1 million times, the overall time needs to be divided by 1 million.  By multiplying or dividing a number by a decimal, it converts the type to a decimal.","position":{"start":{"line":746,"column":413,"offset":27100},"end":{"line":746,"column":723,"offset":27410},"indent":[]}}],"position":{"start":{"line":746,"column":1,"offset":26688},"end":{"line":746,"column":723,"offset":27410},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token operator\">*</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"overall time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> overall_time<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token operator\">*</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":748,"column":1,"offset":27412},"end":{"line":754,"column":4,"offset":27634},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#reversing-a-string","title":null,"children":[],"data":{"hProperties":{"aria-label":"reversing a string permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Reversing a string","position":{"start":{"line":756,"column":4,"offset":27639},"end":{"line":756,"column":22,"offset":27657},"indent":[]}}],"position":{"start":{"line":756,"column":1,"offset":27636},"end":{"line":756,"column":22,"offset":27657},"indent":[]},"data":{"id":"reversing-a-string","htmlAttributes":{"id":"reversing-a-string"},"hProperties":{"id":"reversing-a-string"}}},{"type":"paragraph","children":[{"type":"text","value":"The last function to examine is the reverse_string call.","position":{"start":{"line":758,"column":1,"offset":27659},"end":{"line":758,"column":57,"offset":27715},"indent":[]}}],"position":{"start":{"line":758,"column":1,"offset":27659},"end":{"line":758,"column":57,"offset":27715},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":759,"column":1,"offset":27716},"end":{"line":771,"column":4,"offset":27891},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The above code works in the following way.","position":{"start":{"line":773,"column":1,"offset":27893},"end":{"line":773,"column":43,"offset":27935},"indent":[]}}],"position":{"start":{"line":773,"column":1,"offset":27893},"end":{"line":773,"column":43,"offset":27935},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.  set a pointer e to the last character in the string.  The last character\n    is found by determining the length of the string s and pointing to the\n    length-1 char beyond s.\n2.  while s is less than e\n      swap the value that is pointed to by s and e.\n      advance s by one and decrement e by one.</code></pre></div>","position":{"start":{"line":774,"column":1,"offset":27936},"end":{"line":781,"column":4,"offset":28249},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Imagine the string \"Reverse\".  The ","position":{"start":{"line":783,"column":1,"offset":28251},"end":{"line":783,"column":36,"offset":28286},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">strlen</code>","position":{"start":{"line":783,"column":36,"offset":28286},"end":{"line":783,"column":44,"offset":28294},"indent":[]}},{"type":"text","value":" or length of \"Reverse\" is 7. Subtracting the pointer just after the string from the pointer that points to the beginning of the string, equals 7.","position":{"start":{"line":783,"column":44,"offset":28294},"end":{"line":783,"column":190,"offset":28440},"indent":[]}}],"position":{"start":{"line":783,"column":1,"offset":28251},"end":{"line":783,"column":190,"offset":28440},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">01234567\nReverse\n^      ^\ns      e</code></pre></div>","position":{"start":{"line":785,"column":1,"offset":28442},"end":{"line":790,"column":4,"offset":28484},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To reverse the string, we need the end pointer to point to the last character 'e'.","position":{"start":{"line":792,"column":1,"offset":28486},"end":{"line":792,"column":83,"offset":28568},"indent":[]}}],"position":{"start":{"line":792,"column":1,"offset":28486},"end":{"line":792,"column":83,"offset":28568},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">01234567\nReverse\n^     ^\ns     e</code></pre></div>","position":{"start":{"line":793,"column":1,"offset":28569},"end":{"line":798,"column":4,"offset":28609},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first step is to swap R and e.  In order to swap R and e, a temporary\nvariable is needed.","position":{"start":{"line":800,"column":1,"offset":28611},"end":{"line":801,"column":20,"offset":28704},"indent":[1]}}],"position":{"start":{"line":800,"column":1,"offset":28611},"end":{"line":801,"column":20,"offset":28704},"indent":[1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// *s == R</span>\n<span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// *e == e, so now string is equal to eeverse</span>\n<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// tmp = R, so now string is equal to eeversR</span>\ns<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// s points to the second e</span>\ne<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// e points to s</span></code></pre></div>","position":{"start":{"line":802,"column":1,"offset":28705},"end":{"line":808,"column":4,"offset":28941},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The while loop will continue because s is less than e.","position":{"start":{"line":810,"column":1,"offset":28943},"end":{"line":810,"column":55,"offset":28997},"indent":[]}}],"position":{"start":{"line":810,"column":1,"offset":28943},"end":{"line":810,"column":55,"offset":28997},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">01234567\neeversR\n ^   ^\n s   e</code></pre></div>","position":{"start":{"line":811,"column":1,"offset":28998},"end":{"line":816,"column":4,"offset":29036},"indent":[1,1,1,1,1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// *s == e</span>\n<span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// *e == s, so now string is equal to esverse</span>\n<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// tmp = e, so now string is equal to esvereR</span>\ns<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// s points to v</span>\ne<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// e points to r</span></code></pre></div>","position":{"start":{"line":818,"column":1,"offset":29038},"end":{"line":824,"column":4,"offset":29263},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The while loop will continue because s is less than e.","position":{"start":{"line":826,"column":1,"offset":29265},"end":{"line":826,"column":55,"offset":29319},"indent":[]}}],"position":{"start":{"line":826,"column":1,"offset":29265},"end":{"line":826,"column":55,"offset":29319},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">01234567\nesvereR\n  ^ ^\n  s e</code></pre></div>","position":{"start":{"line":827,"column":1,"offset":29320},"end":{"line":832,"column":4,"offset":29356},"indent":[1,1,1,1,1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// *s == v</span>\n<span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// *e == r, so now string is equal to esrereR</span>\n<span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// tmp = e, so now string is equal to esreveR</span>\ns<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// s points to the middle e</span>\ne<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// e points to the middle e</span></code></pre></div>","position":{"start":{"line":834,"column":1,"offset":29358},"end":{"line":840,"column":4,"offset":29605},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The while loop will NOT continue because s is not less than e.","position":{"start":{"line":842,"column":1,"offset":29607},"end":{"line":842,"column":63,"offset":29669},"indent":[]}}],"position":{"start":{"line":842,"column":1,"offset":29607},"end":{"line":842,"column":63,"offset":29669},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">01234567\nesvereR\n   ^\n   s\n   e</code></pre></div>","position":{"start":{"line":843,"column":1,"offset":29670},"end":{"line":849,"column":4,"offset":29709},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The string is now esreveR, which is the reverse of Reverse.","position":{"start":{"line":851,"column":1,"offset":29711},"end":{"line":851,"column":60,"offset":29770},"indent":[]}}],"position":{"start":{"line":851,"column":1,"offset":29711},"end":{"line":851,"column":60,"offset":29770},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#the-basic-makefile","title":null,"children":[],"data":{"hProperties":{"aria-label":"the basic makefile permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"The basic Makefile","position":{"start":{"line":853,"column":4,"offset":29775},"end":{"line":853,"column":22,"offset":29793},"indent":[]}}],"position":{"start":{"line":853,"column":1,"offset":29772},"end":{"line":853,"column":22,"offset":29793},"indent":[]},"data":{"id":"the-basic-makefile","htmlAttributes":{"id":"the-basic-makefile"},"hProperties":{"id":"the-basic-makefile"}}},{"type":"paragraph","children":[{"type":"text","value":"If you change to that directory, you will find the following Makefile.  ","position":{"start":{"line":855,"column":1,"offset":29795},"end":{"line":855,"column":73,"offset":29867},"indent":[]}}],"position":{"start":{"line":855,"column":1,"offset":29795},"end":{"line":855,"column":73,"offset":29867},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_timer examples\n\n<span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c\n\tgcc test_timer.c -o test_timer\n\n<span class=\"token symbol\">examples</span><span class=\"token punctuation\">:</span>\n\t./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\trm -f test_timer *~</code></pre></div>","position":{"start":{"line":857,"column":1,"offset":29869},"end":{"line":868,"column":4,"offset":30056},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"When you run","position":{"start":{"line":870,"column":1,"offset":30058},"end":{"line":870,"column":13,"offset":30070},"indent":[]}}],"position":{"start":{"line":870,"column":1,"offset":30058},"end":{"line":870,"column":13,"offset":30070},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span></code></pre></div>","position":{"start":{"line":871,"column":1,"offset":30071},"end":{"line":873,"column":4,"offset":30087},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first block with a colon will run.  In this Makefile, it is the following line:","position":{"start":{"line":875,"column":1,"offset":30089},"end":{"line":875,"column":84,"offset":30172},"indent":[]}}],"position":{"start":{"line":875,"column":1,"offset":30089},"end":{"line":875,"column":84,"offset":30172},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_timer examples</code></pre></div>","position":{"start":{"line":876,"column":1,"offset":30173},"end":{"line":878,"column":4,"offset":30213},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The all group refers to other groups to be built.  In this case, it is test_timer and examples.","position":{"start":{"line":880,"column":1,"offset":30215},"end":{"line":880,"column":96,"offset":30310},"indent":[]}}],"position":{"start":{"line":880,"column":1,"offset":30215},"end":{"line":880,"column":96,"offset":30310},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c\n\tgcc test_timer.c -o test_timer\n\n<span class=\"token symbol\">Examples</span><span class=\"token punctuation\">:</span>\n\t./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse</code></pre></div>","position":{"start":{"line":882,"column":1,"offset":30312},"end":{"line":888,"column":4,"offset":30444},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The lines of code after test","position":{"start":{"line":890,"column":1,"offset":30446},"end":{"line":890,"column":29,"offset":30474},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer will run if the file called test","position":{"start":{"line":890,"column":30,"offset":30475},"end":{"line":890,"column":68,"offset":30513},"indent":[]}}],"position":{"start":{"line":890,"column":29,"offset":30474},"end":{"line":890,"column":69,"offset":30514},"indent":[]}},{"type":"text","value":"timer is older than the files after the colon.  If you edit test","position":{"start":{"line":890,"column":69,"offset":30514},"end":{"line":890,"column":133,"offset":30578},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c, the program will be built using the following line of code.  The output is test","position":{"start":{"line":890,"column":134,"offset":30579},"end":{"line":890,"column":222,"offset":30667},"indent":[]}}],"position":{"start":{"line":890,"column":133,"offset":30578},"end":{"line":890,"column":223,"offset":30668},"indent":[]}},{"type":"text","value":"timer.","position":{"start":{"line":890,"column":223,"offset":30668},"end":{"line":890,"column":229,"offset":30674},"indent":[]}}],"position":{"start":{"line":890,"column":1,"offset":30446},"end":{"line":890,"column":229,"offset":30674},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">gcc test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":891,"column":1,"offset":30675},"end":{"line":893,"column":4,"offset":30721},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you did not want to use a Makefile to build test_timer, you could do so from the command line using the following command.","position":{"start":{"line":895,"column":1,"offset":30723},"end":{"line":895,"column":126,"offset":30848},"indent":[]}}],"position":{"start":{"line":895,"column":1,"offset":30723},"end":{"line":895,"column":126,"offset":30848},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gcc test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":897,"column":1,"offset":30850},"end":{"line":899,"column":4,"offset":30892},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The examples block will run every time because it does not have any dependencies, and examples are not a file that exists.  If you were to create a file called examples, then the examples block would cease to run.  By running ","position":{"start":{"line":901,"column":1,"offset":30894},"end":{"line":901,"column":227,"offset":31120},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make</code>","position":{"start":{"line":901,"column":227,"offset":31120},"end":{"line":901,"column":233,"offset":31126},"indent":[]}},{"type":"text","value":", you will effectively build test_timer if it needs to build and run the examples block.  Running  ","position":{"start":{"line":901,"column":233,"offset":31126},"end":{"line":901,"column":332,"offset":31225},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make clean</code>","position":{"start":{"line":901,"column":332,"offset":31225},"end":{"line":901,"column":344,"offset":31237},"indent":[]}},{"type":"text","value":" will clean up the binary.  You can run any block by specifying it. ","position":{"start":{"line":901,"column":344,"offset":31237},"end":{"line":901,"column":412,"offset":31305},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make all</code>","position":{"start":{"line":901,"column":412,"offset":31305},"end":{"line":901,"column":422,"offset":31315},"indent":[]}},{"type":"text","value":" is equivalent to running ","position":{"start":{"line":901,"column":422,"offset":31315},"end":{"line":901,"column":448,"offset":31341},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make</code>","position":{"start":{"line":901,"column":448,"offset":31341},"end":{"line":901,"column":454,"offset":31347},"indent":[]}},{"type":"text","value":".  If you just want to run the examples block, you can by running ","position":{"start":{"line":901,"column":454,"offset":31347},"end":{"line":901,"column":520,"offset":31413},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make examples</code>","position":{"start":{"line":901,"column":520,"offset":31413},"end":{"line":901,"column":535,"offset":31428},"indent":[]}},{"type":"text","value":".  ","position":{"start":{"line":901,"column":535,"offset":31428},"end":{"line":901,"column":538,"offset":31431},"indent":[]}}],"position":{"start":{"line":901,"column":1,"offset":30894},"end":{"line":901,"column":538,"offset":31431},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#more-accurately-timing-code","title":null,"children":[],"data":{"hProperties":{"aria-label":"more accurately timing code permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"More accurately timing code","position":{"start":{"line":903,"column":4,"offset":31436},"end":{"line":903,"column":31,"offset":31463},"indent":[]}}],"position":{"start":{"line":903,"column":1,"offset":31433},"end":{"line":903,"column":31,"offset":31463},"indent":[]},"data":{"id":"more-accurately-timing-code","htmlAttributes":{"id":"more-accurately-timing-code"},"hProperties":{"id":"more-accurately-timing-code"}}},{"type":"paragraph","children":[{"type":"text","value":"In the last section, we explored how to time the reverse","position":{"start":{"line":905,"column":1,"offset":31465},"end":{"line":905,"column":57,"offset":31521},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"string function.  In this section, we will explore how to time the function better.  One thing you may have noticed is that there are a million calls to both `reverse","position":{"start":{"line":905,"column":58,"offset":31522},"end":{"line":905,"column":224,"offset":31688},"indent":[]}}],"position":{"start":{"line":905,"column":57,"offset":31521},"end":{"line":905,"column":225,"offset":31689},"indent":[]}},{"type":"text","value":"string","position":{"start":{"line":905,"column":225,"offset":31689},"end":{"line":905,"column":231,"offset":31695},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">and</code>","position":{"start":{"line":905,"column":231,"offset":31695},"end":{"line":905,"column":238,"offset":31702},"indent":[]}},{"type":"text","value":"strcpy","position":{"start":{"line":905,"column":238,"offset":31702},"end":{"line":905,"column":244,"offset":31708},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.  There is also the overhead of the loop.  To do the timing correctly, we should have timed the</code>","position":{"start":{"line":905,"column":244,"offset":31708},"end":{"line":905,"column":343,"offset":31807},"indent":[]}},{"type":"text","value":"strcpy` and the loop and subtracted that from the loop, which has the reverse_string function called.","position":{"start":{"line":905,"column":343,"offset":31807},"end":{"line":905,"column":444,"offset":31908},"indent":[]}}],"position":{"start":{"line":905,"column":1,"offset":31465},"end":{"line":905,"column":444,"offset":31908},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The timing for the work in ","position":{"start":{"line":907,"column":1,"offset":31910},"end":{"line":907,"column":28,"offset":31937},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":907,"column":28,"offset":31937},"end":{"line":907,"column":31,"offset":31940},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":907,"column":31,"offset":31940},"end":{"line":907,"column":46,"offset":31955},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/2","position":{"start":{"line":907,"column":47,"offset":31956},"end":{"line":907,"column":55,"offset":31964},"indent":[]}}],"position":{"start":{"line":907,"column":46,"offset":31955},"end":{"line":907,"column":56,"offset":31965},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":907,"column":56,"offset":31965},"end":{"line":907,"column":61,"offset":31970},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":907,"column":61,"offset":31970},"end":{"line":907,"column":65,"offset":31974},"indent":[]}},{"type":"text","value":" was:","position":{"start":{"line":907,"column":65,"offset":31974},"end":{"line":907,"column":70,"offset":31979},"indent":[]}}],"position":{"start":{"line":907,"column":1,"offset":31910},"end":{"line":907,"column":70,"offset":31979},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">46</span>.4650ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">20</span>.5820ns\noverall time_spent: <span class=\"token number\">67</span>.0470ns</code></pre></div>","position":{"start":{"line":909,"column":1,"offset":31981},"end":{"line":918,"column":4,"offset":32228},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":920,"column":1,"offset":32230},"end":{"line":920,"column":33,"offset":32262},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":920,"column":33,"offset":32262},"end":{"line":920,"column":36,"offset":32265},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":920,"column":36,"offset":32265},"end":{"line":920,"column":51,"offset":32280},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/2","position":{"start":{"line":920,"column":52,"offset":32281},"end":{"line":920,"column":60,"offset":32289},"indent":[]}}],"position":{"start":{"line":920,"column":51,"offset":32280},"end":{"line":920,"column":61,"offset":32290},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":920,"column":61,"offset":32290},"end":{"line":920,"column":66,"offset":32295},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":920,"column":66,"offset":32295},"end":{"line":920,"column":70,"offset":32299},"indent":[]}}],"position":{"start":{"line":920,"column":1,"offset":32230},"end":{"line":920,"column":70,"offset":32299},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">35</span>.8950ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">13</span>.7250ns\noverall time_spent: <span class=\"token number\">49</span>.6200ns</code></pre></div>","position":{"start":{"line":922,"column":1,"offset":32301},"end":{"line":931,"column":4,"offset":32548},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Running ","position":{"start":{"line":933,"column":1,"offset":32550},"end":{"line":933,"column":9,"offset":32558},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make</code>","position":{"start":{"line":933,"column":9,"offset":32558},"end":{"line":933,"column":15,"offset":32564},"indent":[]}},{"type":"text","value":" yields a 17.5 nanosecond improvement.  The following test demonstrates the difference between 1","position":{"start":{"line":933,"column":15,"offset":32564},"end":{"line":933,"column":111,"offset":32660},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer and 2","position":{"start":{"line":933,"column":112,"offset":32661},"end":{"line":933,"column":123,"offset":32672},"indent":[]}}],"position":{"start":{"line":933,"column":111,"offset":32660},"end":{"line":933,"column":124,"offset":32673},"indent":[]}},{"type":"text","value":"timer:","position":{"start":{"line":933,"column":124,"offset":32673},"end":{"line":933,"column":130,"offset":32679},"indent":[]}}],"position":{"start":{"line":933,"column":1,"offset":32550},"end":{"line":933,"column":130,"offset":32679},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> test_timer.c <span class=\"token punctuation\">..</span>/1_timer/test_timer.c\n<span class=\"token number\">30</span>,35d29\n<span class=\"token operator\">&lt;</span>     long copy_t1 <span class=\"token operator\">=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>     for<span class=\"token punctuation\">(</span> int <span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j++ <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">&lt;</span>       strcpy<span class=\"token punctuation\">(</span>s, argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>     <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>     long copy_t2 <span class=\"token operator\">=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>\n42c36\n<span class=\"token operator\">&lt;</span>     long time_spent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_t2-test_t1<span class=\"token punctuation\">)</span> - <span class=\"token punctuation\">(</span>copy_t2-copy_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n---\n<span class=\"token operator\">></span>     long time_spent <span class=\"token operator\">=</span> test_t2-test_t1<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":935,"column":1,"offset":32681},"end":{"line":948,"column":4,"offset":33006},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The less than symbols mean that the change is in the file in the first parameter (test","position":{"start":{"line":950,"column":1,"offset":33008},"end":{"line":950,"column":87,"offset":33094},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c).  The greater than symbol indicates that the change is in the file in the second parameter (../1","position":{"start":{"line":950,"column":88,"offset":33095},"end":{"line":950,"column":193,"offset":33200},"indent":[]}}],"position":{"start":{"line":950,"column":87,"offset":33094},"end":{"line":950,"column":194,"offset":33201},"indent":[]}},{"type":"text","value":"timer/test","position":{"start":{"line":950,"column":194,"offset":33201},"end":{"line":950,"column":204,"offset":33211},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c).  You should also notice three dashes (---) between the two lines indicating time","position":{"start":{"line":950,"column":205,"offset":33212},"end":{"line":950,"column":295,"offset":33302},"indent":[]}}],"position":{"start":{"line":950,"column":204,"offset":33211},"end":{"line":950,"column":296,"offset":33303},"indent":[]}},{"type":"text","value":"spent.  The 30,35d29 means that the lines were added after line 29 as lines 30-35.  The 42c36 means that line 42 in test","position":{"start":{"line":950,"column":296,"offset":33303},"end":{"line":950,"column":416,"offset":33423},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c was compared with line 36 in ../1","position":{"start":{"line":950,"column":417,"offset":33424},"end":{"line":950,"column":458,"offset":33465},"indent":[]}}],"position":{"start":{"line":950,"column":416,"offset":33423},"end":{"line":950,"column":459,"offset":33466},"indent":[]}},{"type":"text","value":"timer/test_timer.c.","position":{"start":{"line":950,"column":459,"offset":33466},"end":{"line":950,"column":478,"offset":33485},"indent":[]}}],"position":{"start":{"line":950,"column":1,"offset":33008},"end":{"line":950,"column":478,"offset":33485},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As shown above, there are two changes.  The first times everything but reverse_string.","position":{"start":{"line":952,"column":1,"offset":33487},"end":{"line":952,"column":87,"offset":33573},"indent":[]}}],"position":{"start":{"line":952,"column":1,"offset":33487},"end":{"line":952,"column":87,"offset":33573},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">long</span> copy_t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">long</span> copy_t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":953,"column":1,"offset":33574},"end":{"line":959,"column":4,"offset":33708},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The second change subtracts the time spent doing everything but the reverse string from the reverse string loop.","position":{"start":{"line":961,"column":1,"offset":33710},"end":{"line":961,"column":113,"offset":33822},"indent":[]}}],"position":{"start":{"line":961,"column":1,"offset":33710},"end":{"line":961,"column":113,"offset":33822},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> time_spent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>copy_t2<span class=\"token operator\">-</span>copy_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":962,"column":1,"offset":33823},"end":{"line":964,"column":4,"offset":33888},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#doing-a-better-job-of-timing-continued","title":null,"children":[],"data":{"hProperties":{"aria-label":"doing a better job of timing continued permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Doing a better job of timing continued","position":{"start":{"line":966,"column":4,"offset":33893},"end":{"line":966,"column":42,"offset":33931},"indent":[]}}],"position":{"start":{"line":966,"column":1,"offset":33890},"end":{"line":966,"column":42,"offset":33931},"indent":[]},"data":{"id":"doing-a-better-job-of-timing-continued","htmlAttributes":{"id":"doing-a-better-job-of-timing-continued"},"hProperties":{"id":"doing-a-better-job-of-timing-continued"}}},{"type":"paragraph","children":[{"type":"text","value":"In the last section, we eliminated the cost of the strcpy and loop from the timing.  Another thing to do is to reconsider our reverse","position":{"start":{"line":968,"column":1,"offset":33933},"end":{"line":968,"column":134,"offset":34066},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"string function.  The reverse","position":{"start":{"line":968,"column":135,"offset":34067},"end":{"line":968,"column":164,"offset":34096},"indent":[]}}],"position":{"start":{"line":968,"column":134,"offset":34066},"end":{"line":968,"column":165,"offset":34097},"indent":[]}},{"type":"text","value":"string calls strlen to get the length of the string s.  We could try and just pass the length of s into the call.  We can get the length of the argument outside of the repeated and timed test.  For completeness, we will compare the timing of 2","position":{"start":{"line":968,"column":165,"offset":34097},"end":{"line":968,"column":408,"offset":34340},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer with 3","position":{"start":{"line":968,"column":409,"offset":34341},"end":{"line":968,"column":421,"offset":34353},"indent":[]}}],"position":{"start":{"line":968,"column":408,"offset":34340},"end":{"line":968,"column":422,"offset":34354},"indent":[]}},{"type":"text","value":"timer.","position":{"start":{"line":968,"column":422,"offset":34354},"end":{"line":968,"column":428,"offset":34360},"indent":[]}}],"position":{"start":{"line":968,"column":1,"offset":33933},"end":{"line":968,"column":428,"offset":34360},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The timing for the work in ","position":{"start":{"line":970,"column":1,"offset":34362},"end":{"line":970,"column":28,"offset":34389},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":970,"column":28,"offset":34389},"end":{"line":970,"column":31,"offset":34392},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":970,"column":31,"offset":34392},"end":{"line":970,"column":46,"offset":34407},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/2","position":{"start":{"line":970,"column":47,"offset":34408},"end":{"line":970,"column":55,"offset":34416},"indent":[]}}],"position":{"start":{"line":970,"column":46,"offset":34407},"end":{"line":970,"column":56,"offset":34417},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":970,"column":56,"offset":34417},"end":{"line":970,"column":61,"offset":34422},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":970,"column":61,"offset":34422},"end":{"line":970,"column":65,"offset":34426},"indent":[]}},{"type":"text","value":" was...","position":{"start":{"line":970,"column":65,"offset":34426},"end":{"line":970,"column":72,"offset":34433},"indent":[]}}],"position":{"start":{"line":970,"column":1,"offset":34362},"end":{"line":970,"column":72,"offset":34433},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">37</span>.4880ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">12</span>.5070ns\noverall time_spent: <span class=\"token number\">49</span>.9950ns</code></pre></div>","position":{"start":{"line":971,"column":1,"offset":34434},"end":{"line":980,"column":4,"offset":34681},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":982,"column":1,"offset":34683},"end":{"line":982,"column":33,"offset":34715},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":982,"column":33,"offset":34715},"end":{"line":982,"column":36,"offset":34718},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":982,"column":36,"offset":34718},"end":{"line":982,"column":51,"offset":34733},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/3","position":{"start":{"line":982,"column":52,"offset":34734},"end":{"line":982,"column":60,"offset":34742},"indent":[]}}],"position":{"start":{"line":982,"column":51,"offset":34733},"end":{"line":982,"column":61,"offset":34743},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":982,"column":61,"offset":34743},"end":{"line":982,"column":66,"offset":34748},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":982,"column":66,"offset":34748},"end":{"line":982,"column":70,"offset":34752},"indent":[]}}],"position":{"start":{"line":982,"column":1,"offset":34683},"end":{"line":982,"column":70,"offset":34752},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">28</span>.8140ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">6</span>.5320ns\noverall time_spent: <span class=\"token number\">35</span>.3460ns</code></pre></div>","position":{"start":{"line":983,"column":1,"offset":34753},"end":{"line":992,"column":4,"offset":34999},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Running make yields a 14.5 nanosecond improvement.  The difference between 2","position":{"start":{"line":994,"column":1,"offset":35001},"end":{"line":994,"column":77,"offset":35077},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer and 3","position":{"start":{"line":994,"column":78,"offset":35078},"end":{"line":994,"column":89,"offset":35089},"indent":[]}}],"position":{"start":{"line":994,"column":77,"offset":35077},"end":{"line":994,"column":90,"offset":35090},"indent":[]}},{"type":"text","value":"timer can be found by running...","position":{"start":{"line":994,"column":90,"offset":35090},"end":{"line":994,"column":122,"offset":35122},"indent":[]}}],"position":{"start":{"line":994,"column":1,"offset":35001},"end":{"line":994,"column":122,"offset":35122},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> test_timer.c <span class=\"token punctuation\">..</span>/2_timer/test_timer.c\n7c7,8\n<span class=\"token operator\">&lt;</span> void reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n---\n<span class=\"token operator\">></span> void reverse_string<span class=\"token punctuation\">(</span> char *s <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">></span>   size_t len <span class=\"token operator\">=</span> strlen<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">28</span>,30c29\n<span class=\"token operator\">&lt;</span>     size_t len <span class=\"token operator\">=</span> strlen<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>     char *s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>char *<span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span>len+1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>\n---\n<span class=\"token operator\">></span>     char *s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>char *<span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span>strlen<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>+1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n40c39\n<span class=\"token operator\">&lt;</span>       reverse_string<span class=\"token punctuation\">(</span>s, len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n---\n<span class=\"token operator\">></span>       reverse_string<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":995,"column":1,"offset":35123},"end":{"line":1012,"column":4,"offset":35508},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Line 7 replaces lines 7-8 in the previous test_timer.c.  Lines 28-30 replace line 29.  Line 40 replaces line 39.","position":{"start":{"line":1014,"column":1,"offset":35510},"end":{"line":1014,"column":113,"offset":35622},"indent":[]}}],"position":{"start":{"line":1014,"column":1,"offset":35510},"end":{"line":1014,"column":113,"offset":35622},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lines 7-8","position":{"start":{"line":1016,"column":1,"offset":35624},"end":{"line":1016,"column":10,"offset":35633},"indent":[]}}],"position":{"start":{"line":1016,"column":1,"offset":35624},"end":{"line":1016,"column":10,"offset":35633},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1017,"column":1,"offset":35634},"end":{"line":1020,"column":4,"offset":35701},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"are replaced with this line at line 7","position":{"start":{"line":1022,"column":1,"offset":35703},"end":{"line":1022,"column":38,"offset":35740},"indent":[]}}],"position":{"start":{"line":1022,"column":1,"offset":35703},"end":{"line":1022,"column":38,"offset":35740},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>","position":{"start":{"line":1023,"column":1,"offset":35741},"end":{"line":1025,"column":4,"offset":35794},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of getting the string length of s in every call, reverse_string now expects the length of the string to be passed into it.","position":{"start":{"line":1027,"column":1,"offset":35796},"end":{"line":1027,"column":131,"offset":35926},"indent":[]}}],"position":{"start":{"line":1027,"column":1,"offset":35796},"end":{"line":1027,"column":131,"offset":35926},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Line 29","position":{"start":{"line":1029,"column":1,"offset":35928},"end":{"line":1029,"column":8,"offset":35935},"indent":[]}}],"position":{"start":{"line":1029,"column":1,"offset":35928},"end":{"line":1029,"column":8,"offset":35935},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1030,"column":1,"offset":35936},"end":{"line":1032,"column":4,"offset":35989},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"is replaced with lines 28-30","position":{"start":{"line":1034,"column":1,"offset":35991},"end":{"line":1034,"column":29,"offset":36019},"indent":[]}}],"position":{"start":{"line":1034,"column":1,"offset":35991},"end":{"line":1034,"column":29,"offset":36019},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1035,"column":1,"offset":36020},"end":{"line":1039,"column":4,"offset":36092},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We get the length of the ith argument one time before calling malloc and use that length in the malloc call.","position":{"start":{"line":1041,"column":1,"offset":36094},"end":{"line":1041,"column":109,"offset":36202},"indent":[]}}],"position":{"start":{"line":1041,"column":1,"offset":36094},"end":{"line":1041,"column":109,"offset":36202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Line 39","position":{"start":{"line":1043,"column":1,"offset":36204},"end":{"line":1043,"column":8,"offset":36211},"indent":[]}}],"position":{"start":{"line":1043,"column":1,"offset":36204},"end":{"line":1043,"column":8,"offset":36211},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1044,"column":1,"offset":36212},"end":{"line":1046,"column":4,"offset":36239},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"is replaced by line 40","position":{"start":{"line":1048,"column":1,"offset":36241},"end":{"line":1048,"column":23,"offset":36263},"indent":[]}}],"position":{"start":{"line":1048,"column":1,"offset":36241},"end":{"line":1048,"column":23,"offset":36263},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1049,"column":1,"offset":36264},"end":{"line":1051,"column":4,"offset":36296},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The length is passed into the reverse","position":{"start":{"line":1053,"column":1,"offset":36298},"end":{"line":1053,"column":38,"offset":36335},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"string call so that reverse","position":{"start":{"line":1053,"column":39,"offset":36336},"end":{"line":1053,"column":66,"offset":36363},"indent":[]}}],"position":{"start":{"line":1053,"column":38,"offset":36335},"end":{"line":1053,"column":67,"offset":36364},"indent":[]}},{"type":"text","value":"string doesn't have to calculate it.  This optimization yielded another 14.5 nanoseconds.","position":{"start":{"line":1053,"column":67,"offset":36364},"end":{"line":1053,"column":156,"offset":36453},"indent":[]}}],"position":{"start":{"line":1053,"column":1,"offset":36298},"end":{"line":1053,"column":156,"offset":36453},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#compiler-optimizations","title":null,"children":[],"data":{"hProperties":{"aria-label":"compiler optimizations permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Compiler optimizations","position":{"start":{"line":1055,"column":4,"offset":36458},"end":{"line":1055,"column":26,"offset":36480},"indent":[]}}],"position":{"start":{"line":1055,"column":1,"offset":36455},"end":{"line":1055,"column":26,"offset":36480},"indent":[]},"data":{"id":"compiler-optimizations","htmlAttributes":{"id":"compiler-optimizations"},"hProperties":{"id":"compiler-optimizations"}}},{"type":"paragraph","children":[{"type":"text","value":"It's important not to forget that the compiler can optimize the code further.  You can pass a flag called -O3 to gcc and sometimes see an improvement.","position":{"start":{"line":1057,"column":1,"offset":36482},"end":{"line":1057,"column":151,"offset":36632},"indent":[]}}],"position":{"start":{"line":1057,"column":1,"offset":36482},"end":{"line":1057,"column":151,"offset":36632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The timing for the work in ","position":{"start":{"line":1059,"column":1,"offset":36634},"end":{"line":1059,"column":28,"offset":36661},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1059,"column":28,"offset":36661},"end":{"line":1059,"column":31,"offset":36664},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1059,"column":31,"offset":36664},"end":{"line":1059,"column":46,"offset":36679},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/3","position":{"start":{"line":1059,"column":47,"offset":36680},"end":{"line":1059,"column":55,"offset":36688},"indent":[]}}],"position":{"start":{"line":1059,"column":46,"offset":36679},"end":{"line":1059,"column":56,"offset":36689},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1059,"column":56,"offset":36689},"end":{"line":1059,"column":61,"offset":36694},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1059,"column":61,"offset":36694},"end":{"line":1059,"column":65,"offset":36698},"indent":[]}},{"type":"text","value":" was...","position":{"start":{"line":1059,"column":65,"offset":36698},"end":{"line":1059,"column":72,"offset":36705},"indent":[]}}],"position":{"start":{"line":1059,"column":1,"offset":36634},"end":{"line":1059,"column":72,"offset":36705},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">28</span>.8140ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">6</span>.5320ns\noverall time_spent: <span class=\"token number\">35</span>.3460ns</code></pre></div>","position":{"start":{"line":1060,"column":1,"offset":36706},"end":{"line":1069,"column":4,"offset":36952},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1071,"column":1,"offset":36954},"end":{"line":1071,"column":33,"offset":36986},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1071,"column":33,"offset":36986},"end":{"line":1071,"column":36,"offset":36989},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1071,"column":36,"offset":36989},"end":{"line":1071,"column":51,"offset":37004},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/4","position":{"start":{"line":1071,"column":52,"offset":37005},"end":{"line":1071,"column":60,"offset":37013},"indent":[]}}],"position":{"start":{"line":1071,"column":51,"offset":37004},"end":{"line":1071,"column":61,"offset":37014},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1071,"column":61,"offset":37014},"end":{"line":1071,"column":66,"offset":37019},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1071,"column":66,"offset":37019},"end":{"line":1071,"column":70,"offset":37023},"indent":[]}}],"position":{"start":{"line":1071,"column":1,"offset":36954},"end":{"line":1071,"column":70,"offset":37023},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">9</span>.7730ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">2</span>.5150ns\noverall time_spent: <span class=\"token number\">12</span>.2880ns</code></pre></div>","position":{"start":{"line":1072,"column":1,"offset":37024},"end":{"line":1081,"column":4,"offset":37273},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Running make yields a 23 nanosecond improvement!  The only difference is in the Makefile.","position":{"start":{"line":1083,"column":1,"offset":37275},"end":{"line":1083,"column":90,"offset":37364},"indent":[]}}],"position":{"start":{"line":1083,"column":1,"offset":37275},"end":{"line":1083,"column":90,"offset":37364},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> <span class=\"token builtin class-name\">.</span> <span class=\"token punctuation\">..</span>/3_timer/\n<span class=\"token function\">diff</span> ./Makefile <span class=\"token punctuation\">..</span>/3_timer/Makefile\n4c4\n<span class=\"token operator\">&lt;</span> \tgcc -O3 test_timer.c -o test_timer\n---\n<span class=\"token operator\">></span> \tgcc test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":1084,"column":1,"offset":37365},"end":{"line":1091,"column":4,"offset":37513},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The -O3 optimization (full optimization) was turned on in gcc.  It is good actually to compare time with optimizations turned on because sometimes the fastest code is slower once optimizations are turned on.","position":{"start":{"line":1093,"column":1,"offset":37515},"end":{"line":1093,"column":208,"offset":37722},"indent":[]}}],"position":{"start":{"line":1093,"column":1,"offset":37515},"end":{"line":1093,"column":208,"offset":37722},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#splitting-up-code-into-multiple-files","title":null,"children":[],"data":{"hProperties":{"aria-label":"splitting up code into multiple files permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Splitting up code into multiple files","position":{"start":{"line":1095,"column":3,"offset":37726},"end":{"line":1095,"column":40,"offset":37763},"indent":[]}}],"position":{"start":{"line":1095,"column":1,"offset":37724},"end":{"line":1095,"column":40,"offset":37763},"indent":[]},"data":{"id":"splitting-up-code-into-multiple-files","htmlAttributes":{"id":"splitting-up-code-into-multiple-files"},"hProperties":{"id":"splitting-up-code-into-multiple-files"}}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1097,"column":1,"offset":37765},"end":{"line":1097,"column":33,"offset":37797},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1097,"column":33,"offset":37797},"end":{"line":1097,"column":36,"offset":37800},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1097,"column":36,"offset":37800},"end":{"line":1097,"column":51,"offset":37815},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/5","position":{"start":{"line":1097,"column":52,"offset":37816},"end":{"line":1097,"column":60,"offset":37824},"indent":[]}}],"position":{"start":{"line":1097,"column":51,"offset":37815},"end":{"line":1097,"column":61,"offset":37825},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1097,"column":61,"offset":37825},"end":{"line":1097,"column":66,"offset":37830},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1097,"column":66,"offset":37830},"end":{"line":1097,"column":70,"offset":37834},"indent":[]}}],"position":{"start":{"line":1097,"column":1,"offset":37765},"end":{"line":1097,"column":70,"offset":37834},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you run diff -q . ../4_timer/, a brief summary of what changed will be displayed.","position":{"start":{"line":1099,"column":1,"offset":37836},"end":{"line":1099,"column":85,"offset":37920},"indent":[]}}],"position":{"start":{"line":1099,"column":1,"offset":37836},"end":{"line":1099,"column":85,"offset":37920},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> -q <span class=\"token builtin class-name\">.</span> <span class=\"token punctuation\">..</span>/4_timer/\nFiles ./Makefile and <span class=\"token punctuation\">..</span>/4_timer/Makefile differ\nOnly <span class=\"token keyword\">in</span> .: file2.c\nFiles ./test_timer.c and <span class=\"token punctuation\">..</span>/4_timer/test_timer.c differ</code></pre></div>","position":{"start":{"line":1100,"column":1,"offset":37921},"end":{"line":1105,"column":4,"offset":38079},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the test_timer.c, there were two functions besides the main function.  To illustrate how you can break your code up into multiple files, I moved those functions to file2.c","position":{"start":{"line":1107,"column":1,"offset":38081},"end":{"line":1107,"column":175,"offset":38255},"indent":[]}}],"position":{"start":{"line":1107,"column":1,"offset":38081},"end":{"line":1107,"column":175,"offset":38255},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"file2.c:","position":{"start":{"line":1109,"column":1,"offset":38257},"end":{"line":1109,"column":9,"offset":38265},"indent":[]}}],"position":{"start":{"line":1109,"column":1,"offset":38257},"end":{"line":1109,"column":9,"offset":38265},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1110,"column":1,"offset":38266},"end":{"line":1127,"column":4,"offset":38541},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The next change is to include file2.c in test_timer.c","position":{"start":{"line":1129,"column":1,"offset":38543},"end":{"line":1129,"column":54,"offset":38596},"indent":[]}}],"position":{"start":{"line":1129,"column":1,"offset":38543},"end":{"line":1129,"column":54,"offset":38596},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":1131,"column":1,"offset":38598},"end":{"line":1139,"column":4,"offset":38689},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The compiler inserts the contents of file2.c into test_timer.c.  At this point, if there was another source file that wanted to use these functions, all they would have to do is #include \"file2.c\".  For example:","position":{"start":{"line":1141,"column":1,"offset":38691},"end":{"line":1141,"column":212,"offset":38902},"indent":[]}}],"position":{"start":{"line":1141,"column":1,"offset":38691},"end":{"line":1141,"column":212,"offset":38902},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_reverse.c","position":{"start":{"line":1143,"column":1,"offset":38904},"end":{"line":1143,"column":15,"offset":38918},"indent":[]}}],"position":{"start":{"line":1143,"column":1,"offset":38904},"end":{"line":1143,"column":15,"offset":38918},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string duplicate</span>\n    <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1144,"column":1,"offset":38919},"end":{"line":1159,"column":4,"offset":39201},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc test_reverse.c -o test_reverse\nIn <span class=\"token function\">file</span> included from test_reverse.c:1:\n./file2.c:1:31: error: unknown <span class=\"token builtin class-name\">type</span> name <span class=\"token string\">'size_t'</span>\nvoid reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                              ^\n./file2.c:13:18: error: variable has incomplete <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n                 ^\n./file2.c:13:10: note: forward declaration of <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n         ^\n./file2.c:14:3: warning: implicit declaration of <span class=\"token keyword\">function</span> <span class=\"token string\">'gettimeofday'</span> is invalid <span class=\"token keyword\">in</span> C99 <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n  gettimeofday<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ^\n./file2.c:14:21: error: use of undeclared identifier <span class=\"token string\">'NULL'</span>\n  gettimeofday<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ^\ntest_reverse.c:8:15: warning: implicitly declaring library <span class=\"token keyword\">function</span> <span class=\"token string\">'strdup'</span> with <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'char *(const char *)'</span> <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n    char *s <span class=\"token operator\">=</span> strdup<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // string duplicate\n              ^\ntest_reverse.c:8:15: note: include the header <span class=\"token operator\">&lt;</span>string.h<span class=\"token operator\">></span> or explicitly provide a declaration <span class=\"token keyword\">for</span> <span class=\"token string\">'strdup'</span>\n<span class=\"token number\">2</span> warnings and <span class=\"token number\">3</span> errors generated.</code></pre></div>","position":{"start":{"line":1161,"column":1,"offset":39203},"end":{"line":1184,"column":4,"offset":40240},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"As you can see, there are lots of errors.  It's generally best to work through errors starting from the first one, and working down as the first error may cause other errors to occur.","position":{"start":{"line":1186,"column":1,"offset":40242},"end":{"line":1186,"column":184,"offset":40425},"indent":[]}}],"position":{"start":{"line":1186,"column":1,"offset":40242},"end":{"line":1186,"column":184,"offset":40425},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first error is","position":{"start":{"line":1188,"column":1,"offset":40427},"end":{"line":1188,"column":19,"offset":40445},"indent":[]}}],"position":{"start":{"line":1188,"column":1,"offset":40427},"end":{"line":1188,"column":19,"offset":40445},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In file included from test_reverse.c:1:\n./file2.c:1:31: error: unknown type name &#39;size_t&#39;\nvoid reverse_string( char *s, size_t len ) {</code></pre></div>","position":{"start":{"line":1189,"column":1,"offset":40446},"end":{"line":1193,"column":4,"offset":40588},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The error indicates that the type size","position":{"start":{"line":1195,"column":1,"offset":40590},"end":{"line":1195,"column":39,"offset":40628},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t is not known.  Use your favorite search engine and query \"error: unknown type name 'size","position":{"start":{"line":1195,"column":40,"offset":40629},"end":{"line":1195,"column":130,"offset":40719},"indent":[]}}],"position":{"start":{"line":1195,"column":39,"offset":40628},"end":{"line":1195,"column":131,"offset":40720},"indent":[]}},{"type":"text","value":"t'\".  You should be able to find that it is defined in stdio.h, so the solution is to include stdio.h.  Notice that we do include stdio.h in test_reverse.c, but it is after we include file2.c.  Ideally, file2.c would be complete, so let's modify file2.c to include stdio.h and rerun gcc.  You will have to add the following line to the beginning of file2.c.","position":{"start":{"line":1195,"column":131,"offset":40720},"end":{"line":1195,"column":488,"offset":41077},"indent":[]}}],"position":{"start":{"line":1195,"column":1,"offset":40590},"end":{"line":1195,"column":488,"offset":41077},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></code></pre></div>","position":{"start":{"line":1197,"column":1,"offset":41079},"end":{"line":1199,"column":4,"offset":41106},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and then run gcc again.","position":{"start":{"line":1201,"column":1,"offset":41108},"end":{"line":1201,"column":24,"offset":41131},"indent":[]}}],"position":{"start":{"line":1201,"column":1,"offset":41108},"end":{"line":1201,"column":24,"offset":41131},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc test_reverse.c -o test_reverse\nIn <span class=\"token function\">file</span> included from test_reverse.c:1:\n./file2.c:15:18: error: variable has incomplete <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n                 ^\n./file2.c:15:10: note: forward declaration of <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n         ^\n./file2.c:16:3: warning: implicit declaration of <span class=\"token keyword\">function</span> <span class=\"token string\">'gettimeofday'</span> is invalid <span class=\"token keyword\">in</span> C99 <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n  gettimeofday<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ^\ntest_reverse.c:8:15: warning: implicitly declaring library <span class=\"token keyword\">function</span> <span class=\"token string\">'strdup'</span> with <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'char *(const char *)'</span> <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n    char *s <span class=\"token operator\">=</span> strdup<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // string duplicate\n              ^\ntest_reverse.c:8:15: note: include the header <span class=\"token operator\">&lt;</span>string.h<span class=\"token operator\">></span> or explicitly provide a declaration <span class=\"token keyword\">for</span> <span class=\"token string\">'strdup'</span>\ntest_reverse.c:9:21: error: too few arguments to <span class=\"token keyword\">function</span> call, expected <span class=\"token number\">2</span>, have <span class=\"token number\">1</span>\n    reverse_string<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ~~~~~~~~~~~~~~  ^\n./file2.c:3:1: note: <span class=\"token string\">'reverse_string'</span> declared here\nvoid reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n^\n<span class=\"token number\">2</span> warnings and <span class=\"token number\">2</span> errors generated.</code></pre></div>","position":{"start":{"line":1202,"column":1,"offset":41132},"end":{"line":1225,"column":4,"offset":42160},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The following two errors are missing now...","position":{"start":{"line":1227,"column":1,"offset":42162},"end":{"line":1227,"column":44,"offset":42205},"indent":[]}}],"position":{"start":{"line":1227,"column":1,"offset":42162},"end":{"line":1227,"column":44,"offset":42205},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">In file included from test_reverse.c:1:\n./file2.c:1:31: error: unknown type name &#39;size_t&#39;\nvoid reverse_string( char *s, size_t len ) {\n\n./file2.c:14:21: error: use of undeclared identifier &#39;NULL&#39;\n  gettimeofday(&amp;tv, NULL);</code></pre></div>","position":{"start":{"line":1228,"column":1,"offset":42206},"end":{"line":1235,"column":4,"offset":42436},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"NULL was also defined in stdio.h, so by fixing the first error, we fixed another error.  This is a big reason that I fix errors from the beginning to the end. Often the fixes, fix other problems.","position":{"start":{"line":1237,"column":1,"offset":42438},"end":{"line":1237,"column":196,"offset":42633},"indent":[]}}],"position":{"start":{"line":1237,"column":1,"offset":42438},"end":{"line":1237,"column":196,"offset":42633},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next error is","position":{"start":{"line":1239,"column":1,"offset":42635},"end":{"line":1239,"column":18,"offset":42652},"indent":[]}}],"position":{"start":{"line":1239,"column":1,"offset":42635},"end":{"line":1239,"column":18,"offset":42652},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">In file included from test_reverse<span class=\"token punctuation\">.</span>c<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>file2<span class=\"token punctuation\">.</span>c<span class=\"token operator\">:</span><span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token operator\">:</span> error<span class=\"token operator\">:</span> variable has incomplete type <span class=\"token string\">'struct timeval'</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1240,"column":1,"offset":42653},"end":{"line":1244,"column":4,"offset":42792},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, use your favorite search engine and query \"error: variable has incomplete type 'struct timeval'\".  I found the answer was to #include <sys/time.h> on stack overflow.  Again, let's add this to file2.c right after the #include <stdio.h> call.","position":{"start":{"line":1246,"column":1,"offset":42794},"end":{"line":1246,"column":248,"offset":43041},"indent":[]}}],"position":{"start":{"line":1246,"column":1,"offset":42794},"end":{"line":1246,"column":248,"offset":43041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Add this right after #include <stdio.h> to file2.c","position":{"start":{"line":1248,"column":1,"offset":43043},"end":{"line":1248,"column":51,"offset":43093},"indent":[]}}],"position":{"start":{"line":1248,"column":1,"offset":43043},"end":{"line":1248,"column":51,"offset":43093},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></code></pre></div>","position":{"start":{"line":1249,"column":1,"offset":43094},"end":{"line":1251,"column":4,"offset":43124},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, run gcc to check for more errors","position":{"start":{"line":1253,"column":1,"offset":43126},"end":{"line":1253,"column":40,"offset":43165},"indent":[]}}],"position":{"start":{"line":1253,"column":1,"offset":43126},"end":{"line":1253,"column":40,"offset":43165},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc test_reverse.c -o test_reverse\ntest_reverse.c:8:15: warning: implicitly declaring library <span class=\"token keyword\">function</span> <span class=\"token string\">'strdup'</span> with <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'char *(const char *)'</span> <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n    char *s <span class=\"token operator\">=</span> strdup<span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> // string duplicate\n              ^\ntest_reverse.c:8:15: note: include the header <span class=\"token operator\">&lt;</span>string.h<span class=\"token operator\">></span> or explicitly provide a declaration <span class=\"token keyword\">for</span> <span class=\"token string\">'strdup'</span>\ntest_reverse.c:9:21: error: too few arguments to <span class=\"token keyword\">function</span> call, expected <span class=\"token number\">2</span>, have <span class=\"token number\">1</span>\n    reverse_string<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ~~~~~~~~~~~~~~  ^\n./file2.c:4:1: note: <span class=\"token string\">'reverse_string'</span> declared here\nvoid reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n^\n<span class=\"token number\">1</span> warning and <span class=\"token number\">1</span> error generated.</code></pre></div>","position":{"start":{"line":1254,"column":1,"offset":43166},"end":{"line":1267,"column":4,"offset":43791},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, by fixing the one error, we fixed more.  Let's continue with the next warning.","position":{"start":{"line":1269,"column":1,"offset":43793},"end":{"line":1269,"column":86,"offset":43878},"indent":[]}}],"position":{"start":{"line":1269,"column":1,"offset":43793},"end":{"line":1269,"column":86,"offset":43878},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test_reverse.c:8:15: warning: implicitly declaring library function &#39;strdup&#39; with type &#39;char *(const char *)&#39; [-Wimplicit-function-declaration]\n    char *s = strdup(argv[i]); // string duplicate\n              ^\ntest_reverse.c:8:15: note: include the header &lt;string.h&gt; or explicitly provide a declaration for &#39;strdup&#39;</code></pre></div>","position":{"start":{"line":1270,"column":1,"offset":43879},"end":{"line":1275,"column":4,"offset":44203},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice that this time, gcc actually gives us a hint (include the header <string.h>).  Let's add this to test_reverse.c","position":{"start":{"line":1277,"column":1,"offset":44205},"end":{"line":1277,"column":119,"offset":44323},"indent":[]}}],"position":{"start":{"line":1277,"column":1,"offset":44205},"end":{"line":1277,"column":119,"offset":44323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_reverse.c:","position":{"start":{"line":1279,"column":1,"offset":44325},"end":{"line":1279,"column":16,"offset":44340},"indent":[]}}],"position":{"start":{"line":1279,"column":1,"offset":44325},"end":{"line":1279,"column":16,"offset":44340},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string duplicate</span>\n    <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1280,"column":1,"offset":44341},"end":{"line":1296,"column":4,"offset":44643},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We don't have to recompile every time.  We can go ahead and look at the next error and try and fix more than one.","position":{"start":{"line":1298,"column":1,"offset":44645},"end":{"line":1298,"column":114,"offset":44758},"indent":[]}}],"position":{"start":{"line":1298,"column":1,"offset":44645},"end":{"line":1298,"column":114,"offset":44758},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test_reverse.c:9:21: error: too few arguments to function call, expected 2, have 1\n    reverse_string(s);\n    ~~~~~~~~~~~~~~  ^\n./file2.c:4:1: note: &#39;reverse_string&#39; declared here\nvoid reverse_string( char *s, size_t len ) {\n^</code></pre></div>","position":{"start":{"line":1299,"column":1,"offset":44759},"end":{"line":1306,"column":4,"offset":44993},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, gcc is helping us by pointing out that reverse_string requires two arguments and what they should be.  I forgot to pass the length of the string as the second argument.  We can do that with strlen.","position":{"start":{"line":1308,"column":1,"offset":44995},"end":{"line":1308,"column":205,"offset":45199},"indent":[]}}],"position":{"start":{"line":1308,"column":1,"offset":44995},"end":{"line":1308,"column":205,"offset":45199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_reverse.c:","position":{"start":{"line":1310,"column":1,"offset":45201},"end":{"line":1310,"column":16,"offset":45216},"indent":[]}}],"position":{"start":{"line":1310,"column":1,"offset":45201},"end":{"line":1310,"column":16,"offset":45216},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">strdup</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string duplicate</span>\n    <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1311,"column":1,"offset":45217},"end":{"line":1327,"column":4,"offset":45530},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now if you run gcc:","position":{"start":{"line":1329,"column":1,"offset":45532},"end":{"line":1329,"column":20,"offset":45551},"indent":[]}}],"position":{"start":{"line":1329,"column":1,"offset":45532},"end":{"line":1329,"column":20,"offset":45551},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ gcc test_reverse.c -o test_reverse\n$</code></pre></div>","position":{"start":{"line":1330,"column":1,"offset":45552},"end":{"line":1333,"column":4,"offset":45602},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"All of the errors and warnings are gone.  ","position":{"start":{"line":1335,"column":1,"offset":45604},"end":{"line":1335,"column":43,"offset":45646},"indent":[]}}],"position":{"start":{"line":1335,"column":1,"offset":45604},"end":{"line":1335,"column":43,"offset":45646},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We can run test_reverse like...","position":{"start":{"line":1337,"column":1,"offset":45648},"end":{"line":1337,"column":32,"offset":45679},"indent":[]}}],"position":{"start":{"line":1337,"column":1,"offset":45648},"end":{"line":1337,"column":32,"offset":45679},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./test_reverse This is a <span class=\"token builtin class-name\">test</span>\nThis <span class=\"token operator\">=</span><span class=\"token operator\">></span> sihT\nis <span class=\"token operator\">=</span><span class=\"token operator\">></span> si\na <span class=\"token operator\">=</span><span class=\"token operator\">></span> a\n<span class=\"token builtin class-name\">test</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> tset</code></pre></div>","position":{"start":{"line":1338,"column":1,"offset":45680},"end":{"line":1344,"column":4,"offset":45765},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you were following along and changing file2.c, you can run make again to see if the changes work in the original test_timer.","position":{"start":{"line":1346,"column":1,"offset":45767},"end":{"line":1346,"column":128,"offset":45894},"indent":[]}}],"position":{"start":{"line":1346,"column":1,"offset":45767},"end":{"line":1346,"column":128,"offset":45894},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">11</span>.9100ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">3</span>.1390ns\noverall time_spent: <span class=\"token number\">15</span>.0490ns</code></pre></div>","position":{"start":{"line":1348,"column":1,"offset":45896},"end":{"line":1357,"column":4,"offset":46146},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The changes work.","position":{"start":{"line":1359,"column":1,"offset":46148},"end":{"line":1359,"column":18,"offset":46165},"indent":[]}}],"position":{"start":{"line":1359,"column":1,"offset":46148},"end":{"line":1359,"column":18,"offset":46165},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Before continuing, you should note that there was one important change in Makefile","position":{"start":{"line":1361,"column":1,"offset":46167},"end":{"line":1361,"column":83,"offset":46249},"indent":[]}}],"position":{"start":{"line":1361,"column":1,"offset":46167},"end":{"line":1361,"column":83,"offset":46249},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test_timer: test_timer.c</code></pre></div>","position":{"start":{"line":1363,"column":1,"offset":46251},"end":{"line":1365,"column":4,"offset":46283},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"changed to","position":{"start":{"line":1367,"column":1,"offset":46285},"end":{"line":1367,"column":11,"offset":46295},"indent":[]}}],"position":{"start":{"line":1367,"column":1,"offset":46285},"end":{"line":1367,"column":11,"offset":46295},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">test_timer: test_timer.c file2.c</code></pre></div>","position":{"start":{"line":1368,"column":1,"offset":46296},"end":{"line":1370,"column":4,"offset":46336},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This change is helpful because it says that the test","position":{"start":{"line":1372,"column":1,"offset":46338},"end":{"line":1372,"column":53,"offset":46390},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer block should run if any of the files have changed.  Now that test","position":{"start":{"line":1372,"column":54,"offset":46391},"end":{"line":1372,"column":125,"offset":46462},"indent":[]}}],"position":{"start":{"line":1372,"column":53,"offset":46390},"end":{"line":1372,"column":126,"offset":46463},"indent":[]}},{"type":"text","value":"timer is made up of two files, we should list both files.  Internally, make simply looks at the time stamp of test","position":{"start":{"line":1372,"column":126,"offset":46463},"end":{"line":1372,"column":240,"offset":46577},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer and test","position":{"start":{"line":1372,"column":241,"offset":46578},"end":{"line":1372,"column":255,"offset":46592},"indent":[]}}],"position":{"start":{"line":1372,"column":240,"offset":46577},"end":{"line":1372,"column":256,"offset":46593},"indent":[]}},{"type":"text","value":"timer.c and file2.c.  If test","position":{"start":{"line":1372,"column":256,"offset":46593},"end":{"line":1372,"column":285,"offset":46622},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c or file2.c has a timestamp that is greater than test","position":{"start":{"line":1372,"column":286,"offset":46623},"end":{"line":1372,"column":346,"offset":46683},"indent":[]}}],"position":{"start":{"line":1372,"column":285,"offset":46622},"end":{"line":1372,"column":347,"offset":46684},"indent":[]}},{"type":"text","value":"timer (or test_timer doesn't exist), then the block will be run again.","position":{"start":{"line":1372,"column":347,"offset":46684},"end":{"line":1372,"column":417,"offset":46754},"indent":[]}}],"position":{"start":{"line":1372,"column":1,"offset":46338},"end":{"line":1372,"column":417,"offset":46754},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#splitting-up-your-code-into-multiple-files-part-2","title":null,"children":[],"data":{"hProperties":{"aria-label":"splitting up your code into multiple files part 2 permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Splitting up your code into multiple files part 2","position":{"start":{"line":1374,"column":4,"offset":46759},"end":{"line":1374,"column":53,"offset":46808},"indent":[]}}],"position":{"start":{"line":1374,"column":1,"offset":46756},"end":{"line":1374,"column":53,"offset":46808},"indent":[]},"data":{"id":"splitting-up-your-code-into-multiple-files-part-2","htmlAttributes":{"id":"splitting-up-your-code-into-multiple-files-part-2"},"hProperties":{"id":"splitting-up-your-code-into-multiple-files-part-2"}}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1376,"column":1,"offset":46810},"end":{"line":1376,"column":33,"offset":46842},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1376,"column":33,"offset":46842},"end":{"line":1376,"column":36,"offset":46845},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1376,"column":36,"offset":46845},"end":{"line":1376,"column":51,"offset":46860},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/6","position":{"start":{"line":1376,"column":52,"offset":46861},"end":{"line":1376,"column":60,"offset":46869},"indent":[]}}],"position":{"start":{"line":1376,"column":51,"offset":46860},"end":{"line":1376,"column":61,"offset":46870},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1376,"column":61,"offset":46870},"end":{"line":1376,"column":66,"offset":46875},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1376,"column":66,"offset":46875},"end":{"line":1376,"column":70,"offset":46879},"indent":[]}}],"position":{"start":{"line":1376,"column":1,"offset":46810},"end":{"line":1376,"column":70,"offset":46879},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is generally a good idea to make each file or group of files self-contained.  In the last section, we didn't notice errors when running make, but we did when trying to build test","position":{"start":{"line":1378,"column":1,"offset":46881},"end":{"line":1378,"column":182,"offset":47062},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"reverse.  The errors didn't occur because before including file2.c we had already included stdio.h and sys/time.h.  In general, you want to include your custom code first, as this will present the error earlier.  We should make the following change to test","position":{"start":{"line":1378,"column":183,"offset":47063},"end":{"line":1378,"column":439,"offset":47319},"indent":[]}}],"position":{"start":{"line":1378,"column":182,"offset":47062},"end":{"line":1378,"column":440,"offset":47320},"indent":[]}},{"type":"text","value":"timer.c","position":{"start":{"line":1378,"column":440,"offset":47320},"end":{"line":1378,"column":447,"offset":47327},"indent":[]}}],"position":{"start":{"line":1378,"column":1,"offset":46881},"end":{"line":1378,"column":447,"offset":47327},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span></code></pre></div>","position":{"start":{"line":1380,"column":1,"offset":47329},"end":{"line":1388,"column":4,"offset":47456},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"change to","position":{"start":{"line":1390,"column":1,"offset":47458},"end":{"line":1390,"column":10,"offset":47467},"indent":[]}}],"position":{"start":{"line":1390,"column":1,"offset":47458},"end":{"line":1390,"column":10,"offset":47467},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></code></pre></div>","position":{"start":{"line":1391,"column":1,"offset":47468},"end":{"line":1399,"column":4,"offset":47595},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If you go back and change test","position":{"start":{"line":1401,"column":1,"offset":47597},"end":{"line":1401,"column":31,"offset":47627},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c in ","position":{"start":{"line":1401,"column":32,"offset":47628},"end":{"line":1401,"column":43,"offset":47639},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1401,"column":43,"offset":47639},"end":{"line":1401,"column":46,"offset":47642},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1401,"column":46,"offset":47642},"end":{"line":1401,"column":61,"offset":47657},"indent":[]}}],"position":{"start":{"line":1401,"column":31,"offset":47627},"end":{"line":1401,"column":62,"offset":47658},"indent":[]}},{"type":"text","value":"timing/5","position":{"start":{"line":1401,"column":62,"offset":47658},"end":{"line":1401,"column":70,"offset":47666},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer","position":{"start":{"line":1401,"column":71,"offset":47667},"end":{"line":1401,"column":76,"offset":47672},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1401,"column":76,"offset":47672},"end":{"line":1401,"column":80,"offset":47676},"indent":[]}},{"type":"text","value":" and then run make, you will get some of the same errors that we had when building test","position":{"start":{"line":1401,"column":80,"offset":47676},"end":{"line":1401,"column":167,"offset":47763},"indent":[]}}],"position":{"start":{"line":1401,"column":70,"offset":47666},"end":{"line":1401,"column":168,"offset":47764},"indent":[]}},{"type":"text","value":"reverse.","position":{"start":{"line":1401,"column":168,"offset":47764},"end":{"line":1401,"column":176,"offset":47772},"indent":[]}}],"position":{"start":{"line":1401,"column":1,"offset":47597},"end":{"line":1401,"column":176,"offset":47772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"in illustrations/2","position":{"start":{"line":1403,"column":1,"offset":47774},"end":{"line":1403,"column":19,"offset":47792},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/5","position":{"start":{"line":1403,"column":20,"offset":47793},"end":{"line":1403,"column":28,"offset":47801},"indent":[]}}],"position":{"start":{"line":1403,"column":19,"offset":47792},"end":{"line":1403,"column":29,"offset":47802},"indent":[]}},{"type":"text","value":"timer after making above change","position":{"start":{"line":1403,"column":29,"offset":47802},"end":{"line":1403,"column":60,"offset":47833},"indent":[]}}],"position":{"start":{"line":1403,"column":1,"offset":47774},"end":{"line":1403,"column":60,"offset":47833},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 test_timer.c -o test_timer\nIn <span class=\"token function\">file</span> included from test_timer.c:1:\n./file2.c:1:31: error: unknown <span class=\"token builtin class-name\">type</span> name <span class=\"token string\">'size_t'</span>\nvoid reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                              ^\n./file2.c:13:18: error: variable has incomplete <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n                 ^\n./file2.c:13:10: note: forward declaration of <span class=\"token string\">'struct timeval'</span>\n  struct timeval tv<span class=\"token punctuation\">;</span>\n         ^\n./file2.c:14:3: warning: implicit declaration of <span class=\"token keyword\">function</span> <span class=\"token string\">'gettimeofday'</span> is invalid <span class=\"token keyword\">in</span> C99 <span class=\"token punctuation\">[</span>-Wimplicit-function-declaration<span class=\"token punctuation\">]</span>\n  gettimeofday<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ^\n./file2.c:14:21: error: use of undeclared identifier <span class=\"token string\">'NULL'</span>\n  gettimeofday<span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv, NULL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    ^\nOne warning and three errors generated.\nmake: *** <span class=\"token punctuation\">[</span>test_timer<span class=\"token punctuation\">]</span> Error <span class=\"token number\">1</span></code></pre></div>","position":{"start":{"line":1404,"column":1,"offset":47834},"end":{"line":1425,"column":4,"offset":48593},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"If we make the change in ","position":{"start":{"line":1427,"column":1,"offset":48595},"end":{"line":1427,"column":26,"offset":48620},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1427,"column":26,"offset":48620},"end":{"line":1427,"column":29,"offset":48623},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1427,"column":29,"offset":48623},"end":{"line":1427,"column":44,"offset":48638},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/6","position":{"start":{"line":1427,"column":45,"offset":48639},"end":{"line":1427,"column":53,"offset":48647},"indent":[]}}],"position":{"start":{"line":1427,"column":44,"offset":48638},"end":{"line":1427,"column":54,"offset":48648},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1427,"column":54,"offset":48648},"end":{"line":1427,"column":59,"offset":48653},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1427,"column":59,"offset":48653},"end":{"line":1427,"column":63,"offset":48657},"indent":[]}},{"type":"text","value":" and run make","position":{"start":{"line":1427,"column":63,"offset":48657},"end":{"line":1427,"column":76,"offset":48670},"indent":[]}}],"position":{"start":{"line":1427,"column":1,"offset":48595},"end":{"line":1427,"column":76,"offset":48670},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">7</span>.6000ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">1</span>.7670ns\noverall time_spent: <span class=\"token number\">9</span>.3670ns</code></pre></div>","position":{"start":{"line":1428,"column":1,"offset":48671},"end":{"line":1437,"column":4,"offset":48919},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this section, I also removed the following two lines from test","position":{"start":{"line":1439,"column":1,"offset":48921},"end":{"line":1439,"column":66,"offset":48986},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c as test","position":{"start":{"line":1439,"column":67,"offset":48987},"end":{"line":1439,"column":82,"offset":49002},"indent":[]}}],"position":{"start":{"line":1439,"column":66,"offset":48986},"end":{"line":1439,"column":83,"offset":49003},"indent":[]}},{"type":"text","value":"timer.c doesn't directly call any time-related functions.","position":{"start":{"line":1439,"column":83,"offset":49003},"end":{"line":1439,"column":140,"offset":49060},"indent":[]}}],"position":{"start":{"line":1439,"column":1,"offset":48921},"end":{"line":1439,"column":140,"offset":49060},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></code></pre></div>","position":{"start":{"line":1441,"column":1,"offset":49062},"end":{"line":1444,"column":4,"offset":49110},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"It all works because we have fixed file2.c to have the right include statements.  Particularly if you are developing a new package, it is a good idea to include your packages before outside or system packages.","position":{"start":{"line":1446,"column":1,"offset":49112},"end":{"line":1446,"column":210,"offset":49321},"indent":[]}}],"position":{"start":{"line":1446,"column":1,"offset":49112},"end":{"line":1446,"column":210,"offset":49321},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#separating-the-implementation-from-the-interface","title":null,"children":[],"data":{"hProperties":{"aria-label":"separating the implementation from the interface permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Separating the implementation from the interface","position":{"start":{"line":1448,"column":4,"offset":49326},"end":{"line":1448,"column":52,"offset":49374},"indent":[]}}],"position":{"start":{"line":1448,"column":1,"offset":49323},"end":{"line":1448,"column":52,"offset":49374},"indent":[]},"data":{"id":"separating-the-implementation-from-the-interface","htmlAttributes":{"id":"separating-the-implementation-from-the-interface"},"hProperties":{"id":"separating-the-implementation-from-the-interface"}}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1450,"column":1,"offset":49376},"end":{"line":1450,"column":33,"offset":49408},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1450,"column":33,"offset":49408},"end":{"line":1450,"column":36,"offset":49411},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1450,"column":36,"offset":49411},"end":{"line":1450,"column":51,"offset":49426},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/7","position":{"start":{"line":1450,"column":52,"offset":49427},"end":{"line":1450,"column":60,"offset":49435},"indent":[]}}],"position":{"start":{"line":1450,"column":51,"offset":49426},"end":{"line":1450,"column":61,"offset":49436},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1450,"column":61,"offset":49436},"end":{"line":1450,"column":66,"offset":49441},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1450,"column":66,"offset":49441},"end":{"line":1450,"column":70,"offset":49445},"indent":[]}}],"position":{"start":{"line":1450,"column":1,"offset":49376},"end":{"line":1450,"column":70,"offset":49445},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The key to writing large software projects that work is to define objects and make them highly reusable clearly.  When defining objects, it is best to split the object into an interface and an implementation.  Ideally, the interface will only describe what the object does and not how it works.  ","position":{"start":{"line":1452,"column":1,"offset":49447},"end":{"line":1452,"column":297,"offset":49743},"indent":[]}}],"position":{"start":{"line":1452,"column":1,"offset":49447},"end":{"line":1452,"column":297,"offset":49743},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is much like an automobile and a transmission.  An automobile might require a transmission with certain specifications.  That automobile doesn't care how the transmission is made.  An interface is like the specifications to a transmission.  The implementation would include how the transmission works.  C allows you to declare that a thing exists before it being defined.  Typically, this is done in header files (files that end in a .h extension), but it can be done anywhere.  In this section, we will show how to declare that the functions in file2.c without including them.","position":{"start":{"line":1454,"column":1,"offset":49745},"end":{"line":1454,"column":583,"offset":50327},"indent":[]}}],"position":{"start":{"line":1454,"column":1,"offset":49745},"end":{"line":1454,"column":583,"offset":50327},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In test_timer.c","position":{"start":{"line":1456,"column":1,"offset":50329},"end":{"line":1456,"column":16,"offset":50344},"indent":[]}}],"position":{"start":{"line":1456,"column":1,"offset":50329},"end":{"line":1456,"column":16,"offset":50344},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.c\"</span></span></code></pre></div>","position":{"start":{"line":1457,"column":1,"offset":50345},"end":{"line":1459,"column":4,"offset":50372},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"changes to","position":{"start":{"line":1461,"column":1,"offset":50374},"end":{"line":1461,"column":11,"offset":50384},"indent":[]}}],"position":{"start":{"line":1461,"column":1,"offset":50374},"end":{"line":1461,"column":11,"offset":50384},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1462,"column":1,"offset":50385},"end":{"line":1465,"column":4,"offset":50454},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Declaring the functions this way, lets the compiler know that the functions do exist.  The syntax is the same as writing the function, except you replace the {} with a semicolon.","position":{"start":{"line":1467,"column":1,"offset":50456},"end":{"line":1467,"column":179,"offset":50634},"indent":[]}}],"position":{"start":{"line":1467,"column":1,"offset":50456},"end":{"line":1467,"column":179,"offset":50634},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you run make...","position":{"start":{"line":1469,"column":1,"offset":50636},"end":{"line":1469,"column":19,"offset":50654},"indent":[]}}],"position":{"start":{"line":1469,"column":1,"offset":50636},"end":{"line":1469,"column":19,"offset":50654},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 test_timer.c -o test_timer\nUndefined symbols <span class=\"token keyword\">for</span> architecture x86_64:\n  <span class=\"token string\">\"_get_time\"</span>, referenced from:\n      _main <span class=\"token keyword\">in</span> test_timer-276d5b.o\n  <span class=\"token string\">\"_reverse_string\"</span>, referenced from:\n      _main <span class=\"token keyword\">in</span> test_timer-276d5b.o\nld: symbol<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> not found <span class=\"token keyword\">for</span> architecture x86_64</code></pre></div>","position":{"start":{"line":1470,"column":1,"offset":50655},"end":{"line":1479,"column":4,"offset":50939},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This happens because we have defined the functions, but they ultimately don't make it into the binary.  To fix this, change the following line in Makefile.","position":{"start":{"line":1481,"column":1,"offset":50941},"end":{"line":1481,"column":156,"offset":51096},"indent":[]}}],"position":{"start":{"line":1481,"column":1,"offset":50941},"end":{"line":1481,"column":156,"offset":51096},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">gcc -O3 test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":1483,"column":1,"offset":51098},"end":{"line":1485,"column":4,"offset":51148},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to (add file2.c to the gcc line)","position":{"start":{"line":1487,"column":1,"offset":51150},"end":{"line":1487,"column":33,"offset":51182},"indent":[]}}],"position":{"start":{"line":1487,"column":1,"offset":51150},"end":{"line":1487,"column":33,"offset":51182},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">gcc -O3 file2.c test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":1488,"column":1,"offset":51183},"end":{"line":1490,"column":4,"offset":51241},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Save and run make again","position":{"start":{"line":1492,"column":1,"offset":51243},"end":{"line":1492,"column":24,"offset":51266},"indent":[]}}],"position":{"start":{"line":1492,"column":1,"offset":51243},"end":{"line":1492,"column":24,"offset":51266},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 file2.c test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">8</span>.1540ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">2</span>.4490ns\noverall time_spent: <span class=\"token number\">10</span>.6030ns</code></pre></div>","position":{"start":{"line":1493,"column":1,"offset":51267},"end":{"line":1502,"column":4,"offset":51524},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Everything works as expected.","position":{"start":{"line":1504,"column":1,"offset":51526},"end":{"line":1504,"column":30,"offset":51555},"indent":[]}}],"position":{"start":{"line":1504,"column":1,"offset":51526},"end":{"line":1504,"column":30,"offset":51555},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#separating-the-implementation-from-the-interface-part-2","title":null,"children":[],"data":{"hProperties":{"aria-label":"separating the implementation from the interface part 2 permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Separating the implementation from the interface (part 2)","position":{"start":{"line":1506,"column":4,"offset":51560},"end":{"line":1506,"column":61,"offset":51617},"indent":[]}}],"position":{"start":{"line":1506,"column":1,"offset":51557},"end":{"line":1506,"column":61,"offset":51617},"indent":[]},"data":{"id":"separating-the-implementation-from-the-interface-part-2","htmlAttributes":{"id":"separating-the-implementation-from-the-interface-part-2"},"hProperties":{"id":"separating-the-implementation-from-the-interface-part-2"}}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1508,"column":1,"offset":51619},"end":{"line":1508,"column":33,"offset":51651},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1508,"column":33,"offset":51651},"end":{"line":1508,"column":36,"offset":51654},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1508,"column":36,"offset":51654},"end":{"line":1508,"column":51,"offset":51669},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/8","position":{"start":{"line":1508,"column":52,"offset":51670},"end":{"line":1508,"column":60,"offset":51678},"indent":[]}}],"position":{"start":{"line":1508,"column":51,"offset":51669},"end":{"line":1508,"column":61,"offset":51679},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1508,"column":61,"offset":51679},"end":{"line":1508,"column":66,"offset":51684},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1508,"column":66,"offset":51684},"end":{"line":1508,"column":70,"offset":51688},"indent":[]}}],"position":{"start":{"line":1508,"column":1,"offset":51619},"end":{"line":1508,"column":70,"offset":51688},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ideally, file2.c should have a corresponding file2.h that describes what exists in file2.c.  We can put the definition of get","position":{"start":{"line":1510,"column":1,"offset":51690},"end":{"line":1510,"column":126,"offset":51815},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"time and reverse","position":{"start":{"line":1510,"column":127,"offset":51816},"end":{"line":1510,"column":143,"offset":51832},"indent":[]}}],"position":{"start":{"line":1510,"column":126,"offset":51815},"end":{"line":1510,"column":144,"offset":51833},"indent":[]}},{"type":"text","value":"string into file2.h as follows:","position":{"start":{"line":1510,"column":144,"offset":51833},"end":{"line":1510,"column":175,"offset":51864},"indent":[]}}],"position":{"start":{"line":1510,"column":1,"offset":51690},"end":{"line":1510,"column":175,"offset":51864},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"file2.h:","position":{"start":{"line":1512,"column":1,"offset":51866},"end":{"line":1512,"column":9,"offset":51874},"indent":[]}}],"position":{"start":{"line":1512,"column":1,"offset":51866},"end":{"line":1512,"column":9,"offset":51874},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _file2_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _file2_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":1513,"column":1,"offset":51875},"end":{"line":1523,"column":4,"offset":52008},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The #ifndef, #define, #endif block prevents the compiler from including the same code over and over again.  It checks to see if ","position":{"start":{"line":1525,"column":1,"offset":52010},"end":{"line":1525,"column":129,"offset":52138},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"file2","position":{"start":{"line":1525,"column":130,"offset":52139},"end":{"line":1525,"column":135,"offset":52144},"indent":[]}}],"position":{"start":{"line":1525,"column":129,"offset":52138},"end":{"line":1525,"column":136,"offset":52145},"indent":[]}},{"type":"text","value":"H has been defined and if it hasn't, it defines it.  If it has been defined previously, the compiler skips the block.","position":{"start":{"line":1525,"column":136,"offset":52145},"end":{"line":1525,"column":253,"offset":52262},"indent":[]}}],"position":{"start":{"line":1525,"column":1,"offset":52010},"end":{"line":1525,"column":253,"offset":52262},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"size","position":{"start":{"line":1527,"column":1,"offset":52264},"end":{"line":1527,"column":5,"offset":52268},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t is used in reverse","position":{"start":{"line":1527,"column":6,"offset":52269},"end":{"line":1527,"column":26,"offset":52289},"indent":[]}}],"position":{"start":{"line":1527,"column":5,"offset":52268},"end":{"line":1527,"column":27,"offset":52290},"indent":[]}},{"type":"text","value":"string, which is defined in stdlib.h, so we include stdlib.h.  One last change is to update file2.c to include file2.h so that we can be sure that file2.c and file2.h don't get out of sync.","position":{"start":{"line":1527,"column":27,"offset":52290},"end":{"line":1527,"column":216,"offset":52479},"indent":[]}}],"position":{"start":{"line":1527,"column":1,"offset":52264},"end":{"line":1527,"column":216,"offset":52479},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"file2.c","position":{"start":{"line":1529,"column":1,"offset":52481},"end":{"line":1529,"column":8,"offset":52488},"indent":[]}}],"position":{"start":{"line":1529,"column":1,"offset":52481},"end":{"line":1529,"column":8,"offset":52488},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":1530,"column":1,"offset":52489},"end":{"line":1537,"column":4,"offset":52581},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now we can include file2.h in test","position":{"start":{"line":1539,"column":1,"offset":52583},"end":{"line":1539,"column":35,"offset":52617},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c instead of defining the functions in test","position":{"start":{"line":1539,"column":36,"offset":52618},"end":{"line":1539,"column":85,"offset":52667},"indent":[]}}],"position":{"start":{"line":1539,"column":35,"offset":52617},"end":{"line":1539,"column":86,"offset":52668},"indent":[]}},{"type":"text","value":"timer.c.","position":{"start":{"line":1539,"column":86,"offset":52668},"end":{"line":1539,"column":94,"offset":52676},"indent":[]}}],"position":{"start":{"line":1539,"column":1,"offset":52583},"end":{"line":1539,"column":94,"offset":52676},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_timer.c changes from","position":{"start":{"line":1541,"column":1,"offset":52678},"end":{"line":1541,"column":26,"offset":52703},"indent":[]}}],"position":{"start":{"line":1541,"column":1,"offset":52678},"end":{"line":1541,"column":26,"offset":52703},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":1542,"column":1,"offset":52704},"end":{"line":1549,"column":4,"offset":52783},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to","position":{"start":{"line":1551,"column":1,"offset":52785},"end":{"line":1551,"column":3,"offset":52787},"indent":[]}}],"position":{"start":{"line":1551,"column":1,"offset":52785},"end":{"line":1551,"column":3,"offset":52787},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"file2.h\"</span></span></code></pre></div>","position":{"start":{"line":1552,"column":1,"offset":52788},"end":{"line":1554,"column":4,"offset":52815},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Again, since this is something that is our own, we should include it before the system or third party includes.  The Makefile changed slightly.","position":{"start":{"line":1556,"column":1,"offset":52817},"end":{"line":1556,"column":144,"offset":52960},"indent":[]}}],"position":{"start":{"line":1556,"column":1,"offset":52817},"end":{"line":1556,"column":144,"offset":52960},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Makefile changed from","position":{"start":{"line":1558,"column":1,"offset":52962},"end":{"line":1558,"column":22,"offset":52983},"indent":[]}}],"position":{"start":{"line":1558,"column":1,"offset":52962},"end":{"line":1558,"column":22,"offset":52983},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c file2.c</code></pre></div>","position":{"start":{"line":1559,"column":1,"offset":52984},"end":{"line":1561,"column":4,"offset":53032},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to","position":{"start":{"line":1563,"column":1,"offset":53034},"end":{"line":1563,"column":3,"offset":53036},"indent":[]}}],"position":{"start":{"line":1563,"column":1,"offset":53034},"end":{"line":1563,"column":3,"offset":53036},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c file2.h file2.c</code></pre></div>","position":{"start":{"line":1564,"column":1,"offset":53037},"end":{"line":1566,"column":4,"offset":53093},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"So that test_timer will be built if file2.h is updated.","position":{"start":{"line":1568,"column":1,"offset":53095},"end":{"line":1568,"column":56,"offset":53150},"indent":[]}}],"position":{"start":{"line":1568,"column":1,"offset":53095},"end":{"line":1568,"column":56,"offset":53150},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#defining-an-object","title":null,"children":[],"data":{"hProperties":{"aria-label":"defining an object permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Defining an object","position":{"start":{"line":1570,"column":4,"offset":53155},"end":{"line":1570,"column":22,"offset":53173},"indent":[]}}],"position":{"start":{"line":1570,"column":1,"offset":53152},"end":{"line":1570,"column":22,"offset":53173},"indent":[]},"data":{"id":"defining-an-object","htmlAttributes":{"id":"defining-an-object"},"hProperties":{"id":"defining-an-object"}}},{"type":"paragraph","children":[{"type":"text","value":"This section's code is found in ","position":{"start":{"line":1572,"column":1,"offset":53175},"end":{"line":1572,"column":33,"offset":53207},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1572,"column":33,"offset":53207},"end":{"line":1572,"column":36,"offset":53210},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1572,"column":36,"offset":53210},"end":{"line":1572,"column":51,"offset":53225},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/9","position":{"start":{"line":1572,"column":52,"offset":53226},"end":{"line":1572,"column":60,"offset":53234},"indent":[]}}],"position":{"start":{"line":1572,"column":51,"offset":53225},"end":{"line":1572,"column":61,"offset":53235},"indent":[]}},{"type":"text","value":"xxx","position":{"start":{"line":1572,"column":61,"offset":53235},"end":{"line":1572,"column":64,"offset":53238},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1572,"column":64,"offset":53238},"end":{"line":1572,"column":68,"offset":53242},"indent":[]}}],"position":{"start":{"line":1572,"column":1,"offset":53175},"end":{"line":1572,"column":68,"offset":53242},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To build the code run...","position":{"start":{"line":1574,"column":1,"offset":53244},"end":{"line":1574,"column":25,"offset":53268},"indent":[]}}],"position":{"start":{"line":1574,"column":1,"offset":53244},"end":{"line":1574,"column":25,"offset":53268},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 xxx.c test_xxx.c -o test_xxx\n./test_xxx\nHello: <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":1575,"column":1,"offset":53269},"end":{"line":1580,"column":4,"offset":53349},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The objects that will be created throughout the rest of this book will look something like this (where xxx is the object name):","position":{"start":{"line":1582,"column":1,"offset":53351},"end":{"line":1582,"column":128,"offset":53478},"indent":[]}}],"position":{"start":{"line":1582,"column":1,"offset":53351},"end":{"line":1582,"column":128,"offset":53478},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"xxx.h","position":{"start":{"line":1584,"column":1,"offset":53480},"end":{"line":1584,"column":6,"offset":53485},"indent":[]}}],"position":{"start":{"line":1584,"column":1,"offset":53480},"end":{"line":1584,"column":6,"offset":53485},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _xxx_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _xxx_H</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span> xxx_t<span class=\"token punctuation\">;</span>\n\nxxx_t <span class=\"token operator\">*</span> <span class=\"token function\">xxx_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> param2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">xxx_destroy</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">xxx_do_something</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>prefix <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":1585,"column":1,"offset":53486},"end":{"line":1598,"column":4,"offset":53704},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The header file or interface simply provides what exists and doesn't offer details into how xxx might work.  The int param1, int param2, and const char *prefix above are just examples.  The init function often doesn't have any parameters.  The init function is used to create the structure so that the other functions can use it within the xxx object.  The destroy function destroys the xxx","position":{"start":{"line":1600,"column":1,"offset":53706},"end":{"line":1600,"column":391,"offset":54096},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t structure.  The xxx","position":{"start":{"line":1600,"column":392,"offset":54097},"end":{"line":1600,"column":413,"offset":54118},"indent":[]}}],"position":{"start":{"line":1600,"column":391,"offset":54096},"end":{"line":1600,"column":414,"offset":54119},"indent":[]}},{"type":"text","value":"t structure doesn't have members.  It is just declared (like the functions after it) so that the compiler knows that the structure is defined somewhere.  By defining the structure like this, applications using the xxx object cannot access members of the structure.  The implementation is free to put whatever members in the structure to make the function work.  The only thing applications which use this object are required to do is create (or init) the object and then pass it around to the various functions that use that type.  If there is a destroy method, then the application is expected to destroy the object to clean it up.","position":{"start":{"line":1600,"column":414,"offset":54119},"end":{"line":1600,"column":1046,"offset":54751},"indent":[]}}],"position":{"start":{"line":1600,"column":1,"offset":53706},"end":{"line":1600,"column":1046,"offset":54751},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To use the above interface, you will include it and call its methods.","position":{"start":{"line":1602,"column":1,"offset":54753},"end":{"line":1602,"column":70,"offset":54822},"indent":[]}}],"position":{"start":{"line":1602,"column":1,"offset":54753},"end":{"line":1602,"column":70,"offset":54822},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"xxx.h\"</span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xxx_t <span class=\"token operator\">*</span>handle <span class=\"token operator\">=</span> <span class=\"token function\">xxx_init</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">xxx_do_something</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">xxx_destroy</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1603,"column":1,"offset":54823},"end":{"line":1612,"column":4,"offset":54970},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"xxx.h is just an interface.  The implementation of those functions would be in a C file.","position":{"start":{"line":1614,"column":1,"offset":54972},"end":{"line":1614,"column":89,"offset":55060},"indent":[]}}],"position":{"start":{"line":1614,"column":1,"offset":54972},"end":{"line":1614,"column":89,"offset":55060},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"xxx.c:","position":{"start":{"line":1616,"column":1,"offset":55062},"end":{"line":1616,"column":7,"offset":55068},"indent":[]}}],"position":{"start":{"line":1616,"column":1,"offset":55062},"end":{"line":1616,"column":7,"offset":55068},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"xxx.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nxxx_t <span class=\"token operator\">*</span> <span class=\"token function\">xxx_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> param2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xxx_t <span class=\"token operator\">*</span>h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xxx_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>xxx_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  h<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> param1<span class=\"token punctuation\">;</span>\n  h<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> param2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">xxx_destroy</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">xxx_do_something</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>prefix <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1617,"column":1,"offset":55069},"end":{"line":1641,"column":4,"offset":55442},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"One thing that hasn't been talked about much is the struct keyword.","position":{"start":{"line":1643,"column":1,"offset":55444},"end":{"line":1643,"column":68,"offset":55511},"indent":[]}}],"position":{"start":{"line":1643,"column":1,"offset":55444},"end":{"line":1643,"column":68,"offset":55511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In C, you can group multiple data types as variables to define a larger structure.  A classic example is to create a point structure.  Typically, they would be defined as follows:","position":{"start":{"line":1645,"column":1,"offset":55513},"end":{"line":1645,"column":180,"offset":55692},"indent":[]}}],"position":{"start":{"line":1645,"column":1,"offset":55513},"end":{"line":1645,"column":180,"offset":55692},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">point</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">point</span> p<span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1646,"column":1,"offset":55693},"end":{"line":1661,"column":4,"offset":55886},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can use typedef to reduce the need for typing the keyword struct over and over...","position":{"start":{"line":1663,"column":1,"offset":55888},"end":{"line":1663,"column":86,"offset":55973},"indent":[]}}],"position":{"start":{"line":1663,"column":1,"offset":55888},"end":{"line":1663,"column":86,"offset":55973},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> point<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  point p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or struct point_s p;</span>\n  p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1664,"column":1,"offset":55974},"end":{"line":1679,"column":4,"offset":56201},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can also define that a struct will exist and then define it later.","position":{"start":{"line":1681,"column":1,"offset":56203},"end":{"line":1681,"column":71,"offset":56273},"indent":[]}}],"position":{"start":{"line":1681,"column":1,"offset":56203},"end":{"line":1681,"column":71,"offset":56273},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span> point<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  point p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or struct point_s p;</span>\n  p<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1682,"column":1,"offset":56274},"end":{"line":1700,"column":4,"offset":56534},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To access members of a struct value, you use the dot notation.  If you have a pointer to the structure, then you access members using the -> syntax.","position":{"start":{"line":1702,"column":1,"offset":56536},"end":{"line":1702,"column":149,"offset":56684},"indent":[]}}],"position":{"start":{"line":1702,"column":1,"offset":56536},"end":{"line":1702,"column":149,"offset":56684},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span> point<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">point_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  point p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or struct point_s p;</span>\n  point <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// &amp;p gets the address of p (or returns a pointer to p).</span>\n  ptr<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  ptr<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"(%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> ptr<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1703,"column":1,"offset":56685},"end":{"line":1722,"column":4,"offset":57033},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In the code above, the xxx","position":{"start":{"line":1724,"column":1,"offset":57035},"end":{"line":1724,"column":27,"offset":57061},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"s is declared in xxx.h and then typedef'd to xxx","position":{"start":{"line":1724,"column":28,"offset":57062},"end":{"line":1724,"column":76,"offset":57110},"indent":[]}}],"position":{"start":{"line":1724,"column":27,"offset":57061},"end":{"line":1724,"column":77,"offset":57111},"indent":[]}},{"type":"text","value":"t.\nxxx.h:","position":{"start":{"line":1724,"column":77,"offset":57111},"end":{"line":1725,"column":7,"offset":57120},"indent":[1]}}],"position":{"start":{"line":1724,"column":1,"offset":57035},"end":{"line":1725,"column":7,"offset":57120},"indent":[1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span> xxx_t<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1726,"column":1,"offset":57121},"end":{"line":1729,"column":4,"offset":57171},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The xxx_s struct is actually defined in xxx.c:","position":{"start":{"line":1731,"column":1,"offset":57173},"end":{"line":1731,"column":47,"offset":57219},"indent":[]}}],"position":{"start":{"line":1731,"column":1,"offset":57173},"end":{"line":1731,"column":47,"offset":57219},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">xxx_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1732,"column":1,"offset":57220},"end":{"line":1737,"column":4,"offset":57264},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The xxx","position":{"start":{"line":1739,"column":1,"offset":57266},"end":{"line":1739,"column":8,"offset":57273},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"init function creates the xxx","position":{"start":{"line":1739,"column":9,"offset":57274},"end":{"line":1739,"column":38,"offset":57303},"indent":[]}}],"position":{"start":{"line":1739,"column":8,"offset":57273},"end":{"line":1739,"column":39,"offset":57304},"indent":[]}},{"type":"text","value":"t structure, sets the members, and then returns the newly allocated structure.","position":{"start":{"line":1739,"column":39,"offset":57304},"end":{"line":1739,"column":117,"offset":57382},"indent":[]}}],"position":{"start":{"line":1739,"column":1,"offset":57266},"end":{"line":1739,"column":117,"offset":57382},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">xxx_t <span class=\"token operator\">*</span> <span class=\"token function\">xxx_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> param2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  xxx_t <span class=\"token operator\">*</span>h <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xxx_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>xxx_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  h<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> param1<span class=\"token punctuation\">;</span>\n  h<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> param2<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1740,"column":1,"offset":57383},"end":{"line":1747,"column":4,"offset":57527},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The xxx","position":{"start":{"line":1749,"column":1,"offset":57529},"end":{"line":1749,"column":8,"offset":57536},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"destroy function frees the memory that was allocated in xxx","position":{"start":{"line":1749,"column":9,"offset":57537},"end":{"line":1749,"column":68,"offset":57596},"indent":[]}}],"position":{"start":{"line":1749,"column":8,"offset":57536},"end":{"line":1749,"column":69,"offset":57597},"indent":[]}},{"type":"text","value":"init.","position":{"start":{"line":1749,"column":69,"offset":57597},"end":{"line":1749,"column":74,"offset":57602},"indent":[]}}],"position":{"start":{"line":1749,"column":1,"offset":57529},"end":{"line":1749,"column":74,"offset":57602},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">xxx_destroy</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1750,"column":1,"offset":57603},"end":{"line":1754,"column":4,"offset":57655},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The xxx","position":{"start":{"line":1756,"column":1,"offset":57657},"end":{"line":1756,"column":8,"offset":57664},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"do","position":{"start":{"line":1756,"column":9,"offset":57665},"end":{"line":1756,"column":11,"offset":57667},"indent":[]}}],"position":{"start":{"line":1756,"column":8,"offset":57664},"end":{"line":1756,"column":12,"offset":57668},"indent":[]}},{"type":"text","value":"something function prints x and y after printing the prefix which is passed into it.","position":{"start":{"line":1756,"column":12,"offset":57668},"end":{"line":1756,"column":96,"offset":57752},"indent":[]}}],"position":{"start":{"line":1756,"column":1,"offset":57657},"end":{"line":1756,"column":96,"offset":57752},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">xxx_do_something</span><span class=\"token punctuation\">(</span> xxx_t <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>prefix <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"%s: (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>x<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1757,"column":1,"offset":57753},"end":{"line":1761,"column":4,"offset":57869},"indent":[1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#the-timer-interface","title":null,"children":[],"data":{"hProperties":{"aria-label":"the timer interface permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"The timer interface","position":{"start":{"line":1765,"column":4,"offset":57876},"end":{"line":1765,"column":23,"offset":57895},"indent":[]}}],"position":{"start":{"line":1765,"column":1,"offset":57873},"end":{"line":1765,"column":23,"offset":57895},"indent":[]},"data":{"id":"the-timer-interface","htmlAttributes":{"id":"the-timer-interface"},"hProperties":{"id":"the-timer-interface"}}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":1767,"column":1,"offset":57897},"end":{"line":1767,"column":32,"offset":57928},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":1767,"column":32,"offset":57928},"end":{"line":1767,"column":35,"offset":57931},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":1767,"column":35,"offset":57931},"end":{"line":1767,"column":50,"offset":57946},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/10","position":{"start":{"line":1767,"column":51,"offset":57947},"end":{"line":1767,"column":60,"offset":57956},"indent":[]}}],"position":{"start":{"line":1767,"column":50,"offset":57946},"end":{"line":1767,"column":61,"offset":57957},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":1767,"column":61,"offset":57957},"end":{"line":1767,"column":66,"offset":57962},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":1767,"column":66,"offset":57962},"end":{"line":1767,"column":70,"offset":57966},"indent":[]}}],"position":{"start":{"line":1767,"column":1,"offset":57897},"end":{"line":1767,"column":70,"offset":57966},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Makefile has one minor difference.  This project will have a separate timer object.  The gcc command will run if test_timer.c, timer.c, or timer.h are changed.","position":{"start":{"line":1769,"column":1,"offset":57968},"end":{"line":1769,"column":164,"offset":58131},"indent":[]}}],"position":{"start":{"line":1769,"column":1,"offset":57968},"end":{"line":1769,"column":164,"offset":58131},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c timer.c timer.h\n\tgcc -O3 timer.c test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":1770,"column":1,"offset":58132},"end":{"line":1773,"column":4,"offset":58232},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Build the project...","position":{"start":{"line":1775,"column":1,"offset":58234},"end":{"line":1775,"column":21,"offset":58254},"indent":[]}}],"position":{"start":{"line":1775,"column":1,"offset":58234},"end":{"line":1775,"column":21,"offset":58254},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ngcc -O3 timer.c test_timer.c -o test_timer\n./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\nABCDEFGHIJKLMNOPQRSTUVWXYZ <span class=\"token operator\">=</span><span class=\"token operator\">></span> ZYXWVUTSRQPONMLKJIHGFEDCBA\ntime_spent: <span class=\"token number\">9</span>.7730ns\nReverse <span class=\"token operator\">=</span><span class=\"token operator\">></span> esreveR\ntime_spent: <span class=\"token number\">2</span>.5150ns\noverall time_spent: <span class=\"token number\">12</span>.2880ns</code></pre></div>","position":{"start":{"line":1776,"column":1,"offset":58255},"end":{"line":1785,"column":4,"offset":58512},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The timing is the same as 4_timer.  This section will be about","position":{"start":{"line":1787,"column":1,"offset":58514},"end":{"line":1787,"column":63,"offset":58576},"indent":[]}}],"position":{"start":{"line":1787,"column":1,"offset":58514},"end":{"line":1787,"column":63,"offset":58576},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In test_timer.c the following lines of code exists.","position":{"start":{"line":1789,"column":1,"offset":58578},"end":{"line":1789,"column":52,"offset":58629},"indent":[]}}],"position":{"start":{"line":1789,"column":1,"offset":58578},"end":{"line":1789,"column":52,"offset":58629},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timer.h\"</span></span></code></pre></div>","position":{"start":{"line":1790,"column":1,"offset":58630},"end":{"line":1792,"column":4,"offset":58657},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To make our project reusable, we need to break it up into objects (or interfaces and implementations).  In the above example, we are including timer.h (which we will make next).  ","position":{"start":{"line":1794,"column":1,"offset":58659},"end":{"line":1794,"column":180,"offset":58838},"indent":[]}}],"position":{"start":{"line":1794,"column":1,"offset":58659},"end":{"line":1794,"column":180,"offset":58838},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"timer.h (comments removed)","position":{"start":{"line":1796,"column":1,"offset":58840},"end":{"line":1796,"column":27,"offset":58866},"indent":[]}}],"position":{"start":{"line":1796,"column":1,"offset":58840},"end":{"line":1796,"column":27,"offset":58866},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _timer_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _timer_H</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> timer_t<span class=\"token punctuation\">;</span>\n\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_timer_init</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":1797,"column":1,"offset":58867},"end":{"line":1821,"column":4,"offset":59340},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Earlier, you learned that the struct keyword allows you to group zero or more types to form a new type.  In general, I like to name struct types with a ","position":{"start":{"line":1823,"column":1,"offset":59342},"end":{"line":1823,"column":153,"offset":59494},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"s suffix and then typedef them to have a _t suffix.  In the timer.h above, the timer","position":{"start":{"line":1823,"column":154,"offset":59495},"end":{"line":1823,"column":238,"offset":59579},"indent":[]}}],"position":{"start":{"line":1823,"column":153,"offset":59494},"end":{"line":1823,"column":239,"offset":59580},"indent":[]}},{"type":"text","value":"s struct was declared, but never actually defined.  The details of what is in the structure are part of the implementation and aren't meant to be known externally.  C allows you to define types in this way and use them as long as you only reference them as pointers.  All pointers have the same size (the number of bits that the CPU supports or the sizeof(size","position":{"start":{"line":1823,"column":239,"offset":59580},"end":{"line":1823,"column":599,"offset":59940},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t)).  For now, just recognize that there is a new type named timer","position":{"start":{"line":1823,"column":600,"offset":59941},"end":{"line":1823,"column":666,"offset":60007},"indent":[]}}],"position":{"start":{"line":1823,"column":599,"offset":59940},"end":{"line":1823,"column":667,"offset":60008},"indent":[]}},{"type":"text","value":"t and that timer_s will be defined in timer.c.","position":{"start":{"line":1823,"column":667,"offset":60008},"end":{"line":1823,"column":713,"offset":60054},"indent":[]}}],"position":{"start":{"line":1823,"column":1,"offset":59342},"end":{"line":1823,"column":713,"offset":60054},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> timer_t<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1825,"column":1,"offset":60056},"end":{"line":1828,"column":4,"offset":60112},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I follow a pattern where every function is prefixed by the object name (in this case, timer).  The primary type (if there is one) is usually the object name followed by _t.  Objects will typically have an init, and a destroy method.  The job of the header file is to create an interface for applications to use.  It should hide the implementation details as much as possible.  I usually will define an interface before defining an implementation.","position":{"start":{"line":1830,"column":1,"offset":60114},"end":{"line":1830,"column":447,"offset":60560},"indent":[]}}],"position":{"start":{"line":1830,"column":1,"offset":60114},"end":{"line":1830,"column":447,"offset":60560},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initialize the timer.  repeat is necessary to indicate how many times the test will be repeated within the application so that the final result represents that.  If a thing is only being timed with a single repetition, then use a value of 1.  This function will allocate the timer","position":{"start":{"line":1832,"column":1,"offset":60562},"end":{"line":1832,"column":281,"offset":60842},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t structure and fill its members appropriately.  To free up the resources associated with this call, you must call timer","position":{"start":{"line":1832,"column":282,"offset":60843},"end":{"line":1832,"column":402,"offset":60963},"indent":[]}}],"position":{"start":{"line":1832,"column":281,"offset":60842},"end":{"line":1832,"column":403,"offset":60964},"indent":[]}},{"type":"text","value":"destroy with the return value of this call.","position":{"start":{"line":1832,"column":403,"offset":60964},"end":{"line":1832,"column":446,"offset":61007},"indent":[]}}],"position":{"start":{"line":1832,"column":1,"offset":60562},"end":{"line":1832,"column":446,"offset":61007},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1833,"column":1,"offset":61008},"end":{"line":1835,"column":4,"offset":61049},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Initialize a timer from another timer.  This will subtract the time spent and set the repeat from the timer, which is passed as a parameter to timer","position":{"start":{"line":1837,"column":1,"offset":61051},"end":{"line":1837,"column":149,"offset":61199},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer","position":{"start":{"line":1837,"column":150,"offset":61200},"end":{"line":1837,"column":155,"offset":61205},"indent":[]}}],"position":{"start":{"line":1837,"column":149,"offset":61199},"end":{"line":1837,"column":156,"offset":61206},"indent":[]}},{"type":"text","value":"init.","position":{"start":{"line":1837,"column":156,"offset":61206},"end":{"line":1837,"column":161,"offset":61211},"indent":[]}}],"position":{"start":{"line":1837,"column":1,"offset":61051},"end":{"line":1837,"column":161,"offset":61211},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_timer_init</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1838,"column":1,"offset":61212},"end":{"line":1840,"column":4,"offset":61259},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Destroy the timer created from timer","position":{"start":{"line":1842,"column":1,"offset":61261},"end":{"line":1842,"column":37,"offset":61297},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"init or timer","position":{"start":{"line":1842,"column":38,"offset":61298},"end":{"line":1842,"column":51,"offset":61311},"indent":[]}}],"position":{"start":{"line":1842,"column":37,"offset":61297},"end":{"line":1842,"column":52,"offset":61312},"indent":[]}},{"type":"text","value":"timer_init.","position":{"start":{"line":1842,"column":52,"offset":61312},"end":{"line":1842,"column":63,"offset":61323},"indent":[]}}],"position":{"start":{"line":1842,"column":1,"offset":61261},"end":{"line":1842,"column":63,"offset":61323},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1843,"column":1,"offset":61324},"end":{"line":1845,"column":4,"offset":61364},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Subtract the amount of time spent in sub from the current timer (t)","position":{"start":{"line":1847,"column":1,"offset":61366},"end":{"line":1847,"column":68,"offset":61433},"indent":[]}}],"position":{"start":{"line":1847,"column":1,"offset":61366},"end":{"line":1847,"column":68,"offset":61433},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1848,"column":1,"offset":61434},"end":{"line":1850,"column":4,"offset":61489},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Add the amount of time spent in add to the current timer (t)","position":{"start":{"line":1852,"column":1,"offset":61491},"end":{"line":1852,"column":61,"offset":61551},"indent":[]}}],"position":{"start":{"line":1852,"column":1,"offset":61491},"end":{"line":1852,"column":61,"offset":61551},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1853,"column":1,"offset":61552},"end":{"line":1855,"column":4,"offset":61602},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Start the timer (t)","position":{"start":{"line":1857,"column":1,"offset":61604},"end":{"line":1857,"column":20,"offset":61623},"indent":[]}}],"position":{"start":{"line":1857,"column":1,"offset":61604},"end":{"line":1857,"column":20,"offset":61623},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1858,"column":1,"offset":61624},"end":{"line":1860,"column":4,"offset":61662},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Stop the timer (t)","position":{"start":{"line":1862,"column":1,"offset":61664},"end":{"line":1862,"column":19,"offset":61682},"indent":[]}}],"position":{"start":{"line":1862,"column":1,"offset":61664},"end":{"line":1862,"column":19,"offset":61682},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1863,"column":1,"offset":61683},"end":{"line":1865,"column":4,"offset":61720},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Returns time spent in nanoseconds (ns), microseconds (us), milliseconds (ms), and seconds (sec).","position":{"start":{"line":1867,"column":1,"offset":61722},"end":{"line":1867,"column":97,"offset":61818},"indent":[]}}],"position":{"start":{"line":1867,"column":1,"offset":61722},"end":{"line":1867,"column":97,"offset":61818},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1868,"column":1,"offset":61819},"end":{"line":1873,"column":4,"offset":61944},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice that timer.h doesn't mention how it is going to be implemented in any way.  It simply names functions in a way that is useable and describes what they do.","position":{"start":{"line":1875,"column":1,"offset":61946},"end":{"line":1875,"column":162,"offset":62107},"indent":[]}}],"position":{"start":{"line":1875,"column":1,"offset":61946},"end":{"line":1875,"column":162,"offset":62107},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I usually copy the .h (header file) to a similarly named .c (implementation file) and then fill in the details.","position":{"start":{"line":1877,"column":1,"offset":62109},"end":{"line":1877,"column":112,"offset":62220},"indent":[]}}],"position":{"start":{"line":1877,"column":1,"offset":62109},"end":{"line":1877,"column":112,"offset":62220},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"timer.c (incomplete)","position":{"start":{"line":1879,"column":1,"offset":62222},"end":{"line":1879,"column":21,"offset":62242},"indent":[]}}],"position":{"start":{"line":1879,"column":1,"offset":62222},"end":{"line":1879,"column":21,"offset":62242},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> _timer_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> _timer_H</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> timer_t<span class=\"token punctuation\">;</span>\n\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_timer_init</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>","position":{"start":{"line":1880,"column":1,"offset":62243},"end":{"line":1904,"column":4,"offset":62716},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing to do is to remove the #ifndef/#define/#endif and replace it with an #include \"timer.h\".","position":{"start":{"line":1906,"column":1,"offset":62718},"end":{"line":1906,"column":105,"offset":62822},"indent":[]}}],"position":{"start":{"line":1906,"column":1,"offset":62718},"end":{"line":1906,"column":105,"offset":62822},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"timer.c (incomplete)","position":{"start":{"line":1908,"column":1,"offset":62824},"end":{"line":1908,"column":21,"offset":62844},"indent":[]}}],"position":{"start":{"line":1908,"column":1,"offset":62824},"end":{"line":1908,"column":21,"offset":62844},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timer.h\"</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> timer_t<span class=\"token punctuation\">;</span>\n\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_set_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1909,"column":1,"offset":62845},"end":{"line":1931,"column":4,"offset":63337},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The next thing to do is to fill in the timer_s details and remove the typedef that follows.","position":{"start":{"line":1933,"column":1,"offset":63339},"end":{"line":1933,"column":92,"offset":63430},"indent":[]}}],"position":{"start":{"line":1933,"column":1,"offset":63339},"end":{"line":1933,"column":92,"offset":63430},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> timer_t<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1935,"column":1,"offset":63432},"end":{"line":1938,"column":4,"offset":63488},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":1940,"column":1,"offset":63490},"end":{"line":1940,"column":8,"offset":63497},"indent":[]}}],"position":{"start":{"line":1940,"column":1,"offset":63490},"end":{"line":1940,"column":8,"offset":63497},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> time_spent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> start_time<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1941,"column":1,"offset":63498},"end":{"line":1948,"column":4,"offset":63591},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"repeat is the number of times that the test will be repeated.  time","position":{"start":{"line":1950,"column":1,"offset":63593},"end":{"line":1950,"column":68,"offset":63660},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"spent is the total time that has been spent within this object so far.  start","position":{"start":{"line":1950,"column":69,"offset":63661},"end":{"line":1950,"column":146,"offset":63738},"indent":[]}}],"position":{"start":{"line":1950,"column":68,"offset":63660},"end":{"line":1950,"column":147,"offset":63739},"indent":[]}},{"type":"text","value":"time is recorded every time timer_start is called.  base is used to track how much time should be added or subtracted from the final time spent based upon other timers.","position":{"start":{"line":1950,"column":147,"offset":63739},"end":{"line":1950,"column":315,"offset":63907},"indent":[]}}],"position":{"start":{"line":1950,"column":1,"offset":63593},"end":{"line":1950,"column":315,"offset":63907},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1952,"column":1,"offset":63909},"end":{"line":1954,"column":4,"offset":63950},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":1956,"column":1,"offset":63952},"end":{"line":1956,"column":8,"offset":63959},"indent":[]}}],"position":{"start":{"line":1956,"column":1,"offset":63952},"end":{"line":1956,"column":8,"offset":63959},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  timer_t <span class=\"token operator\">*</span>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">=</span> repeat<span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>start_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1957,"column":1,"offset":63960},"end":{"line":1966,"column":4,"offset":64157},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#include-stdlibh-is-added-at-the-top-of-the-file-since-it-is-needed-for-malloc--all-of-the-members-are-initialized-to-zero-except-repeat-which-is-set-to-the-value-passed-into-timer_init","title":null,"children":[],"data":{"hProperties":{"aria-label":"include stdlibh is added at the top of the file since it is needed for malloc  all of the members are initialized to zero except repeat which is set to the value passed into timer_init permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"include <stdlib.h> is added at the top of the file since it is needed for malloc.  All of the members are initialized to zero except repeat (which is set to the value passed into timer_init).","position":{"start":{"line":1968,"column":2,"offset":64160},"end":{"line":1968,"column":193,"offset":64351},"indent":[]}}],"position":{"start":{"line":1968,"column":1,"offset":64159},"end":{"line":1968,"column":193,"offset":64351},"indent":[]},"data":{"id":"include-stdlibh-is-added-at-the-top-of-the-file-since-it-is-needed-for-malloc--all-of-the-members-are-initialized-to-zero-except-repeat-which-is-set-to-the-value-passed-into-timer_init","htmlAttributes":{"id":"include-stdlibh-is-added-at-the-top-of-the-file-since-it-is-needed-for-malloc--all-of-the-members-are-initialized-to-zero-except-repeat-which-is-set-to-the-value-passed-into-timer_init"},"hProperties":{"id":"include-stdlibh-is-added-at-the-top-of-the-file-since-it-is-needed-for-malloc--all-of-the-members-are-initialized-to-zero-except-repeat-which-is-set-to-the-value-passed-into-timer_init"}}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1971,"column":1,"offset":64354},"end":{"line":1973,"column":4,"offset":64394},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":1975,"column":1,"offset":64396},"end":{"line":1975,"column":8,"offset":64403},"indent":[]}}],"position":{"start":{"line":1975,"column":1,"offset":64396},"end":{"line":1975,"column":8,"offset":64403},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1976,"column":1,"offset":64404},"end":{"line":1980,"column":4,"offset":64458},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"timer_destroy simply needs to free the memory that was allocated by either of the init methods.","position":{"start":{"line":1982,"column":1,"offset":64460},"end":{"line":1982,"column":96,"offset":64555},"indent":[]}}],"position":{"start":{"line":1982,"column":1,"offset":64460},"end":{"line":1982,"column":96,"offset":64555},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_set_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1984,"column":1,"offset":64557},"end":{"line":1987,"column":4,"offset":64646},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":1989,"column":1,"offset":64648},"end":{"line":1989,"column":8,"offset":64655},"indent":[]}}],"position":{"start":{"line":1989,"column":1,"offset":64648},"end":{"line":1989,"column":8,"offset":64655},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> t<span class=\"token operator\">-></span>repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_set_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">=</span> repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1990,"column":1,"offset":64656},"end":{"line":1998,"column":4,"offset":64794},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Because the details of the timer_t structure are only known to timer.c, functions must be used to access members of the structure.  This encapsulation keeps a good separation from the interface and the implementation.","position":{"start":{"line":1999,"column":1,"offset":64795},"end":{"line":1999,"column":218,"offset":65012},"indent":[]}}],"position":{"start":{"line":1999,"column":1,"offset":64795},"end":{"line":1999,"column":218,"offset":65012},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2001,"column":1,"offset":65014},"end":{"line":2004,"column":4,"offset":65111},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2006,"column":1,"offset":65113},"end":{"line":2006,"column":8,"offset":65120},"indent":[]}}],"position":{"start":{"line":2006,"column":1,"offset":65113},"end":{"line":2006,"column":8,"offset":65120},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>sub<span class=\"token operator\">-></span>time_spent<span class=\"token operator\">+</span>sub<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>add<span class=\"token operator\">-></span>time_spent<span class=\"token operator\">+</span>add<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2007,"column":1,"offset":65121},"end":{"line":2015,"column":4,"offset":65309},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"These methods may also have been initialized from another timer, so the base is added to the time_spent.  ","position":{"start":{"line":2017,"column":1,"offset":65311},"end":{"line":2017,"column":107,"offset":65417},"indent":[]}}],"position":{"start":{"line":2017,"column":1,"offset":65311},"end":{"line":2017,"column":107,"offset":65417},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2019,"column":1,"offset":65419},"end":{"line":2022,"column":4,"offset":65486},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2024,"column":1,"offset":65488},"end":{"line":2024,"column":8,"offset":65495},"indent":[]}}],"position":{"start":{"line":2024,"column":1,"offset":65488},"end":{"line":2024,"column":8,"offset":65495},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>start_time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n  v <span class=\"token operator\">-=</span> t<span class=\"token operator\">-></span>start_time<span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2025,"column":1,"offset":65496},"end":{"line":2039,"column":4,"offset":65811},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"timer","position":{"start":{"line":2041,"column":1,"offset":65813},"end":{"line":2041,"column":6,"offset":65818},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"start is basically the same as get","position":{"start":{"line":2041,"column":7,"offset":65819},"end":{"line":2041,"column":41,"offset":65853},"indent":[]}}],"position":{"start":{"line":2041,"column":6,"offset":65818},"end":{"line":2041,"column":42,"offset":65854},"indent":[]}},{"type":"text","value":"time() defined earlier.  The difference is that it sets the start","position":{"start":{"line":2041,"column":42,"offset":65854},"end":{"line":2041,"column":107,"offset":65919},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"time member of the struct timer","position":{"start":{"line":2041,"column":108,"offset":65920},"end":{"line":2041,"column":139,"offset":65951},"indent":[]}}],"position":{"start":{"line":2041,"column":107,"offset":65919},"end":{"line":2041,"column":140,"offset":65952},"indent":[]}},{"type":"text","value":"t t.","position":{"start":{"line":2041,"column":140,"offset":65952},"end":{"line":2041,"column":144,"offset":65956},"indent":[]}}],"position":{"start":{"line":2041,"column":1,"offset":65813},"end":{"line":2041,"column":144,"offset":65956},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, the following functions are changed to.","position":{"start":{"line":2043,"column":1,"offset":65958},"end":{"line":2043,"column":49,"offset":66006},"indent":[]}}],"position":{"start":{"line":2043,"column":1,"offset":65958},"end":{"line":2043,"column":49,"offset":66006},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2044,"column":1,"offset":66007},"end":{"line":2049,"column":4,"offset":66132},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"to","position":{"start":{"line":2051,"column":1,"offset":66134},"end":{"line":2051,"column":3,"offset":66136},"indent":[]}}],"position":{"start":{"line":2051,"column":1,"offset":66134},"end":{"line":2051,"column":3,"offset":66136},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ts<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">*</span><span class=\"token number\">1000000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2052,"column":1,"offset":66137},"end":{"line":2076,"column":4,"offset":66651},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The member time_spent and base are in microseconds.  Each function above does the appropriate conversions.","position":{"start":{"line":2078,"column":1,"offset":66653},"end":{"line":2078,"column":107,"offset":66759},"indent":[]}}],"position":{"start":{"line":2078,"column":1,"offset":66653},"end":{"line":2078,"column":107,"offset":66759},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"timer.c (the finished product)","position":{"start":{"line":2081,"column":1,"offset":66762},"end":{"line":2081,"column":31,"offset":66792},"indent":[]}}],"position":{"start":{"line":2081,"column":1,"offset":66762},"end":{"line":2081,"column":31,"offset":66792},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timer.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_s</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">long</span> base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> time_spent<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> start_time<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntimer_t <span class=\"token operator\">*</span><span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  timer_t <span class=\"token operator\">*</span>t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timer_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">=</span> repeat<span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>start_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* get the number of times a task is meant to repeat */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> t<span class=\"token operator\">-></span>repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* set the number of times a task is meant to repeat */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_set_repeat</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">=</span> repeat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>sub<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span>sub<span class=\"token operator\">-></span>time_spent<span class=\"token operator\">+</span>sub<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> timer_t <span class=\"token operator\">*</span>add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  t<span class=\"token operator\">-></span>base <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>add<span class=\"token operator\">-></span>time_spent<span class=\"token operator\">+</span>add<span class=\"token operator\">-></span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>start_time <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> tv<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">;</span>\n  v <span class=\"token operator\">-=</span> t<span class=\"token operator\">-></span>start_time<span class=\"token punctuation\">;</span>\n  t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+=</span> v<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ts<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_us</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_ms</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">timer_sec</span><span class=\"token punctuation\">(</span>timer_t <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">double</span> r <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>repeat <span class=\"token operator\">*</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> ts <span class=\"token operator\">=</span> t<span class=\"token operator\">-></span>time_spent <span class=\"token operator\">+</span> t<span class=\"token operator\">-></span>base<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ts <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">*</span><span class=\"token number\">1000000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2082,"column":1,"offset":66793},"end":{"line":2163,"column":4,"offset":68423},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that the timer interface has been defined, we can use it in our test_timer.c code.","position":{"start":{"line":2165,"column":1,"offset":68425},"end":{"line":2165,"column":87,"offset":68511},"indent":[]}}],"position":{"start":{"line":2165,"column":1,"offset":68425},"end":{"line":2165,"column":87,"offset":68511},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"test_timer.c","position":{"start":{"line":2167,"column":1,"offset":68513},"end":{"line":2167,"column":13,"offset":68525},"indent":[]}}],"position":{"start":{"line":2167,"column":1,"offset":68513},"end":{"line":2167,"column":13,"offset":68525},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timer.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> tmp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    s<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> repeat_test <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n  timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    timer_t <span class=\"token operator\">*</span>test_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">,</span> copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">,</span> test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s => %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"overall time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_destroy</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2168,"column":1,"offset":68526},"end":{"line":2221,"column":4,"offset":69804},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The beginning should look familiar","position":{"start":{"line":2223,"column":1,"offset":69806},"end":{"line":2223,"column":35,"offset":69840},"indent":[]}}],"position":{"start":{"line":2223,"column":1,"offset":69806},"end":{"line":2223,"column":35,"offset":69840},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\">#include \"timer.h\"</span>\n\n<span class=\"token comment\">#include &lt;stdio.h></span>\n<span class=\"token comment\">#include &lt;stdlib.h></span>\n<span class=\"token comment\">#include &lt;string.h></span>\n\nvoid reverse_string<span class=\"token punctuation\">(</span> char *s, size_t len <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  char *e <span class=\"token operator\">=</span> s+len-1<span class=\"token punctuation\">;</span>\n  while<span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    char tmp <span class=\"token operator\">=</span> *s<span class=\"token punctuation\">;</span>\n    *s <span class=\"token operator\">=</span> *e<span class=\"token punctuation\">;</span>\n    *e <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n    s++<span class=\"token punctuation\">;</span>\n    e--<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nint main<span class=\"token punctuation\">(</span> int argc, char *argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>","position":{"start":{"line":2224,"column":1,"offset":69841},"end":{"line":2243,"column":4,"offset":70122},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"We include the interface (or header file) we just created in the first line.  The rest of the code above has already been discussed.  ","position":{"start":{"line":2245,"column":1,"offset":70124},"end":{"line":2245,"column":135,"offset":70258},"indent":[]}}],"position":{"start":{"line":2245,"column":1,"offset":70124},"end":{"line":2245,"column":135,"offset":70258},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Considering what the code looked like before using the timer object offers insight into understanding the code.","position":{"start":{"line":2247,"column":1,"offset":70260},"end":{"line":2247,"column":112,"offset":70371},"indent":[]}}],"position":{"start":{"line":2247,"column":1,"offset":70260},"end":{"line":2247,"column":112,"offset":70371},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Consider the following code from ","position":{"start":{"line":2249,"column":1,"offset":70373},"end":{"line":2249,"column":34,"offset":70406},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":2249,"column":34,"offset":70406},"end":{"line":2249,"column":37,"offset":70409},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":2249,"column":37,"offset":70409},"end":{"line":2249,"column":52,"offset":70424},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/8","position":{"start":{"line":2249,"column":53,"offset":70425},"end":{"line":2249,"column":61,"offset":70433},"indent":[]}}],"position":{"start":{"line":2249,"column":52,"offset":70424},"end":{"line":2249,"column":62,"offset":70434},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":2249,"column":62,"offset":70434},"end":{"line":2249,"column":67,"offset":70439},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":2249,"column":67,"offset":70439},"end":{"line":2249,"column":71,"offset":70443},"indent":[]}}],"position":{"start":{"line":2249,"column":1,"offset":70373},"end":{"line":2249,"column":71,"offset":70443},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> overall_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">long</span> copy_t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">long</span> copy_t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2250,"column":1,"offset":70444},"end":{"line":2261,"column":4,"offset":70698},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"vs","position":{"start":{"line":2263,"column":1,"offset":70700},"end":{"line":2263,"column":3,"offset":70702},"indent":[]}}],"position":{"start":{"line":2263,"column":1,"offset":70700},"end":{"line":2263,"column":3,"offset":70702},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2264,"column":1,"offset":70703},"end":{"line":2276,"column":4,"offset":71048},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"First, it is important to recognize that the new code is longer.  The number of lines of code isn't always a good measure to decide to create an object.  In the case of the timer object, the get_time() function is hidden in the timer object.  ","position":{"start":{"line":2278,"column":1,"offset":71050},"end":{"line":2278,"column":244,"offset":71293},"indent":[]}}],"position":{"start":{"line":2278,"column":1,"offset":71050},"end":{"line":2278,"column":244,"offset":71293},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of just having a counter for the overall time, I've replaced it with a timer object named overall_timer.","position":{"start":{"line":2280,"column":1,"offset":71295},"end":{"line":2280,"column":113,"offset":71407},"indent":[]}}],"position":{"start":{"line":2280,"column":1,"offset":71295},"end":{"line":2280,"column":113,"offset":71407},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> overall_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2281,"column":1,"offset":71408},"end":{"line":2283,"column":4,"offset":71439},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2285,"column":1,"offset":71441},"end":{"line":2285,"column":8,"offset":71448},"indent":[]}}],"position":{"start":{"line":2285,"column":1,"offset":71441},"end":{"line":2285,"column":8,"offset":71448},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2286,"column":1,"offset":71449},"end":{"line":2288,"column":4,"offset":71507},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In order to measure the time to copy, we will need a copy timer and start and stop it.","position":{"start":{"line":2290,"column":1,"offset":71509},"end":{"line":2290,"column":87,"offset":71595},"indent":[]}}],"position":{"start":{"line":2290,"column":1,"offset":71509},"end":{"line":2290,"column":87,"offset":71595},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> copy_t1 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">long</span> copy_t2 <span class=\"token operator\">=</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2291,"column":1,"offset":71596},"end":{"line":2297,"column":4,"offset":71719},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2299,"column":1,"offset":71721},"end":{"line":2299,"column":8,"offset":71728},"indent":[]}}],"position":{"start":{"line":2299,"column":1,"offset":71721},"end":{"line":2299,"column":8,"offset":71728},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2300,"column":1,"offset":71729},"end":{"line":2307,"column":4,"offset":71914},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The timer","position":{"start":{"line":2309,"column":1,"offset":71916},"end":{"line":2309,"column":10,"offset":71925},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"init call gets the repeat","position":{"start":{"line":2309,"column":11,"offset":71926},"end":{"line":2309,"column":36,"offset":71951},"indent":[]}}],"position":{"start":{"line":2309,"column":10,"offset":71925},"end":{"line":2309,"column":37,"offset":71952},"indent":[]}},{"type":"text","value":"test variable from the overall","position":{"start":{"line":2309,"column":37,"offset":71952},"end":{"line":2309,"column":67,"offset":71982},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer since they should all be the same.  The timer","position":{"start":{"line":2309,"column":68,"offset":71983},"end":{"line":2309,"column":119,"offset":72034},"indent":[]}}],"position":{"start":{"line":2309,"column":67,"offset":71982},"end":{"line":2309,"column":120,"offset":72035},"indent":[]}},{"type":"text","value":"init call could have just been","position":{"start":{"line":2309,"column":120,"offset":72035},"end":{"line":2309,"column":150,"offset":72065},"indent":[]}}],"position":{"start":{"line":2309,"column":1,"offset":71916},"end":{"line":2309,"column":150,"offset":72065},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>copy_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2310,"column":1,"offset":72066},"end":{"line":2312,"column":4,"offset":72121},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"but that would require that the repeat","position":{"start":{"line":2314,"column":1,"offset":72123},"end":{"line":2314,"column":39,"offset":72161},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"test variable be separate.  This becomes important in more complex timings, but for now, I'm primarily showing how timer","position":{"start":{"line":2314,"column":40,"offset":72162},"end":{"line":2314,"column":160,"offset":72282},"indent":[]}}],"position":{"start":{"line":2314,"column":39,"offset":72161},"end":{"line":2314,"column":161,"offset":72283},"indent":[]}},{"type":"text","value":"get","position":{"start":{"line":2314,"column":161,"offset":72283},"end":{"line":2314,"column":164,"offset":72286},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"repeat can be useful.  In C, parameters to functions can be the result of other functions.  The timer","position":{"start":{"line":2314,"column":165,"offset":72287},"end":{"line":2314,"column":266,"offset":72388},"indent":[]}}],"position":{"start":{"line":2314,"column":164,"offset":72286},"end":{"line":2314,"column":267,"offset":72389},"indent":[]}},{"type":"text","value":"get","position":{"start":{"line":2314,"column":267,"offset":72389},"end":{"line":2314,"column":270,"offset":72392},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"repeat call would be resolved before calling timer","position":{"start":{"line":2314,"column":271,"offset":72393},"end":{"line":2314,"column":321,"offset":72443},"indent":[]}}],"position":{"start":{"line":2314,"column":270,"offset":72392},"end":{"line":2314,"column":322,"offset":72444},"indent":[]}},{"type":"text","value":"init.","position":{"start":{"line":2314,"column":322,"offset":72444},"end":{"line":2314,"column":327,"offset":72449},"indent":[]}}],"position":{"start":{"line":2314,"column":1,"offset":72123},"end":{"line":2314,"column":327,"offset":72449},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To find the time spent in the first example, you need to subtract copy","position":{"start":{"line":2316,"column":1,"offset":72451},"end":{"line":2316,"column":71,"offset":72521},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"t1 from copy","position":{"start":{"line":2316,"column":72,"offset":72522},"end":{"line":2316,"column":84,"offset":72534},"indent":[]}}],"position":{"start":{"line":2316,"column":71,"offset":72521},"end":{"line":2316,"column":85,"offset":72535},"indent":[]}},{"type":"text","value":"t2 and then divide that by the repeat factor.  This will return the number of microseconds that elapsed.  The timer","position":{"start":{"line":2316,"column":85,"offset":72535},"end":{"line":2316,"column":200,"offset":72650},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"us(copy","position":{"start":{"line":2316,"column":201,"offset":72651},"end":{"line":2316,"column":208,"offset":72658},"indent":[]}}],"position":{"start":{"line":2316,"column":200,"offset":72650},"end":{"line":2316,"column":209,"offset":72659},"indent":[]}},{"type":"text","value":"timer) would yield the same result.  With the timer object, it is easy to get the time spent in microseconds, but also nanoseconds, milliseconds, and seconds.  Also, the timer object automatically converts the time spent to a double (a decimal).","position":{"start":{"line":2316,"column":209,"offset":72659},"end":{"line":2316,"column":454,"offset":72904},"indent":[]}}],"position":{"start":{"line":2316,"column":1,"offset":72451},"end":{"line":2316,"column":454,"offset":72904},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The next section of code times the test (the reverse call) in the same way that the copy timer worked.","position":{"start":{"line":2319,"column":1,"offset":72907},"end":{"line":2319,"column":103,"offset":73009},"indent":[]}}],"position":{"start":{"line":2319,"column":1,"offset":72907},"end":{"line":2319,"column":103,"offset":73009},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>test_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span><span class=\"token function\">timer_get_repeat</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">timer_start</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>repeat_test<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">reverse_string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">timer_stop</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2320,"column":1,"offset":73010},"end":{"line":2328,"column":4,"offset":73221},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The next two lines begin to show additional usefulness of the timer object.  The copy","position":{"start":{"line":2330,"column":1,"offset":73223},"end":{"line":2330,"column":86,"offset":73308},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer is subtracted from the test","position":{"start":{"line":2330,"column":87,"offset":73309},"end":{"line":2330,"column":120,"offset":73342},"indent":[]}}],"position":{"start":{"line":2330,"column":86,"offset":73308},"end":{"line":2330,"column":121,"offset":73343},"indent":[]}},{"type":"text","value":"timer and then the test","position":{"start":{"line":2330,"column":121,"offset":73343},"end":{"line":2330,"column":144,"offset":73366},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer is added to the overall","position":{"start":{"line":2330,"column":145,"offset":73367},"end":{"line":2330,"column":174,"offset":73396},"indent":[]}}],"position":{"start":{"line":2330,"column":144,"offset":73366},"end":{"line":2330,"column":175,"offset":73397},"indent":[]}},{"type":"text","value":"timer.  ","position":{"start":{"line":2330,"column":175,"offset":73397},"end":{"line":2330,"column":183,"offset":73405},"indent":[]}}],"position":{"start":{"line":2330,"column":1,"offset":73223},"end":{"line":2330,"column":183,"offset":73405},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">timer_subtract</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">,</span> copy_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">timer_add</span><span class=\"token punctuation\">(</span>overall_timer<span class=\"token punctuation\">,</span> test_timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2331,"column":1,"offset":73406},"end":{"line":2334,"column":4,"offset":73492},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I think this is easier to read than","position":{"start":{"line":2336,"column":1,"offset":73494},"end":{"line":2336,"column":36,"offset":73529},"indent":[]}}],"position":{"start":{"line":2336,"column":1,"offset":73494},"end":{"line":2336,"column":36,"offset":73529},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> time_spent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>test_t2<span class=\"token operator\">-</span>test_t1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>copy_t2<span class=\"token operator\">-</span>copy_t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\noverall_time <span class=\"token operator\">+=</span> time_spent<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2337,"column":1,"offset":73530},"end":{"line":2340,"column":4,"offset":73623},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The timer objects also reduce the number of variables that are maintained in the code (each timer object replaces a t2 and t1 variable).","position":{"start":{"line":2342,"column":1,"offset":73625},"end":{"line":2342,"column":137,"offset":73761},"indent":[]}}],"position":{"start":{"line":2342,"column":1,"offset":73625},"end":{"line":2342,"column":137,"offset":73761},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, the following line","position":{"start":{"line":2344,"column":1,"offset":73763},"end":{"line":2344,"column":28,"offset":73790},"indent":[]}}],"position":{"start":{"line":2344,"column":1,"offset":73763},"end":{"line":2344,"column":28,"offset":73790},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>time_spent<span class=\"token operator\">*</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token operator\">*</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2345,"column":1,"offset":73791},"end":{"line":2347,"column":4,"offset":73872},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"is replaced with","position":{"start":{"line":2349,"column":1,"offset":73874},"end":{"line":2349,"column":17,"offset":73890},"indent":[]}}],"position":{"start":{"line":2349,"column":1,"offset":73874},"end":{"line":2349,"column":17,"offset":73890},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"time_spent: %0.4fns\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">timer_ns</span><span class=\"token punctuation\">(</span>test_timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2350,"column":1,"offset":73891},"end":{"line":2352,"column":4,"offset":73956},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"which again reduces complexity.  It is also easy to switch from nanoseconds to another measure if desired.","position":{"start":{"line":2354,"column":1,"offset":73958},"end":{"line":2354,"column":107,"offset":74064},"indent":[]}}],"position":{"start":{"line":2354,"column":1,"offset":73958},"end":{"line":2354,"column":107,"offset":74064},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#making-the-timer-object-reusable","title":null,"children":[],"data":{"hProperties":{"aria-label":"making the timer object reusable permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Making the timer object reusable","position":{"start":{"line":2356,"column":4,"offset":74069},"end":{"line":2356,"column":36,"offset":74101},"indent":[]}}],"position":{"start":{"line":2356,"column":1,"offset":74066},"end":{"line":2356,"column":36,"offset":74101},"indent":[]},"data":{"id":"making-the-timer-object-reusable","htmlAttributes":{"id":"making-the-timer-object-reusable"},"hProperties":{"id":"making-the-timer-object-reusable"}}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":2358,"column":1,"offset":74103},"end":{"line":2358,"column":32,"offset":74134},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":2358,"column":32,"offset":74134},"end":{"line":2358,"column":35,"offset":74137},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":2358,"column":35,"offset":74137},"end":{"line":2358,"column":50,"offset":74152},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/11","position":{"start":{"line":2358,"column":51,"offset":74153},"end":{"line":2358,"column":60,"offset":74162},"indent":[]}}],"position":{"start":{"line":2358,"column":50,"offset":74152},"end":{"line":2358,"column":61,"offset":74163},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":2358,"column":61,"offset":74163},"end":{"line":2358,"column":66,"offset":74168},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":2358,"column":66,"offset":74168},"end":{"line":2358,"column":70,"offset":74172},"indent":[]}}],"position":{"start":{"line":2358,"column":1,"offset":74103},"end":{"line":2358,"column":70,"offset":74172},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This timer object is done and is ready to be reused.  In C, all of your functions share the same namespace.  If another project has a function named timer_init, there will be a conflict.  Projects typically adopt a package prefix in addition to the object prefix to prevent conflicts.  For this project, we will use ac (another c library).","position":{"start":{"line":2360,"column":1,"offset":74174},"end":{"line":2360,"column":340,"offset":74513},"indent":[]}}],"position":{"start":{"line":2360,"column":1,"offset":74174},"end":{"line":2360,"column":340,"offset":74513},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"My rules for adding the prefix are:","position":{"start":{"line":2362,"column":1,"offset":74515},"end":{"line":2362,"column":36,"offset":74550},"indent":[]}}],"position":{"start":{"line":2362,"column":1,"offset":74515},"end":{"line":2362,"column":36,"offset":74550},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.  Comments should refer to the object name only.\n2.  All code references should be prefixed.\n3.  Functions should only use a prefix once even if multiple objects are\n    referenced in the name</code></pre></div>","position":{"start":{"line":2363,"column":1,"offset":74551},"end":{"line":2368,"column":4,"offset":74753},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing to do is to copy timer.h to ac","position":{"start":{"line":2370,"column":1,"offset":74755},"end":{"line":2370,"column":47,"offset":74801},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.h and then apply the rules mentioned above.  The ac","position":{"start":{"line":2370,"column":48,"offset":74802},"end":{"line":2370,"column":105,"offset":74859},"indent":[]}}],"position":{"start":{"line":2370,"column":47,"offset":74801},"end":{"line":2370,"column":106,"offset":74860},"indent":[]}},{"type":"text","value":"timer header file exists in the current directory. What follows is a partial diff.","position":{"start":{"line":2370,"column":106,"offset":74860},"end":{"line":2370,"column":188,"offset":74942},"indent":[]}}],"position":{"start":{"line":2370,"column":1,"offset":74755},"end":{"line":2370,"column":188,"offset":74942},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ diff timer.h ac_timer.h\n1,2c1,2\n&lt; #ifndef _timer_H\n&lt; #define _timer_H\n---\n&gt; #ifndef _ac_timer_H\n&gt; #define _ac_timer_H\n4,5c4,5\n&lt; struct timer_s;\n&lt; typedef struct timer_s timer_t;\n---\n&gt; struct ac_timer_s;\n&gt; typedef struct ac_timer_s ac_timer_t;\n12c12\n&lt; timer_t *timer_init(int repeat);\n---\n&gt; ac_timer_t *ac_timer_init(int repeat);\n...</code></pre></div>","position":{"start":{"line":2372,"column":1,"offset":74944},"end":{"line":2391,"column":4,"offset":75286},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The same thing is done for timer.c (copy to ac_timer.c and apply rules).","position":{"start":{"line":2393,"column":1,"offset":75288},"end":{"line":2393,"column":73,"offset":75360},"indent":[]}}],"position":{"start":{"line":2393,"column":1,"offset":75288},"end":{"line":2393,"column":73,"offset":75360},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> timer.c ac_timer.c\n1c1\n<span class=\"token operator\">&lt;</span> <span class=\"token comment\">#include \"timer.h\"</span>\n---\n<span class=\"token operator\">></span> <span class=\"token comment\">#include \"ac_timer.h\"</span>\n7c7\n<span class=\"token operator\">&lt;</span> struct timer_s <span class=\"token punctuation\">{</span>\n---\n<span class=\"token operator\">></span> struct ac_timer_s <span class=\"token punctuation\">{</span>\n<span class=\"token number\">14</span>,15c14,15\n<span class=\"token operator\">&lt;</span> timer_t *timer_init<span class=\"token punctuation\">(</span>int repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">&lt;</span>   timer_t *t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timer_t *<span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span>sizeof<span class=\"token punctuation\">(</span>timer_t<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n---\n<span class=\"token operator\">></span> ac_timer_t *ac_timer_init<span class=\"token punctuation\">(</span>int repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token operator\">></span>   ac_timer_t *t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ac_timer_t *<span class=\"token punctuation\">)</span>malloc<span class=\"token punctuation\">(</span>sizeof<span class=\"token punctuation\">(</span>ac_timer_t<span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n21c21\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":2394,"column":1,"offset":75361},"end":{"line":2412,"column":4,"offset":75719},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Finally, test","position":{"start":{"line":2414,"column":1,"offset":75721},"end":{"line":2414,"column":14,"offset":75734},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timer.c needs to change to use ac","position":{"start":{"line":2414,"column":15,"offset":75735},"end":{"line":2414,"column":48,"offset":75768},"indent":[]}}],"position":{"start":{"line":2414,"column":14,"offset":75734},"end":{"line":2414,"column":49,"offset":75769},"indent":[]}},{"type":"text","value":"timer instead of timer.","position":{"start":{"line":2414,"column":49,"offset":75769},"end":{"line":2414,"column":72,"offset":75792},"indent":[]}}],"position":{"start":{"line":2414,"column":1,"offset":75721},"end":{"line":2414,"column":72,"offset":75792},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ac_timer.h\"</span></span></code></pre></div>","position":{"start":{"line":2416,"column":1,"offset":75794},"end":{"line":2418,"column":4,"offset":75824},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2420,"column":1,"offset":75826},"end":{"line":2420,"column":8,"offset":75833},"indent":[]}}],"position":{"start":{"line":2420,"column":1,"offset":75826},"end":{"line":2420,"column":8,"offset":75833},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"timer.h\"</span></span></code></pre></div>","position":{"start":{"line":2421,"column":1,"offset":75834},"end":{"line":2423,"column":4,"offset":75861},"indent":[1,1]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2425,"column":1,"offset":75863},"end":{"line":2427,"column":4,"offset":75921},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"becomes","position":{"start":{"line":2429,"column":1,"offset":75923},"end":{"line":2429,"column":8,"offset":75930},"indent":[]}}],"position":{"start":{"line":2429,"column":1,"offset":75923},"end":{"line":2429,"column":8,"offset":75930},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ac_timer_t <span class=\"token operator\">*</span>overall_timer <span class=\"token operator\">=</span> <span class=\"token function\">ac_timer_init</span><span class=\"token punctuation\">(</span>repeat_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2430,"column":1,"offset":75931},"end":{"line":2432,"column":4,"offset":75995},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"and so on.","position":{"start":{"line":2434,"column":1,"offset":75997},"end":{"line":2434,"column":11,"offset":76007},"indent":[]}}],"position":{"start":{"line":2434,"column":1,"offset":75997},"end":{"line":2434,"column":11,"offset":76007},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#splitting-up-a-project-into-multiple-directories","title":null,"children":[],"data":{"hProperties":{"aria-label":"splitting up a project into multiple directories permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Splitting up a project into multiple directories","position":{"start":{"line":2436,"column":4,"offset":76012},"end":{"line":2436,"column":52,"offset":76060},"indent":[]}}],"position":{"start":{"line":2436,"column":1,"offset":76009},"end":{"line":2436,"column":52,"offset":76060},"indent":[]},"data":{"id":"splitting-up-a-project-into-multiple-directories","htmlAttributes":{"id":"splitting-up-a-project-into-multiple-directories"},"hProperties":{"id":"splitting-up-a-project-into-multiple-directories"}}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Moving ac_timer to src (and variables in Makefile)","position":{"start":{"line":2437,"column":4,"offset":76064},"end":{"line":2437,"column":54,"offset":76114},"indent":[]}}],"position":{"start":{"line":2437,"column":4,"offset":76064},"end":{"line":2437,"column":54,"offset":76114},"indent":[]}}],"position":{"start":{"line":2437,"column":1,"offset":76061},"end":{"line":2437,"column":54,"offset":76114},"indent":[]}}],"position":{"start":{"line":2437,"column":1,"offset":76061},"end":{"line":2437,"column":54,"offset":76114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":2439,"column":1,"offset":76116},"end":{"line":2439,"column":32,"offset":76147},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":2439,"column":32,"offset":76147},"end":{"line":2439,"column":35,"offset":76150},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":2439,"column":35,"offset":76150},"end":{"line":2439,"column":50,"offset":76165},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/12","position":{"start":{"line":2439,"column":51,"offset":76166},"end":{"line":2439,"column":60,"offset":76175},"indent":[]}}],"position":{"start":{"line":2439,"column":50,"offset":76165},"end":{"line":2439,"column":61,"offset":76176},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":2439,"column":61,"offset":76176},"end":{"line":2439,"column":66,"offset":76181},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":2439,"column":66,"offset":76181},"end":{"line":2439,"column":70,"offset":76185},"indent":[]}}],"position":{"start":{"line":2439,"column":1,"offset":76116},"end":{"line":2439,"column":70,"offset":76185},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once the object has the ac prefix, we can move it to the src directory.  This is done by executing the following command - this actually won't work as it already has been moved.","position":{"start":{"line":2441,"column":1,"offset":76187},"end":{"line":2441,"column":178,"offset":76364},"indent":[]}}],"position":{"start":{"line":2441,"column":1,"offset":76187},"end":{"line":2441,"column":178,"offset":76364},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This command will not work because it was done for you.","position":{"start":{"line":2443,"column":1,"offset":76366},"end":{"line":2443,"column":56,"offset":76421},"indent":[]}}],"position":{"start":{"line":2443,"column":1,"offset":76366},"end":{"line":2443,"column":56,"offset":76421},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> ac_timer.h ac_timer.c <span class=\"token variable\">$ac</span>/src</code></pre></div>","position":{"start":{"line":2444,"column":1,"offset":76422},"end":{"line":2446,"column":4,"offset":76466},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can see that the files exist by running","position":{"start":{"line":2448,"column":1,"offset":76468},"end":{"line":2448,"column":44,"offset":76511},"indent":[]}}],"position":{"start":{"line":2448,"column":1,"offset":76468},"end":{"line":2448,"column":44,"offset":76511},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/src\n<span class=\"token function\">ls</span> -l ac_timer.*</code></pre></div>","position":{"start":{"line":2449,"column":1,"offset":76512},"end":{"line":2452,"column":4,"offset":76551},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"which will output","position":{"start":{"line":2454,"column":1,"offset":76553},"end":{"line":2454,"column":18,"offset":76570},"indent":[]}}],"position":{"start":{"line":2454,"column":1,"offset":76553},"end":{"line":2454,"column":18,"offset":76570},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">-rw-r--r--  <span class=\"token number\">1</span> ac  staff  <span class=\"token number\">1777</span> Sep <span class=\"token number\">11</span> <span class=\"token number\">12</span>:12 ac_timer.c\n-rw-r--r--  <span class=\"token number\">1</span> ac  staff  <span class=\"token number\">1314</span> Sep <span class=\"token number\">11</span> <span class=\"token number\">12</span>:12 ac_timer.h</code></pre></div>","position":{"start":{"line":2455,"column":1,"offset":76571},"end":{"line":2458,"column":4,"offset":76690},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"You can change back to the previous directory (illustrations/2","position":{"start":{"line":2460,"column":1,"offset":76692},"end":{"line":2460,"column":63,"offset":76754},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/12","position":{"start":{"line":2460,"column":64,"offset":76755},"end":{"line":2460,"column":73,"offset":76764},"indent":[]}}],"position":{"start":{"line":2460,"column":63,"offset":76754},"end":{"line":2460,"column":74,"offset":76765},"indent":[]}},{"type":"text","value":"timer) by running","position":{"start":{"line":2460,"column":74,"offset":76765},"end":{"line":2460,"column":91,"offset":76782},"indent":[]}}],"position":{"start":{"line":2460,"column":1,"offset":76692},"end":{"line":2460,"column":91,"offset":76782},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> -</code></pre></div>","position":{"start":{"line":2461,"column":1,"offset":76783},"end":{"line":2463,"column":4,"offset":76799},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":2465,"column":1,"offset":76801},"end":{"line":2465,"column":3,"offset":76803},"indent":[]}}],"position":{"start":{"line":2465,"column":1,"offset":76801},"end":{"line":2465,"column":3,"offset":76803},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$ac</span>/illustrations/2_timing/12_timer</code></pre></div>","position":{"start":{"line":2466,"column":1,"offset":76804},"end":{"line":2468,"column":4,"offset":76854},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"cd - allows you to change to the directory that you were in previously and is useful.","position":{"start":{"line":2470,"column":1,"offset":76856},"end":{"line":2470,"column":86,"offset":76941},"indent":[]}}],"position":{"start":{"line":2470,"column":1,"offset":76856},"end":{"line":2470,"column":86,"offset":76941},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ensuring the program builds properly requires a few changes to Makefile. The diff looks like the following:","position":{"start":{"line":2472,"column":1,"offset":76943},"end":{"line":2472,"column":108,"offset":77050},"indent":[]}}],"position":{"start":{"line":2472,"column":1,"offset":76943},"end":{"line":2472,"column":108,"offset":77050},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">diff</span> Makefile <span class=\"token punctuation\">..</span>/11_timer/Makefile\n<span class=\"token number\">1</span>,5d0\n<span class=\"token operator\">&lt;</span> <span class=\"token assign-left variable\">ROOT</span><span class=\"token operator\">=</span><span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>/<span class=\"token punctuation\">..</span>\n<span class=\"token operator\">&lt;</span> <span class=\"token assign-left variable\">OBJECTS</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>ROOT<span class=\"token variable\">)</span></span>/src/ac_timer.c\n<span class=\"token operator\">&lt;</span> <span class=\"token assign-left variable\">HEADER_FILES</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>ROOT<span class=\"token variable\">)</span></span>/src/ac_timer.h\n<span class=\"token operator\">&lt;</span> <span class=\"token assign-left variable\">FLAGS</span><span class=\"token operator\">=</span>-O3 -I<span class=\"token variable\"><span class=\"token variable\">$(</span>ROOT<span class=\"token variable\">)</span></span>/src\n<span class=\"token operator\">&lt;</span>\n<span class=\"token number\">8</span>,9c3,4\n<span class=\"token operator\">&lt;</span> test_timer: test_timer.c <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJECTS<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>HEADER_FILES<span class=\"token variable\">)</span></span>\n<span class=\"token operator\">&lt;</span> \tgcc <span class=\"token variable\"><span class=\"token variable\">$(</span>FLAGS<span class=\"token variable\">)</span></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>OBJECTS<span class=\"token variable\">)</span></span> test_timer.c -o test_timer\n---\n<span class=\"token operator\">></span> test_timer: test_timer.c ac_timer.c ac_timer.h\n<span class=\"token operator\">></span> \tgcc -O3 ac_timer.c test_timer.c -o test_timer</code></pre></div>","position":{"start":{"line":2474,"column":1,"offset":77052},"end":{"line":2488,"column":4,"offset":77439},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A new section of variables are added at the top and the test_timer target use those variables.","position":{"start":{"line":2489,"column":1,"offset":77440},"end":{"line":2489,"column":95,"offset":77534},"indent":[]}}],"position":{"start":{"line":2489,"column":1,"offset":77440},"end":{"line":2489,"column":95,"offset":77534},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Makefile for this project.","position":{"start":{"line":2491,"column":1,"offset":77536},"end":{"line":2491,"column":31,"offset":77566},"indent":[]}}],"position":{"start":{"line":2491,"column":1,"offset":77536},"end":{"line":2491,"column":31,"offset":77566},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">ROOT<span class=\"token operator\">=</span>../../..\nOBJECTS<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_timer.c\nHEADER_FILES<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_timer.h\nFLAGS<span class=\"token operator\">=</span>-O3 -I<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src\n\n<span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_timer examples\n\n<span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJECTS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>HEADER_FILES<span class=\"token punctuation\">)</span>\n\tgcc <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJECTS<span class=\"token punctuation\">)</span> test_timer.c -o test_timer\n\n<span class=\"token symbol\">examples</span><span class=\"token punctuation\">:</span>\n\t./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\trm -f test_timer *~</code></pre></div>","position":{"start":{"line":2492,"column":1,"offset":77567},"end":{"line":2508,"column":4,"offset":77907},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"make allows you to create variables using the ","position":{"start":{"line":2510,"column":1,"offset":77909},"end":{"line":2510,"column":47,"offset":77955},"indent":[]}},{"type":"html","value":"<name>","position":{"start":{"line":2510,"column":47,"offset":77955},"end":{"line":2510,"column":53,"offset":77961},"indent":[]}},{"type":"text","value":"=","position":{"start":{"line":2510,"column":53,"offset":77961},"end":{"line":2510,"column":54,"offset":77962},"indent":[]}},{"type":"html","value":"<value>","position":{"start":{"line":2510,"column":54,"offset":77962},"end":{"line":2510,"column":61,"offset":77969},"indent":[]}},{"type":"text","value":" syntax outside of sections.  You can then reference the value of those variables by enclosing the name in $(","position":{"start":{"line":2510,"column":61,"offset":77969},"end":{"line":2510,"column":170,"offset":78078},"indent":[]}},{"type":"html","value":"<name>","position":{"start":{"line":2510,"column":170,"offset":78078},"end":{"line":2510,"column":176,"offset":78084},"indent":[]}},{"type":"text","value":").  One variable can reference another variable (see OBJECTS and ROOT above).  For gcc to find the ac_timer.h file, the src path needs to be added to gcc's include path.  That is done by using the -I","position":{"start":{"line":2510,"column":176,"offset":78084},"end":{"line":2510,"column":375,"offset":78283},"indent":[]}},{"type":"html","value":"<directory>","position":{"start":{"line":2510,"column":375,"offset":78283},"end":{"line":2510,"column":386,"offset":78294},"indent":[]}},{"type":"text","value":" option.  If you have multiple include paths, you can specify -I","position":{"start":{"line":2510,"column":386,"offset":78294},"end":{"line":2510,"column":450,"offset":78358},"indent":[]}},{"type":"html","value":"<directory>","position":{"start":{"line":2510,"column":450,"offset":78358},"end":{"line":2510,"column":461,"offset":78369},"indent":[]}},{"type":"text","value":" multiple times.  ","position":{"start":{"line":2510,"column":461,"offset":78369},"end":{"line":2510,"column":479,"offset":78387},"indent":[]}}],"position":{"start":{"line":2510,"column":1,"offset":77909},"end":{"line":2510,"column":479,"offset":78387},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","url":"#splitting-up-the-makefile","title":null,"children":[],"data":{"hProperties":{"aria-label":"splitting up the makefile permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"text","value":"Splitting up the Makefile","position":{"start":{"line":2512,"column":4,"offset":78392},"end":{"line":2512,"column":29,"offset":78417},"indent":[]}}],"position":{"start":{"line":2512,"column":1,"offset":78389},"end":{"line":2512,"column":29,"offset":78417},"indent":[]},"data":{"id":"splitting-up-the-makefile","htmlAttributes":{"id":"splitting-up-the-makefile"},"hProperties":{"id":"splitting-up-the-makefile"}}},{"type":"paragraph","children":[{"type":"text","value":"The following code is found in ","position":{"start":{"line":2514,"column":1,"offset":78419},"end":{"line":2514,"column":32,"offset":78450},"indent":[]}},{"type":"html","value":"<i>","position":{"start":{"line":2514,"column":32,"offset":78450},"end":{"line":2514,"column":35,"offset":78453},"indent":[]}},{"type":"text","value":"illustrations/2","position":{"start":{"line":2514,"column":35,"offset":78453},"end":{"line":2514,"column":50,"offset":78468},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/13","position":{"start":{"line":2514,"column":51,"offset":78469},"end":{"line":2514,"column":60,"offset":78478},"indent":[]}}],"position":{"start":{"line":2514,"column":50,"offset":78468},"end":{"line":2514,"column":61,"offset":78479},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":2514,"column":61,"offset":78479},"end":{"line":2514,"column":66,"offset":78484},"indent":[]}},{"type":"html","value":"</i>","position":{"start":{"line":2514,"column":66,"offset":78484},"end":{"line":2514,"column":70,"offset":78488},"indent":[]}}],"position":{"start":{"line":2514,"column":1,"offset":78419},"end":{"line":2514,"column":70,"offset":78488},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Ideally, the objects in src could be defined by a Makefile in src, and that Makefile could be included.  In src, there is a file named Makefile.include, which defines the variables that were in the Makefile in the last section (as well as for other objects in src).","position":{"start":{"line":2516,"column":1,"offset":78490},"end":{"line":2516,"column":266,"offset":78755},"indent":[]}}],"position":{"start":{"line":2516,"column":1,"offset":78490},"end":{"line":2516,"column":266,"offset":78755},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Makefile.include in src","position":{"start":{"line":2518,"column":1,"offset":78757},"end":{"line":2518,"column":24,"offset":78780},"indent":[]}}],"position":{"start":{"line":2518,"column":1,"offset":78757},"end":{"line":2518,"column":24,"offset":78780},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">OBJECTS<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_timer.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_buffer.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_pool.c\nHEADER_FILES<span class=\"token operator\">=</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_timer.h <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_buffer.h <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/ac_pool.h\nFLAGS<span class=\"token operator\">=</span>-O3 -I<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src</code></pre></div>","position":{"start":{"line":2519,"column":1,"offset":78781},"end":{"line":2523,"column":4,"offset":78979},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Makefile in illustrations/2","position":{"start":{"line":2525,"column":1,"offset":78981},"end":{"line":2525,"column":28,"offset":79008},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"timing/13","position":{"start":{"line":2525,"column":29,"offset":79009},"end":{"line":2525,"column":38,"offset":79018},"indent":[]}}],"position":{"start":{"line":2525,"column":28,"offset":79008},"end":{"line":2525,"column":39,"offset":79019},"indent":[]}},{"type":"text","value":"timer","position":{"start":{"line":2525,"column":39,"offset":79019},"end":{"line":2525,"column":44,"offset":79024},"indent":[]}}],"position":{"start":{"line":2525,"column":1,"offset":78981},"end":{"line":2525,"column":44,"offset":79024},"indent":[]}},{"type":"html","lang":"Makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\">ROOT<span class=\"token operator\">=</span>../../..\n<span class=\"token keyword\">include</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>ROOT<span class=\"token punctuation\">)</span>/src/Makefile.<span class=\"token keyword\">include</span>\n\n<span class=\"token symbol\">all</span><span class=\"token punctuation\">:</span> test_timer examples\n\n<span class=\"token symbol\">test_timer</span><span class=\"token punctuation\">:</span> test_timer.c <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJECTS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>HEADER_FILES<span class=\"token punctuation\">)</span>\n\tgcc <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>FLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJECTS<span class=\"token punctuation\">)</span> test_timer.c -o test_timer\n\n<span class=\"token symbol\">examples</span><span class=\"token punctuation\">:</span>\n\t./test_timer ABCDEFGHIJKLMNOPQRSTUVWXYZ Reverse\n\n<span class=\"token symbol\">clean</span><span class=\"token punctuation\">:</span>\n\trm -f test_timer *~</code></pre></div>","position":{"start":{"line":2526,"column":1,"offset":79025},"end":{"line":2540,"column":4,"offset":79311},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The difference is that instead of the OBJECTS, HEADER_FILES, and FLAGS variables being specified in the Makefile, they are included by including $(ROOT)/src/Makefile.include.","position":{"start":{"line":2542,"column":1,"offset":79313},"end":{"line":2542,"column":175,"offset":79487},"indent":[]}}],"position":{"start":{"line":2542,"column":1,"offset":79313},"end":{"line":2542,"column":175,"offset":79487},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","url":"#the-buffer-object","title":null,"children":[],"data":{"hProperties":{"aria-label":"the buffer object permalink","class":"anchor"},"hChildren":[{"type":"raw","value":"<svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>"}]}},{"type":"link","title":null,"url":"3_buffer.md","children":[{"type":"text","value":"The Buffer Object","position":{"start":{"line":2544,"column":4,"offset":79492},"end":{"line":2544,"column":21,"offset":79509},"indent":[]}}],"position":{"start":{"line":2544,"column":3,"offset":79491},"end":{"line":2544,"column":35,"offset":79523},"indent":[]}}],"position":{"start":{"line":2544,"column":1,"offset":79489},"end":{"line":2544,"column":35,"offset":79523},"indent":[]},"data":{"id":"the-buffer-object","htmlAttributes":{"id":"the-buffer-object"},"hProperties":{"id":"the-buffer-object"}}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"../README.md","children":[{"type":"text","value":"Table of Contents","position":{"start":{"line":2546,"column":2,"offset":79526},"end":{"line":2546,"column":19,"offset":79543},"indent":[]}}],"position":{"start":{"line":2546,"column":1,"offset":79525},"end":{"line":2546,"column":34,"offset":79558},"indent":[]}},{"type":"text","value":"  - Copyright 2019 Andy Curtis","position":{"start":{"line":2546,"column":34,"offset":79558},"end":{"line":2546,"column":64,"offset":79588},"indent":[]}}],"position":{"start":{"line":2546,"column":1,"offset":79525},"end":{"line":2546,"column":64,"offset":79588},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2547,"column":1,"offset":79589}}}}